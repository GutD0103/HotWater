
HotWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006100  08006100  000203a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006100  08006100  000203a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006100  08006100  000203a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a0  20000000  08006108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002570  200003a0  080064a8  000203a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002910  080064a8  00022910  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014078  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dbd  00000000  00000000  00034440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00037200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00038350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044f6  00000000  00000000  00039358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161cd  00000000  00000000  0003d84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098e4b  00000000  00000000  00053a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec866  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004128  00000000  00000000  000ec8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200003a0 	.word	0x200003a0
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005f84 	.word	0x08005f84

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200003a4 	.word	0x200003a4
 80000fc:	08005f84 	.word	0x08005f84

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <ADC_init>:
		  .Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH
};
DMA_HandleTypeDef hdma_adc1;

bool ADC_init()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
	bool success = true;
 8000232:	230f      	movs	r3, #15
 8000234:	18fb      	adds	r3, r7, r3
 8000236:	2201      	movs	r2, #1
 8000238:	701a      	strb	r2, [r3, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 800023a:	003b      	movs	r3, r7
 800023c:	0018      	movs	r0, r3
 800023e:	230c      	movs	r3, #12
 8000240:	001a      	movs	r2, r3
 8000242:	2100      	movs	r1, #0
 8000244:	f005 fa35 	bl	80056b2 <memset>

	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000248:	4b28      	ldr	r3, [pc, #160]	; (80002ec <ADC_init+0xc0>)
 800024a:	0018      	movs	r0, r3
 800024c:	f001 fa18 	bl	8001680 <HAL_ADC_Init>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d001      	beq.n	8000258 <ADC_init+0x2c>
	{
	  Error_Handler();
 8000254:	f000 feb2 	bl	8000fbc <Error_Handler>
	}
	sConfig.Channel = ADC_CHANNEL_0;
 8000258:	003b      	movs	r3, r7
 800025a:	2201      	movs	r2, #1
 800025c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800025e:	003b      	movs	r3, r7
 8000260:	2200      	movs	r2, #0
 8000262:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000264:	003b      	movs	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	003a      	movs	r2, r7
 800026c:	4b1f      	ldr	r3, [pc, #124]	; (80002ec <ADC_init+0xc0>)
 800026e:	0011      	movs	r1, r2
 8000270:	0018      	movs	r0, r3
 8000272:	f001 fbad 	bl	80019d0 <HAL_ADC_ConfigChannel>
 8000276:	1e03      	subs	r3, r0, #0
 8000278:	d001      	beq.n	800027e <ADC_init+0x52>
	{
	  Error_Handler();
 800027a:	f000 fe9f 	bl	8000fbc <Error_Handler>
	}

	/** Configure Regular Channel
	*/
	sConfig.Channel = ADC_CHANNEL_1;
 800027e:	003b      	movs	r3, r7
 8000280:	4a1b      	ldr	r2, [pc, #108]	; (80002f0 <ADC_init+0xc4>)
 8000282:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000284:	003b      	movs	r3, r7
 8000286:	2204      	movs	r2, #4
 8000288:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028a:	003a      	movs	r2, r7
 800028c:	4b17      	ldr	r3, [pc, #92]	; (80002ec <ADC_init+0xc0>)
 800028e:	0011      	movs	r1, r2
 8000290:	0018      	movs	r0, r3
 8000292:	f001 fb9d 	bl	80019d0 <HAL_ADC_ConfigChannel>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d001      	beq.n	800029e <ADC_init+0x72>
	{
	  Error_Handler();
 800029a:	f000 fe8f 	bl	8000fbc <Error_Handler>
	}

	  /** Configure Regular Channel
	  */
	sConfig.Channel = ADC_CHANNEL_2;
 800029e:	003b      	movs	r3, r7
 80002a0:	4a14      	ldr	r2, [pc, #80]	; (80002f4 <ADC_init+0xc8>)
 80002a2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80002a4:	003b      	movs	r3, r7
 80002a6:	2208      	movs	r2, #8
 80002a8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002aa:	003a      	movs	r2, r7
 80002ac:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <ADC_init+0xc0>)
 80002ae:	0011      	movs	r1, r2
 80002b0:	0018      	movs	r0, r3
 80002b2:	f001 fb8d 	bl	80019d0 <HAL_ADC_ConfigChannel>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d001      	beq.n	80002be <ADC_init+0x92>
	{
	  Error_Handler();
 80002ba:	f000 fe7f 	bl	8000fbc <Error_Handler>
	}

	  /** Configure Regular Channel
	  */
	sConfig.Channel = ADC_CHANNEL_3;
 80002be:	003b      	movs	r3, r7
 80002c0:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <ADC_init+0xcc>)
 80002c2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80002c4:	003b      	movs	r3, r7
 80002c6:	220c      	movs	r2, #12
 80002c8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ca:	003a      	movs	r2, r7
 80002cc:	4b07      	ldr	r3, [pc, #28]	; (80002ec <ADC_init+0xc0>)
 80002ce:	0011      	movs	r1, r2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 fb7d 	bl	80019d0 <HAL_ADC_ConfigChannel>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <ADC_init+0xb2>
	{
	  Error_Handler();
 80002da:	f000 fe6f 	bl	8000fbc <Error_Handler>
	}
	return success;
 80002de:	230f      	movs	r3, #15
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	781b      	ldrb	r3, [r3, #0]
}
 80002e4:	0018      	movs	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b004      	add	sp, #16
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000000 	.word	0x20000000
 80002f0:	04000002 	.word	0x04000002
 80002f4:	08000004 	.word	0x08000004
 80002f8:	0c000008 	.word	0x0c000008

080002fc <GPIO_init>:
 */


#include "HAL/gpio.h"

bool GPIO_init(){
 80002fc:	b5b0      	push	{r4, r5, r7, lr}
 80002fe:	b08a      	sub	sp, #40	; 0x28
 8000300:	af00      	add	r7, sp, #0
	bool succes = 1;
 8000302:	2527      	movs	r5, #39	; 0x27
 8000304:	197b      	adds	r3, r7, r5
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	2410      	movs	r4, #16
 800030c:	193b      	adds	r3, r7, r4
 800030e:	0018      	movs	r0, r3
 8000310:	2314      	movs	r3, #20
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f005 f9cc 	bl	80056b2 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031a:	4b4c      	ldr	r3, [pc, #304]	; (800044c <GPIO_init+0x150>)
 800031c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800031e:	4b4b      	ldr	r3, [pc, #300]	; (800044c <GPIO_init+0x150>)
 8000320:	2101      	movs	r1, #1
 8000322:	430a      	orrs	r2, r1
 8000324:	635a      	str	r2, [r3, #52]	; 0x34
 8000326:	4b49      	ldr	r3, [pc, #292]	; (800044c <GPIO_init+0x150>)
 8000328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800032a:	2201      	movs	r2, #1
 800032c:	4013      	ands	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000332:	4b46      	ldr	r3, [pc, #280]	; (800044c <GPIO_init+0x150>)
 8000334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000336:	4b45      	ldr	r3, [pc, #276]	; (800044c <GPIO_init+0x150>)
 8000338:	2102      	movs	r1, #2
 800033a:	430a      	orrs	r2, r1
 800033c:	635a      	str	r2, [r3, #52]	; 0x34
 800033e:	4b43      	ldr	r3, [pc, #268]	; (800044c <GPIO_init+0x150>)
 8000340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000342:	2202      	movs	r2, #2
 8000344:	4013      	ands	r3, r2
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034a:	4b40      	ldr	r3, [pc, #256]	; (800044c <GPIO_init+0x150>)
 800034c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800034e:	4b3f      	ldr	r3, [pc, #252]	; (800044c <GPIO_init+0x150>)
 8000350:	2104      	movs	r1, #4
 8000352:	430a      	orrs	r2, r1
 8000354:	635a      	str	r2, [r3, #52]	; 0x34
 8000356:	4b3d      	ldr	r3, [pc, #244]	; (800044c <GPIO_init+0x150>)
 8000358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035a:	2204      	movs	r2, #4
 800035c:	4013      	ands	r3, r2
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000362:	4b3a      	ldr	r3, [pc, #232]	; (800044c <GPIO_init+0x150>)
 8000364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000366:	4b39      	ldr	r3, [pc, #228]	; (800044c <GPIO_init+0x150>)
 8000368:	2108      	movs	r1, #8
 800036a:	430a      	orrs	r2, r1
 800036c:	635a      	str	r2, [r3, #52]	; 0x34
 800036e:	4b37      	ldr	r3, [pc, #220]	; (800044c <GPIO_init+0x150>)
 8000370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000372:	2208      	movs	r2, #8
 8000374:	4013      	ands	r3, r2
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, GPIO_PIN_RESET);
 800037a:	2380      	movs	r3, #128	; 0x80
 800037c:	021b      	lsls	r3, r3, #8
 800037e:	4834      	ldr	r0, [pc, #208]	; (8000450 <GPIO_init+0x154>)
 8000380:	2200      	movs	r2, #0
 8000382:	0019      	movs	r1, r3
 8000384:	f002 f996 	bl	80026b4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, RELAY1_Pin|SOLENOID2_Pin, GPIO_PIN_RESET);
 8000388:	23c0      	movs	r3, #192	; 0xc0
 800038a:	0099      	lsls	r1, r3, #2
 800038c:	23a0      	movs	r3, #160	; 0xa0
 800038e:	05db      	lsls	r3, r3, #23
 8000390:	2200      	movs	r2, #0
 8000392:	0018      	movs	r0, r3
 8000394:	f002 f98e 	bl	80026b4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SOLENOID1_GPIO_Port, SOLENOID1_Pin, GPIO_PIN_RESET);
 8000398:	4b2e      	ldr	r3, [pc, #184]	; (8000454 <GPIO_init+0x158>)
 800039a:	2200      	movs	r2, #0
 800039c:	2140      	movs	r1, #64	; 0x40
 800039e:	0018      	movs	r0, r3
 80003a0:	f002 f988 	bl	80026b4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : FLOW2_Pin FLOW1_Pin */
	  GPIO_InitStruct.Pin = FLOW2_Pin|FLOW1_Pin;
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	22c0      	movs	r2, #192	; 0xc0
 80003a8:	01d2      	lsls	r2, r2, #7
 80003aa:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	2200      	movs	r2, #0
 80003b0:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	193b      	adds	r3, r7, r4
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	4a25      	ldr	r2, [pc, #148]	; (8000450 <GPIO_init+0x154>)
 80003bc:	0019      	movs	r1, r3
 80003be:	0010      	movs	r0, r2
 80003c0:	f002 f814 	bl	80023ec <HAL_GPIO_Init>

	  /*Configure GPIO pin : RELAY2_Pin */
	  GPIO_InitStruct.Pin = RELAY2_Pin;
 80003c4:	0021      	movs	r1, r4
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2280      	movs	r2, #128	; 0x80
 80003ca:	0212      	lsls	r2, r2, #8
 80003cc:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ce:	000c      	movs	r4, r1
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	2201      	movs	r2, #1
 80003d4:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	2202      	movs	r2, #2
 80003da:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(RELAY2_GPIO_Port, &GPIO_InitStruct);
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	4a1a      	ldr	r2, [pc, #104]	; (8000450 <GPIO_init+0x154>)
 80003e6:	0019      	movs	r1, r3
 80003e8:	0010      	movs	r0, r2
 80003ea:	f001 ffff 	bl	80023ec <HAL_GPIO_Init>

	  /*Configure GPIO pins : RELAY1_Pin SOLENOID2_Pin */
	  GPIO_InitStruct.Pin = RELAY1_Pin|SOLENOID2_Pin;
 80003ee:	0021      	movs	r1, r4
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	22c0      	movs	r2, #192	; 0xc0
 80003f4:	0092      	lsls	r2, r2, #2
 80003f6:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	000c      	movs	r4, r1
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	2201      	movs	r2, #1
 80003fe:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000400:	193b      	adds	r3, r7, r4
 8000402:	2202      	movs	r2, #2
 8000404:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	193b      	adds	r3, r7, r4
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	193a      	adds	r2, r7, r4
 800040e:	23a0      	movs	r3, #160	; 0xa0
 8000410:	05db      	lsls	r3, r3, #23
 8000412:	0011      	movs	r1, r2
 8000414:	0018      	movs	r0, r3
 8000416:	f001 ffe9 	bl	80023ec <HAL_GPIO_Init>

	  /*Configure GPIO pin : SOLENOID1_Pin */
	  GPIO_InitStruct.Pin = SOLENOID1_Pin;
 800041a:	0021      	movs	r1, r4
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2240      	movs	r2, #64	; 0x40
 8000420:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2201      	movs	r2, #1
 8000426:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2202      	movs	r2, #2
 800042c:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(SOLENOID1_GPIO_Port, &GPIO_InitStruct);
 8000434:	187b      	adds	r3, r7, r1
 8000436:	4a07      	ldr	r2, [pc, #28]	; (8000454 <GPIO_init+0x158>)
 8000438:	0019      	movs	r1, r3
 800043a:	0010      	movs	r0, r2
 800043c:	f001 ffd6 	bl	80023ec <HAL_GPIO_Init>

	  return succes;
 8000440:	197b      	adds	r3, r7, r5
 8000442:	781b      	ldrb	r3, [r3, #0]
}
 8000444:	0018      	movs	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	b00a      	add	sp, #40	; 0x28
 800044a:	bdb0      	pop	{r4, r5, r7, pc}
 800044c:	40021000 	.word	0x40021000
 8000450:	50000400 	.word	0x50000400
 8000454:	50000800 	.word	0x50000800

08000458 <TIM_init>:
				  .ClockDivision = TIM_CLOCKDIVISION_DIV1,
				  .AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE,
		  }
};

bool TIM_init(){
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045e:	2310      	movs	r3, #16
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	0018      	movs	r0, r3
 8000464:	2310      	movs	r3, #16
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f005 f922 	bl	80056b2 <memset>
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	0018      	movs	r0, r3
 8000472:	230c      	movs	r3, #12
 8000474:	001a      	movs	r2, r3
 8000476:	2100      	movs	r1, #0
 8000478:	f005 f91b 	bl	80056b2 <memset>

		if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800047c:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <TIM_init+0x8c>)
 800047e:	0018      	movs	r0, r3
 8000480:	f002 fe3c 	bl	80030fc <HAL_TIM_Base_Init>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <TIM_init+0x34>
		{
			Error_Handler();
 8000488:	f000 fd98 	bl	8000fbc <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800048c:	2110      	movs	r1, #16
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2280      	movs	r2, #128	; 0x80
 8000492:	0152      	lsls	r2, r2, #5
 8000494:	601a      	str	r2, [r3, #0]
		if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000496:	187a      	adds	r2, r7, r1
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <TIM_init+0x8c>)
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f003 f80d 	bl	80034bc <HAL_TIM_ConfigClockSource>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <TIM_init+0x52>
		{
			Error_Handler();
 80004a6:	f000 fd89 	bl	8000fbc <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004b6:	1d3a      	adds	r2, r7, #4
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <TIM_init+0x8c>)
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f003 fa05 	bl	80038cc <HAL_TIMEx_MasterConfigSynchronization>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <TIM_init+0x72>
		{
			Error_Handler();
 80004c6:	f000 fd79 	bl	8000fbc <Error_Handler>
		}
		if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <TIM_init+0x8c>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f002 fe6d 	bl	80031ac <HAL_TIM_Base_Start_IT>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <TIM_init+0x82>
		{
			Error_Handler();
 80004d6:	f000 fd71 	bl	8000fbc <Error_Handler>
		}
		return true;
 80004da:	2301      	movs	r3, #1
}
 80004dc:	0018      	movs	r0, r3
 80004de:	46bd      	mov	sp, r7
 80004e0:	b008      	add	sp, #32
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000064 	.word	0x20000064

080004e8 <setTimer>:


void setTimer(int index, int duration){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <setTimer+0x28>)
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	0092      	lsls	r2, r2, #2
 80004f8:	6839      	ldr	r1, [r7, #0]
 80004fa:	50d1      	str	r1, [r2, r3]
	timer_flag[index] = 0;
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <setTimer+0x2c>)
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	0092      	lsls	r2, r2, #2
 8000502:	2100      	movs	r1, #0
 8000504:	50d1      	str	r1, [r2, r3]
};
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	20000418 	.word	0x20000418
 8000514:	20000440 	.word	0x20000440

08000518 <isTimer_timeout>:

int isTimer_timeout(int index){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]){
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <isTimer_timeout+0x2c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	58d3      	ldr	r3, [r2, r3]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d006      	beq.n	800053a <isTimer_timeout+0x22>
		timer_flag[index] = 0;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <isTimer_timeout+0x2c>)
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	0092      	lsls	r2, r2, #2
 8000532:	2100      	movs	r1, #0
 8000534:	50d1      	str	r1, [r2, r3]
		return 1;
 8000536:	2301      	movs	r3, #1
 8000538:	e000      	b.n	800053c <isTimer_timeout+0x24>
	}
	return 0;
 800053a:	2300      	movs	r3, #0
}
 800053c:	0018      	movs	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	b002      	add	sp, #8
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000440 	.word	0x20000440

08000548 <timerRun>:

void timerRun(){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_TIMER ; i++)
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	e01c      	b.n	800058e <timerRun+0x46>
	{
		if(timer_counter[i] > 0){
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <timerRun+0x58>)
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	0092      	lsls	r2, r2, #2
 800055a:	58d3      	ldr	r3, [r2, r3]
 800055c:	2b00      	cmp	r3, #0
 800055e:	dd13      	ble.n	8000588 <timerRun+0x40>
			timer_counter[i] -- ;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <timerRun+0x58>)
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	0092      	lsls	r2, r2, #2
 8000566:	58d3      	ldr	r3, [r2, r3]
 8000568:	1e59      	subs	r1, r3, #1
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <timerRun+0x58>)
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	0092      	lsls	r2, r2, #2
 8000570:	50d1      	str	r1, [r2, r3]
			if(timer_counter [i] == 0){
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <timerRun+0x58>)
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	0092      	lsls	r2, r2, #2
 8000578:	58d3      	ldr	r3, [r2, r3]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d104      	bne.n	8000588 <timerRun+0x40>
				timer_flag[i] = 1;
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <timerRun+0x5c>)
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	0092      	lsls	r2, r2, #2
 8000584:	2101      	movs	r1, #1
 8000586:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < MAX_TIMER ; i++)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b09      	cmp	r3, #9
 8000592:	dddf      	ble.n	8000554 <timerRun+0xc>
			}
		}
	}
};
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	20000418 	.word	0x20000418
 80005a4:	20000440 	.word	0x20000440

080005a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance){
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d103      	bne.n	80005c4 <HAL_TIM_PeriodElapsedCallback+0x1c>
//		for (int fn_idx = 0; fn_idx < fn_table_len; ++fn_idx) {
//			fn_table[fn_idx]();
//		}
		timerRun();
 80005bc:	f7ff ffc4 	bl	8000548 <timerRun>
		SCH_Update();
 80005c0:	f000 fd02 	bl	8000fc8 <SCH_Update>
	}
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b002      	add	sp, #8
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000064 	.word	0x20000064

080005d0 <UART_init>:
			.huart_p = &huart4,
			.buffer = &uart_buffer[UART_4]
		},
};

bool UART_init(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	bool success = true;
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
	// Init hal
	success = (HAL_UART_Init(&huart1) == HAL_OK) && success;
 80005dc:	4b60      	ldr	r3, [pc, #384]	; (8000760 <UART_init+0x190>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f003 f9f4 	bl	80039cc <HAL_UART_Init>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d105      	bne.n	80005f4 <UART_init+0x24>
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <UART_init+0x24>
 80005f0:	2201      	movs	r2, #1
 80005f2:	e000      	b.n	80005f6 <UART_init+0x26>
 80005f4:	2200      	movs	r2, #0
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	2101      	movs	r1, #1
 80005fe:	400a      	ands	r2, r1
 8000600:	701a      	strb	r2, [r3, #0]
	success = (HAL_UART_Init(&huart2) == HAL_OK) && success;
 8000602:	4b58      	ldr	r3, [pc, #352]	; (8000764 <UART_init+0x194>)
 8000604:	0018      	movs	r0, r3
 8000606:	f003 f9e1 	bl	80039cc <HAL_UART_Init>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d105      	bne.n	800061a <UART_init+0x4a>
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <UART_init+0x4a>
 8000616:	2201      	movs	r2, #1
 8000618:	e000      	b.n	800061c <UART_init+0x4c>
 800061a:	2200      	movs	r2, #0
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	781a      	ldrb	r2, [r3, #0]
 8000622:	2101      	movs	r1, #1
 8000624:	400a      	ands	r2, r1
 8000626:	701a      	strb	r2, [r3, #0]
	success = (HAL_UART_Init(&huart3) == HAL_OK) && success;
 8000628:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <UART_init+0x198>)
 800062a:	0018      	movs	r0, r3
 800062c:	f003 f9ce 	bl	80039cc <HAL_UART_Init>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d105      	bne.n	8000640 <UART_init+0x70>
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <UART_init+0x70>
 800063c:	2201      	movs	r2, #1
 800063e:	e000      	b.n	8000642 <UART_init+0x72>
 8000640:	2200      	movs	r2, #0
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	2101      	movs	r1, #1
 800064a:	400a      	ands	r2, r1
 800064c:	701a      	strb	r2, [r3, #0]
	success = (HAL_UART_Init(&huart4) == HAL_OK) && success;
 800064e:	4b47      	ldr	r3, [pc, #284]	; (800076c <UART_init+0x19c>)
 8000650:	0018      	movs	r0, r3
 8000652:	f003 f9bb 	bl	80039cc <HAL_UART_Init>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d105      	bne.n	8000666 <UART_init+0x96>
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <UART_init+0x96>
 8000662:	2201      	movs	r2, #1
 8000664:	e000      	b.n	8000668 <UART_init+0x98>
 8000666:	2200      	movs	r2, #0
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	2101      	movs	r1, #1
 8000670:	400a      	ands	r2, r1
 8000672:	701a      	strb	r2, [r3, #0]
	// Init buffer
	success = ring_buffer_init(uart_table[UART_1].buffer, sizeof(uint8_t)) && success;
 8000674:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <UART_init+0x1a0>)
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	2101      	movs	r1, #1
 800067a:	0018      	movs	r0, r3
 800067c:	f000 f940 	bl	8000900 <ring_buffer_init>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d005      	beq.n	8000690 <UART_init+0xc0>
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <UART_init+0xc0>
 800068c:	2201      	movs	r2, #1
 800068e:	e000      	b.n	8000692 <UART_init+0xc2>
 8000690:	2200      	movs	r2, #0
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	400a      	ands	r2, r1
 800069c:	701a      	strb	r2, [r3, #0]
	success = ring_buffer_init(uart_table[UART_2].buffer, sizeof(uint16_t)) && success;
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <UART_init+0x1a0>)
 80006a0:	691b      	ldr	r3, [r3, #16]
 80006a2:	2102      	movs	r1, #2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 f92b 	bl	8000900 <ring_buffer_init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d005      	beq.n	80006ba <UART_init+0xea>
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <UART_init+0xea>
 80006b6:	2201      	movs	r2, #1
 80006b8:	e000      	b.n	80006bc <UART_init+0xec>
 80006ba:	2200      	movs	r2, #0
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	2101      	movs	r1, #1
 80006c4:	400a      	ands	r2, r1
 80006c6:	701a      	strb	r2, [r3, #0]
	success = ring_buffer_init(uart_table[UART_3].buffer, sizeof(uint8_t)) && success;
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <UART_init+0x1a0>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	2101      	movs	r1, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 f916 	bl	8000900 <ring_buffer_init>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d005      	beq.n	80006e4 <UART_init+0x114>
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <UART_init+0x114>
 80006e0:	2201      	movs	r2, #1
 80006e2:	e000      	b.n	80006e6 <UART_init+0x116>
 80006e4:	2200      	movs	r2, #0
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	781a      	ldrb	r2, [r3, #0]
 80006ec:	2101      	movs	r1, #1
 80006ee:	400a      	ands	r2, r1
 80006f0:	701a      	strb	r2, [r3, #0]
	success = ring_buffer_init(uart_table[UART_4].buffer, sizeof(uint8_t)) && success;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <UART_init+0x1a0>)
 80006f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f6:	2101      	movs	r1, #1
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 f901 	bl	8000900 <ring_buffer_init>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d005      	beq.n	800070e <UART_init+0x13e>
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <UART_init+0x13e>
 800070a:	2201      	movs	r2, #1
 800070c:	e000      	b.n	8000710 <UART_init+0x140>
 800070e:	2200      	movs	r2, #0
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	781a      	ldrb	r2, [r3, #0]
 8000716:	2101      	movs	r1, #1
 8000718:	400a      	ands	r2, r1
 800071a:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(uart_table[UART_1].huart_p, &uart_table[UART_1].temp_data, 1);
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <UART_init+0x1a0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4914      	ldr	r1, [pc, #80]	; (8000774 <UART_init+0x1a4>)
 8000722:	2201      	movs	r2, #1
 8000724:	0018      	movs	r0, r3
 8000726:	f003 fa43 	bl	8003bb0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uart_table[UART_2].huart_p, &uart_table[UART_2].temp_data, 1);
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <UART_init+0x1a0>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	4912      	ldr	r1, [pc, #72]	; (8000778 <UART_init+0x1a8>)
 8000730:	2201      	movs	r2, #1
 8000732:	0018      	movs	r0, r3
 8000734:	f003 fa3c 	bl	8003bb0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uart_table[UART_3].huart_p, &uart_table[UART_3].temp_data, 1);
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <UART_init+0x1a0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	490f      	ldr	r1, [pc, #60]	; (800077c <UART_init+0x1ac>)
 800073e:	2201      	movs	r2, #1
 8000740:	0018      	movs	r0, r3
 8000742:	f003 fa35 	bl	8003bb0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uart_table[UART_4].huart_p, &uart_table[UART_4].temp_data, 1);
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <UART_init+0x1a0>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	490d      	ldr	r1, [pc, #52]	; (8000780 <UART_init+0x1b0>)
 800074c:	2201      	movs	r2, #1
 800074e:	0018      	movs	r0, r3
 8000750:	f003 fa2e 	bl	8003bb0 <HAL_UART_Receive_IT>
	return success;
 8000754:	1dfb      	adds	r3, r7, #7
 8000756:	781b      	ldrb	r3, [r3, #0]
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000b0 	.word	0x200000b0
 8000764:	20000144 	.word	0x20000144
 8000768:	200001d8 	.word	0x200001d8
 800076c:	2000026c 	.word	0x2000026c
 8000770:	20000300 	.word	0x20000300
 8000774:	20000308 	.word	0x20000308
 8000778:	20000314 	.word	0x20000314
 800077c:	20000320 	.word	0x20000320
 8000780:	2000032c 	.word	0x2000032c

08000784 <UART_send>:

bool UART_send(UART_id_t id, uint8_t *data , size_t len){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	210f      	movs	r1, #15
 8000790:	187b      	adds	r3, r7, r1
 8000792:	1c02      	adds	r2, r0, #0
 8000794:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(uart_table[id].huart_p, data, len, 0xFFFF);
 8000796:	187b      	adds	r3, r7, r1
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	4908      	ldr	r1, [pc, #32]	; (80007bc <UART_send+0x38>)
 800079c:	0013      	movs	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	189b      	adds	r3, r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	5858      	ldr	r0, [r3, r1]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <UART_send+0x3c>)
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	f003 f963 	bl	8003a78 <HAL_UART_Transmit>
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b004      	add	sp, #16
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000300 	.word	0x20000300
 80007c0:	0000ffff 	.word	0x0000ffff

080007c4 <UART_receive_data>:
bool UART_receive_available(UART_id_t id){
	return ring_buffer_is_available(uart_table[id].buffer);
}

uint8_t UART_receive_data(UART_id_t id){
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	0002      	movs	r2, r0
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	ring_buffer_pop(uart_table[id].buffer, &data);
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781a      	ldrb	r2, [r3, #0]
 80007d4:	4909      	ldr	r1, [pc, #36]	; (80007fc <UART_receive_data+0x38>)
 80007d6:	0013      	movs	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	189b      	adds	r3, r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	18cb      	adds	r3, r1, r3
 80007e0:	3304      	adds	r3, #4
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	240f      	movs	r4, #15
 80007e6:	193a      	adds	r2, r7, r4
 80007e8:	0011      	movs	r1, r2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 f8ec 	bl	80009c8 <ring_buffer_pop>
	return data;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	781b      	ldrb	r3, [r3, #0]
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b005      	add	sp, #20
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	20000300 	.word	0x20000300

08000800 <HAL_UART_RxCpltCallback>:

void UART_clear_buffer(UART_id_t id){
	ring_buffer_drop_all(uart_table[id].buffer);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart_table[UART_1].huart_p->Instance){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d113      	bne.n	800083e <HAL_UART_RxCpltCallback+0x3e>
		ring_buffer_push(uart_table[UART_1].buffer, &uart_table[UART_1].temp_data);
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	4a34      	ldr	r2, [pc, #208]	; (80008ec <HAL_UART_RxCpltCallback+0xec>)
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f000 f89a 	bl	8000958 <ring_buffer_push>
		HAL_UART_Receive_IT(uart_table[UART_1].huart_p, &uart_table[UART_1].temp_data, 1);
 8000824:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4930      	ldr	r1, [pc, #192]	; (80008ec <HAL_UART_RxCpltCallback+0xec>)
 800082a:	2201      	movs	r2, #1
 800082c:	0018      	movs	r0, r3
 800082e:	f003 f9bf 	bl	8003bb0 <HAL_UART_Receive_IT>
		flag_uart[UART_1] ++;
 8000832:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <HAL_UART_RxCpltCallback+0xf0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <HAL_UART_RxCpltCallback+0xf0>)
 800083a:	601a      	str	r2, [r3, #0]
	}else if(huart->Instance == uart_table[UART_4].huart_p->Instance){
		ring_buffer_push(uart_table[UART_4].buffer, &uart_table[UART_4].temp_data);
		HAL_UART_Receive_IT(uart_table[UART_4].huart_p, &uart_table[UART_4].temp_data, 1);
		flag_uart[UART_4] ++;
	}
}
 800083c:	e04f      	b.n	80008de <HAL_UART_RxCpltCallback+0xde>
	}else if(huart->Instance == uart_table[UART_2].huart_p->Instance){
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	d113      	bne.n	8000874 <HAL_UART_RxCpltCallback+0x74>
		ring_buffer_push(uart_table[UART_2].buffer, &uart_table[UART_2].temp_data);
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 800084e:	691b      	ldr	r3, [r3, #16]
 8000850:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <HAL_UART_RxCpltCallback+0xf4>)
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f000 f87f 	bl	8000958 <ring_buffer_push>
		HAL_UART_Receive_IT(uart_table[UART_2].huart_p, &uart_table[UART_2].temp_data, 1);
 800085a:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	4925      	ldr	r1, [pc, #148]	; (80008f4 <HAL_UART_RxCpltCallback+0xf4>)
 8000860:	2201      	movs	r2, #1
 8000862:	0018      	movs	r0, r3
 8000864:	f003 f9a4 	bl	8003bb0 <HAL_UART_Receive_IT>
		flag_uart[UART_2] ++;
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <HAL_UART_RxCpltCallback+0xf0>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <HAL_UART_RxCpltCallback+0xf0>)
 8000870:	605a      	str	r2, [r3, #4]
}
 8000872:	e034      	b.n	80008de <HAL_UART_RxCpltCallback+0xde>
	}else if(huart->Instance == uart_table[UART_3].huart_p->Instance){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	d113      	bne.n	80008aa <HAL_UART_RxCpltCallback+0xaa>
		ring_buffer_push(uart_table[UART_3].buffer, &uart_table[UART_3].temp_data);
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <HAL_UART_RxCpltCallback+0xf8>)
 8000888:	0011      	movs	r1, r2
 800088a:	0018      	movs	r0, r3
 800088c:	f000 f864 	bl	8000958 <ring_buffer_push>
		HAL_UART_Receive_IT(uart_table[UART_3].huart_p, &uart_table[UART_3].temp_data, 1);
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4918      	ldr	r1, [pc, #96]	; (80008f8 <HAL_UART_RxCpltCallback+0xf8>)
 8000896:	2201      	movs	r2, #1
 8000898:	0018      	movs	r0, r3
 800089a:	f003 f989 	bl	8003bb0 <HAL_UART_Receive_IT>
		flag_uart[UART_3] ++;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_UART_RxCpltCallback+0xf0>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_UART_RxCpltCallback+0xf0>)
 80008a6:	609a      	str	r2, [r3, #8]
}
 80008a8:	e019      	b.n	80008de <HAL_UART_RxCpltCallback+0xde>
	}else if(huart->Instance == uart_table[UART_4].huart_p->Instance){
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 80008b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d112      	bne.n	80008de <HAL_UART_RxCpltCallback+0xde>
		ring_buffer_push(uart_table[UART_4].buffer, &uart_table[UART_4].temp_data);
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 80008ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008bc:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_UART_RxCpltCallback+0xfc>)
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 f849 	bl	8000958 <ring_buffer_push>
		HAL_UART_Receive_IT(uart_table[UART_4].huart_p, &uart_table[UART_4].temp_data, 1);
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_UART_RxCpltCallback+0xe8>)
 80008c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ca:	490c      	ldr	r1, [pc, #48]	; (80008fc <HAL_UART_RxCpltCallback+0xfc>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	0018      	movs	r0, r3
 80008d0:	f003 f96e 	bl	8003bb0 <HAL_UART_Receive_IT>
		flag_uart[UART_4] ++;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_UART_RxCpltCallback+0xf0>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_UART_RxCpltCallback+0xf0>)
 80008dc:	60da      	str	r2, [r3, #12]
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	20000300 	.word	0x20000300
 80008ec:	20000308 	.word	0x20000308
 80008f0:	20000468 	.word	0x20000468
 80008f4:	20000314 	.word	0x20000314
 80008f8:	20000320 	.word	0x20000320
 80008fc:	2000032c 	.word	0x2000032c

08000900 <ring_buffer_init>:

#include "string.h"


bool ring_buffer_init(ring_buffer_t * buffer, uint16_t sizeOfObject)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	000a      	movs	r2, r1
 800090a:	1cbb      	adds	r3, r7, #2
 800090c:	801a      	strh	r2, [r3, #0]
    buffer->head = 0;
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	2100      	movs	r1, #0
 8000916:	50d1      	str	r1, [r2, r3]
    buffer->tail = 0;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a0c      	ldr	r2, [pc, #48]	; (800094c <ring_buffer_init+0x4c>)
 800091c:	2100      	movs	r1, #0
 800091e:	5099      	str	r1, [r3, r2]
    buffer->count = 0;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <ring_buffer_init+0x50>)
 8000924:	2100      	movs	r1, #0
 8000926:	5099      	str	r1, [r3, r2]
    buffer->size = sizeOfObject;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	1cba      	adds	r2, r7, #2
 800092c:	4909      	ldr	r1, [pc, #36]	; (8000954 <ring_buffer_init+0x54>)
 800092e:	8812      	ldrh	r2, [r2, #0]
 8000930:	525a      	strh	r2, [r3, r1]
    memset(buffer->buffer , 0, sizeof(buffer->buffer));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2280      	movs	r2, #128	; 0x80
 8000936:	0112      	lsls	r2, r2, #4
 8000938:	2100      	movs	r1, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f004 feb9 	bl	80056b2 <memset>
    return true;
 8000940:	2301      	movs	r3, #1
}
 8000942:	0018      	movs	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	00000804 	.word	0x00000804
 8000950:	00000808 	.word	0x00000808
 8000954:	0000080c 	.word	0x0000080c

08000958 <ring_buffer_push>:

bool ring_buffer_push(ring_buffer_t * buffer, void * object)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	uint8_t *data = (uint8_t *)(object);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	60bb      	str	r3, [r7, #8]

	if(ring_buffer_is_full(buffer)){
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	0018      	movs	r0, r3
 800096a:	f000 f8a3 	bl	8000ab4 <ring_buffer_is_full>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <ring_buffer_push+0x1e>
			return false;
 8000972:	2300      	movs	r3, #0
 8000974:	e022      	b.n	80009bc <ring_buffer_push+0x64>
	}

	for(size_t index = 0; index < buffer -> size; index++)
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e017      	b.n	80009ac <ring_buffer_push+0x54>
	{
		buffer->buffer[buffer->head] = data[index];
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	18d2      	adds	r2, r2, r3
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	011b      	lsls	r3, r3, #4
 8000988:	58cb      	ldr	r3, [r1, r3]
 800098a:	7811      	ldrb	r1, [r2, #0]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	54d1      	strb	r1, [r2, r3]
		buffer->head = (buffer->head + 1) % BUFFER_MAX_SIZE;
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	58d3      	ldr	r3, [r2, r3]
 8000998:	3301      	adds	r3, #1
 800099a:	055b      	lsls	r3, r3, #21
 800099c:	0d59      	lsrs	r1, r3, #21
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	50d1      	str	r1, [r2, r3]
	for(size_t index = 0; index < buffer -> size; index++)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	3301      	adds	r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <ring_buffer_push+0x6c>)
 80009b0:	5a9b      	ldrh	r3, [r3, r2]
 80009b2:	001a      	movs	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d3e0      	bcc.n	800097c <ring_buffer_push+0x24>
	}
	return true;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	b004      	add	sp, #16
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	0000080c 	.word	0x0000080c

080009c8 <ring_buffer_pop>:

bool ring_buffer_pop(ring_buffer_t  * buffer, void *object)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	uint8_t *data = (uint8_t *)(object);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	60bb      	str	r3, [r7, #8]

	if(!ring_buffer_is_available(buffer)){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 f831 	bl	8000a40 <ring_buffer_is_available>
 80009de:	0003      	movs	r3, r0
 80009e0:	001a      	movs	r2, r3
 80009e2:	2301      	movs	r3, #1
 80009e4:	4053      	eors	r3, r2
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <ring_buffer_pop+0x28>
			return false;
 80009ec:	2300      	movs	r3, #0
 80009ee:	e01f      	b.n	8000a30 <ring_buffer_pop+0x68>
	}

	for(size_t index = 0; index < buffer -> size; index++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e014      	b.n	8000a20 <ring_buffer_pop+0x58>
	{
		data[index] = buffer->buffer[buffer->tail];
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <ring_buffer_pop+0x70>)
 80009fa:	589a      	ldr	r2, [r3, r2]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	18cb      	adds	r3, r1, r3
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	5c8a      	ldrb	r2, [r1, r2]
 8000a06:	701a      	strb	r2, [r3, #0]
		buffer->tail = (buffer->tail + 1) % BUFFER_MAX_SIZE;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <ring_buffer_pop+0x70>)
 8000a0c:	589b      	ldr	r3, [r3, r2]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	055b      	lsls	r3, r3, #21
 8000a12:	0d5a      	lsrs	r2, r3, #21
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <ring_buffer_pop+0x70>)
 8000a18:	505a      	str	r2, [r3, r1]
	for(size_t index = 0; index < buffer -> size; index++)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <ring_buffer_pop+0x74>)
 8000a24:	5a9b      	ldrh	r3, [r3, r2]
 8000a26:	001a      	movs	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d3e3      	bcc.n	80009f6 <ring_buffer_pop+0x2e>
	}
	return true;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b004      	add	sp, #16
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	00000804 	.word	0x00000804
 8000a3c:	0000080c 	.word	0x0000080c

08000a40 <ring_buffer_is_available>:

bool ring_buffer_is_available(ring_buffer_t * buffer)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	if(buffer->head >= buffer->tail)
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	011b      	lsls	r3, r3, #4
 8000a4e:	58d2      	ldr	r2, [r2, r3]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4916      	ldr	r1, [pc, #88]	; (8000aac <ring_buffer_is_available+0x6c>)
 8000a54:	585b      	ldr	r3, [r3, r1]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d310      	bcc.n	8000a7c <ring_buffer_is_available+0x3c>
	{
		return ((buffer->head - buffer->tail) >= buffer->size);
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	58d2      	ldr	r2, [r2, r3]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4911      	ldr	r1, [pc, #68]	; (8000aac <ring_buffer_is_available+0x6c>)
 8000a66:	585b      	ldr	r3, [r3, r1]
 8000a68:	1ad2      	subs	r2, r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4910      	ldr	r1, [pc, #64]	; (8000ab0 <ring_buffer_is_available+0x70>)
 8000a6e:	5a5b      	ldrh	r3, [r3, r1]
 8000a70:	0019      	movs	r1, r3
 8000a72:	2300      	movs	r3, #0
 8000a74:	428a      	cmp	r2, r1
 8000a76:	415b      	adcs	r3, r3
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	e012      	b.n	8000aa2 <ring_buffer_is_available+0x62>
	}
	else
	{
		return (BUFFER_MAX_SIZE - (buffer->tail - buffer->head) >= buffer->size);
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	58d2      	ldr	r2, [r2, r3]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4909      	ldr	r1, [pc, #36]	; (8000aac <ring_buffer_is_available+0x6c>)
 8000a88:	585b      	ldr	r3, [r3, r1]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	189a      	adds	r2, r3, r2
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4906      	ldr	r1, [pc, #24]	; (8000ab0 <ring_buffer_is_available+0x70>)
 8000a96:	5a5b      	ldrh	r3, [r3, r1]
 8000a98:	0019      	movs	r1, r3
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	415b      	adcs	r3, r3
 8000aa0:	b2db      	uxtb	r3, r3
	}
}
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	00000804 	.word	0x00000804
 8000ab0:	0000080c 	.word	0x0000080c

08000ab4 <ring_buffer_is_full>:
	memcpy(object, buffer->buffer + idx*buffer->size, buffer->size);
	return true;
}

bool ring_buffer_is_full(ring_buffer_t * buffer)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(buffer->head >= buffer->tail)
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	58d2      	ldr	r2, [r2, r3]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4916      	ldr	r1, [pc, #88]	; (8000b20 <ring_buffer_is_full+0x6c>)
 8000ac8:	585b      	ldr	r3, [r3, r1]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d313      	bcc.n	8000af6 <ring_buffer_is_full+0x42>
	{
		return (BUFFER_MAX_SIZE - (buffer->head - buffer->tail) <= buffer->size);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <ring_buffer_is_full+0x6c>)
 8000ad2:	589a      	ldr	r2, [r3, r2]
 8000ad4:	6879      	ldr	r1, [r7, #4]
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	011b      	lsls	r3, r3, #4
 8000ada:	58cb      	ldr	r3, [r1, r3]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	189a      	adds	r2, r3, r2
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	490f      	ldr	r1, [pc, #60]	; (8000b24 <ring_buffer_is_full+0x70>)
 8000ae8:	5a5b      	ldrh	r3, [r3, r1]
 8000aea:	0019      	movs	r1, r3
 8000aec:	2300      	movs	r3, #0
 8000aee:	4291      	cmp	r1, r2
 8000af0:	415b      	adcs	r3, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	e00f      	b.n	8000b16 <ring_buffer_is_full+0x62>
	}
	else
	{
		return ((buffer->tail - buffer->head) <= buffer->size);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <ring_buffer_is_full+0x6c>)
 8000afa:	589a      	ldr	r2, [r3, r2]
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	58cb      	ldr	r3, [r1, r3]
 8000b04:	1ad2      	subs	r2, r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4906      	ldr	r1, [pc, #24]	; (8000b24 <ring_buffer_is_full+0x70>)
 8000b0a:	5a5b      	ldrh	r3, [r3, r1]
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	2300      	movs	r3, #0
 8000b10:	4291      	cmp	r1, r2
 8000b12:	415b      	adcs	r3, r3
 8000b14:	b2db      	uxtb	r3, r3
	}
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	00000804 	.word	0x00000804
 8000b24:	0000080c 	.word	0x0000080c

08000b28 <get_command>:
uint8_t STRING4[50];
uint8_t STRING5[50];
uint8_t MSG[35] = {'\0'};

void get_command()
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	if(flag_uart[UART_3] >= 1)
 8000b2c:	4ba2      	ldr	r3, [pc, #648]	; (8000db8 <get_command+0x290>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	dc00      	bgt.n	8000b36 <get_command+0xe>
 8000b34:	e13a      	b.n	8000dac <get_command+0x284>
	{
		flag_uart[UART_3] --;
 8000b36:	4ba0      	ldr	r3, [pc, #640]	; (8000db8 <get_command+0x290>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	1e5a      	subs	r2, r3, #1
 8000b3c:	4b9e      	ldr	r3, [pc, #632]	; (8000db8 <get_command+0x290>)
 8000b3e:	609a      	str	r2, [r3, #8]
		switch (state1)
 8000b40:	4b9e      	ldr	r3, [pc, #632]	; (8000dbc <get_command+0x294>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <get_command+0x26>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d011      	beq.n	8000b70 <get_command+0x48>
 8000b4c:	e127      	b.n	8000d9e <get_command+0x276>
		{
			case INIT:
				if(UART_receive_data(UART_3) == '!')
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f7ff fe38 	bl	80007c4 <UART_receive_data>
 8000b54:	0003      	movs	r3, r0
 8000b56:	2b21      	cmp	r3, #33	; 0x21
 8000b58:	d000      	beq.n	8000b5c <get_command+0x34>
 8000b5a:	e129      	b.n	8000db0 <get_command+0x288>
				{
					buffer[0] = '!';
 8000b5c:	4b98      	ldr	r3, [pc, #608]	; (8000dc0 <get_command+0x298>)
 8000b5e:	2221      	movs	r2, #33	; 0x21
 8000b60:	701a      	strb	r2, [r3, #0]
					count = 1;
 8000b62:	4b98      	ldr	r3, [pc, #608]	; (8000dc4 <get_command+0x29c>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
					state1 = GET;
 8000b68:	4b94      	ldr	r3, [pc, #592]	; (8000dbc <get_command+0x294>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
				}

				break;
 8000b6e:	e11f      	b.n	8000db0 <get_command+0x288>
			case GET:
				if(count >= 12){
 8000b70:	4b94      	ldr	r3, [pc, #592]	; (8000dc4 <get_command+0x29c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b0b      	cmp	r3, #11
 8000b76:	dd05      	ble.n	8000b84 <get_command+0x5c>
					count = 0;
 8000b78:	4b92      	ldr	r3, [pc, #584]	; (8000dc4 <get_command+0x29c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
					state1 = INIT;
 8000b7e:	4b8f      	ldr	r3, [pc, #572]	; (8000dbc <get_command+0x294>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
				}
				buffer[count] = UART_receive_data(UART_3);
 8000b84:	4b8f      	ldr	r3, [pc, #572]	; (8000dc4 <get_command+0x29c>)
 8000b86:	681c      	ldr	r4, [r3, #0]
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fe1b 	bl	80007c4 <UART_receive_data>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	001a      	movs	r2, r3
 8000b92:	4b8b      	ldr	r3, [pc, #556]	; (8000dc0 <get_command+0x298>)
 8000b94:	551a      	strb	r2, [r3, r4]

				if(buffer[count] == '#')
 8000b96:	4b8b      	ldr	r3, [pc, #556]	; (8000dc4 <get_command+0x29c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a89      	ldr	r2, [pc, #548]	; (8000dc0 <get_command+0x298>)
 8000b9c:	5cd3      	ldrb	r3, [r2, r3]
 8000b9e:	2b23      	cmp	r3, #35	; 0x23
 8000ba0:	d000      	beq.n	8000ba4 <get_command+0x7c>
 8000ba2:	e0ea      	b.n	8000d7a <get_command+0x252>
				{
					if(buffer[1] == 'E')
 8000ba4:	4b86      	ldr	r3, [pc, #536]	; (8000dc0 <get_command+0x298>)
 8000ba6:	785b      	ldrb	r3, [r3, #1]
 8000ba8:	2b45      	cmp	r3, #69	; 0x45
 8000baa:	d103      	bne.n	8000bb4 <get_command+0x8c>
					{
						state2 = 0;
 8000bac:	4b86      	ldr	r3, [pc, #536]	; (8000dc8 <get_command+0x2a0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	e0dc      	b.n	8000d6e <get_command+0x246>
					}
					else if(buffer[1] == 'S')
 8000bb4:	4b82      	ldr	r3, [pc, #520]	; (8000dc0 <get_command+0x298>)
 8000bb6:	785b      	ldrb	r3, [r3, #1]
 8000bb8:	2b53      	cmp	r3, #83	; 0x53
 8000bba:	d14e      	bne.n	8000c5a <get_command+0x132>
					{
						if(buffer[2] == '0'){
 8000bbc:	4b80      	ldr	r3, [pc, #512]	; (8000dc0 <get_command+0x298>)
 8000bbe:	789b      	ldrb	r3, [r3, #2]
 8000bc0:	2b30      	cmp	r3, #48	; 0x30
 8000bc2:	d10c      	bne.n	8000bde <get_command+0xb6>
							SOLENOID1_OPEN;
 8000bc4:	4b81      	ldr	r3, [pc, #516]	; (8000dcc <get_command+0x2a4>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2140      	movs	r1, #64	; 0x40
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f001 fd72 	bl	80026b4 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","SOLENOID 1 IS OPEN");
 8000bd0:	4a7f      	ldr	r2, [pc, #508]	; (8000dd0 <get_command+0x2a8>)
 8000bd2:	4980      	ldr	r1, [pc, #512]	; (8000dd4 <get_command+0x2ac>)
 8000bd4:	4b80      	ldr	r3, [pc, #512]	; (8000dd8 <get_command+0x2b0>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f004 fd74 	bl	80056c4 <siprintf>
 8000bdc:	e035      	b.n	8000c4a <get_command+0x122>
						}
						else if(buffer[2] == '1'){
 8000bde:	4b78      	ldr	r3, [pc, #480]	; (8000dc0 <get_command+0x298>)
 8000be0:	789b      	ldrb	r3, [r3, #2]
 8000be2:	2b31      	cmp	r3, #49	; 0x31
 8000be4:	d10e      	bne.n	8000c04 <get_command+0xdc>
							SOLENOID2_OPEN;
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	0099      	lsls	r1, r3, #2
 8000bea:	23a0      	movs	r3, #160	; 0xa0
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	2201      	movs	r2, #1
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f001 fd5f 	bl	80026b4 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","SOLENOID 2 IS OPEN");
 8000bf6:	4a79      	ldr	r2, [pc, #484]	; (8000ddc <get_command+0x2b4>)
 8000bf8:	4976      	ldr	r1, [pc, #472]	; (8000dd4 <get_command+0x2ac>)
 8000bfa:	4b77      	ldr	r3, [pc, #476]	; (8000dd8 <get_command+0x2b0>)
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f004 fd61 	bl	80056c4 <siprintf>
 8000c02:	e022      	b.n	8000c4a <get_command+0x122>
						}
						else if(buffer[2] == '2'){
 8000c04:	4b6e      	ldr	r3, [pc, #440]	; (8000dc0 <get_command+0x298>)
 8000c06:	789b      	ldrb	r3, [r3, #2]
 8000c08:	2b32      	cmp	r3, #50	; 0x32
 8000c0a:	d10c      	bne.n	8000c26 <get_command+0xfe>
							SOLENOID1_CLOSE;
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <get_command+0x2a4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	0018      	movs	r0, r3
 8000c14:	f001 fd4e 	bl	80026b4 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","SOLENOID 1 IS CLOSE");
 8000c18:	4a71      	ldr	r2, [pc, #452]	; (8000de0 <get_command+0x2b8>)
 8000c1a:	496e      	ldr	r1, [pc, #440]	; (8000dd4 <get_command+0x2ac>)
 8000c1c:	4b6e      	ldr	r3, [pc, #440]	; (8000dd8 <get_command+0x2b0>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f004 fd50 	bl	80056c4 <siprintf>
 8000c24:	e011      	b.n	8000c4a <get_command+0x122>
						}
						else if(buffer[2] == '3'){
 8000c26:	4b66      	ldr	r3, [pc, #408]	; (8000dc0 <get_command+0x298>)
 8000c28:	789b      	ldrb	r3, [r3, #2]
 8000c2a:	2b33      	cmp	r3, #51	; 0x33
 8000c2c:	d10d      	bne.n	8000c4a <get_command+0x122>
							SOLENOID2_CLOSE;
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	0099      	lsls	r1, r3, #2
 8000c32:	23a0      	movs	r3, #160	; 0xa0
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	2200      	movs	r2, #0
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f001 fd3b 	bl	80026b4 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","SOLENOID 2 IS CLOSE");
 8000c3e:	4a69      	ldr	r2, [pc, #420]	; (8000de4 <get_command+0x2bc>)
 8000c40:	4964      	ldr	r1, [pc, #400]	; (8000dd4 <get_command+0x2ac>)
 8000c42:	4b65      	ldr	r3, [pc, #404]	; (8000dd8 <get_command+0x2b0>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	f004 fd3d 	bl	80056c4 <siprintf>
						}
						state2 = 1;
 8000c4a:	4b5f      	ldr	r3, [pc, #380]	; (8000dc8 <get_command+0x2a0>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]
						setTimer(0, 100);
 8000c50:	2164      	movs	r1, #100	; 0x64
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fc48 	bl	80004e8 <setTimer>
 8000c58:	e089      	b.n	8000d6e <get_command+0x246>
					}
					else if(buffer[1] == 'R')
 8000c5a:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <get_command+0x298>)
 8000c5c:	785b      	ldrb	r3, [r3, #1]
 8000c5e:	2b52      	cmp	r3, #82	; 0x52
 8000c60:	d150      	bne.n	8000d04 <get_command+0x1dc>
					{
						if(buffer[2] == '0'){
 8000c62:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <get_command+0x298>)
 8000c64:	789b      	ldrb	r3, [r3, #2]
 8000c66:	2b30      	cmp	r3, #48	; 0x30
 8000c68:	d10e      	bne.n	8000c88 <get_command+0x160>
							RELAY1_ON;
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	0059      	lsls	r1, r3, #1
 8000c6e:	23a0      	movs	r3, #160	; 0xa0
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	2201      	movs	r2, #1
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 fd1d 	bl	80026b4 <HAL_GPIO_WritePin>
							sprintf(STRING2,"%s","RELAY 1 IS ON");
 8000c7a:	4a5b      	ldr	r2, [pc, #364]	; (8000de8 <get_command+0x2c0>)
 8000c7c:	4955      	ldr	r1, [pc, #340]	; (8000dd4 <get_command+0x2ac>)
 8000c7e:	4b5b      	ldr	r3, [pc, #364]	; (8000dec <get_command+0x2c4>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f004 fd1f 	bl	80056c4 <siprintf>
 8000c86:	e035      	b.n	8000cf4 <get_command+0x1cc>
						}
						else if(buffer[2] == '1'){
 8000c88:	4b4d      	ldr	r3, [pc, #308]	; (8000dc0 <get_command+0x298>)
 8000c8a:	789b      	ldrb	r3, [r3, #2]
 8000c8c:	2b31      	cmp	r3, #49	; 0x31
 8000c8e:	d10d      	bne.n	8000cac <get_command+0x184>
							RELAY2_ON;
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	021b      	lsls	r3, r3, #8
 8000c94:	4856      	ldr	r0, [pc, #344]	; (8000df0 <get_command+0x2c8>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	0019      	movs	r1, r3
 8000c9a:	f001 fd0b 	bl	80026b4 <HAL_GPIO_WritePin>
							sprintf(STRING2,"%s","RELAY 2 IS ON");
 8000c9e:	4a55      	ldr	r2, [pc, #340]	; (8000df4 <get_command+0x2cc>)
 8000ca0:	494c      	ldr	r1, [pc, #304]	; (8000dd4 <get_command+0x2ac>)
 8000ca2:	4b52      	ldr	r3, [pc, #328]	; (8000dec <get_command+0x2c4>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f004 fd0d 	bl	80056c4 <siprintf>
 8000caa:	e023      	b.n	8000cf4 <get_command+0x1cc>
						}
						else if(buffer[2] == '2'){
 8000cac:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <get_command+0x298>)
 8000cae:	789b      	ldrb	r3, [r3, #2]
 8000cb0:	2b32      	cmp	r3, #50	; 0x32
 8000cb2:	d10e      	bne.n	8000cd2 <get_command+0x1aa>
							RELAY1_OFF;
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	0059      	lsls	r1, r3, #1
 8000cb8:	23a0      	movs	r3, #160	; 0xa0
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 fcf8 	bl	80026b4 <HAL_GPIO_WritePin>
							sprintf(STRING2,"%s","RELAY 1 IS OFF");
 8000cc4:	4a4c      	ldr	r2, [pc, #304]	; (8000df8 <get_command+0x2d0>)
 8000cc6:	4943      	ldr	r1, [pc, #268]	; (8000dd4 <get_command+0x2ac>)
 8000cc8:	4b48      	ldr	r3, [pc, #288]	; (8000dec <get_command+0x2c4>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f004 fcfa 	bl	80056c4 <siprintf>
 8000cd0:	e010      	b.n	8000cf4 <get_command+0x1cc>
						}
						else if(buffer[2] == '3'){
 8000cd2:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <get_command+0x298>)
 8000cd4:	789b      	ldrb	r3, [r3, #2]
 8000cd6:	2b33      	cmp	r3, #51	; 0x33
 8000cd8:	d10c      	bne.n	8000cf4 <get_command+0x1cc>
							RELAY2_OFF;
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	4844      	ldr	r0, [pc, #272]	; (8000df0 <get_command+0x2c8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	0019      	movs	r1, r3
 8000ce4:	f001 fce6 	bl	80026b4 <HAL_GPIO_WritePin>
							sprintf(STRING2,"%s","RELAY 2 IS OFF");
 8000ce8:	4a44      	ldr	r2, [pc, #272]	; (8000dfc <get_command+0x2d4>)
 8000cea:	493a      	ldr	r1, [pc, #232]	; (8000dd4 <get_command+0x2ac>)
 8000cec:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <get_command+0x2c4>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f004 fce8 	bl	80056c4 <siprintf>
						}
						state2 = 2;
 8000cf4:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <get_command+0x2a0>)
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	601a      	str	r2, [r3, #0]
						setTimer(0, 100);
 8000cfa:	2164      	movs	r1, #100	; 0x64
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fbf3 	bl	80004e8 <setTimer>
 8000d02:	e034      	b.n	8000d6e <get_command+0x246>
					}
					else if(buffer[1] == 'F')
 8000d04:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <get_command+0x298>)
 8000d06:	785b      	ldrb	r3, [r3, #1]
 8000d08:	2b46      	cmp	r3, #70	; 0x46
 8000d0a:	d10d      	bne.n	8000d28 <get_command+0x200>
					{
						if(buffer[2] == '0'){
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <get_command+0x298>)
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	2b30      	cmp	r3, #48	; 0x30
 8000d12:	d001      	beq.n	8000d18 <get_command+0x1f0>

						}
						else if(buffer[2] == '1'){
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <get_command+0x298>)
 8000d16:	789b      	ldrb	r3, [r3, #2]

						}
						else if(buffer[2] == '3'){

						}
						state2 = 3;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <get_command+0x2a0>)
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	601a      	str	r2, [r3, #0]
						setTimer(0, 100);
 8000d1e:	2164      	movs	r1, #100	; 0x64
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fbe1 	bl	80004e8 <setTimer>
 8000d26:	e022      	b.n	8000d6e <get_command+0x246>
					}
					else if(buffer[1] == 'W')
 8000d28:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <get_command+0x298>)
 8000d2a:	785b      	ldrb	r3, [r3, #1]
 8000d2c:	2b57      	cmp	r3, #87	; 0x57
 8000d2e:	d10d      	bne.n	8000d4c <get_command+0x224>
					{
						if(buffer[2] == '0'){
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <get_command+0x298>)
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	2b30      	cmp	r3, #48	; 0x30
 8000d36:	d001      	beq.n	8000d3c <get_command+0x214>

						}
						else if(buffer[2] == '1'){
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <get_command+0x298>)
 8000d3a:	789b      	ldrb	r3, [r3, #2]

						}
						else if(buffer[2] == '3'){

						}
						state2 = 4;
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <get_command+0x2a0>)
 8000d3e:	2204      	movs	r2, #4
 8000d40:	601a      	str	r2, [r3, #0]
						setTimer(0, 100);
 8000d42:	2164      	movs	r1, #100	; 0x64
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fbcf 	bl	80004e8 <setTimer>
 8000d4a:	e010      	b.n	8000d6e <get_command+0x246>
					}
					else if(buffer[1] == 'T')
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <get_command+0x298>)
 8000d4e:	785b      	ldrb	r3, [r3, #1]
 8000d50:	2b54      	cmp	r3, #84	; 0x54
 8000d52:	d10c      	bne.n	8000d6e <get_command+0x246>
					{
						if(buffer[2] == '0'){
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <get_command+0x298>)
 8000d56:	789b      	ldrb	r3, [r3, #2]
 8000d58:	2b30      	cmp	r3, #48	; 0x30
 8000d5a:	d001      	beq.n	8000d60 <get_command+0x238>

						}
						else if(buffer[2] == '1'){
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <get_command+0x298>)
 8000d5e:	789b      	ldrb	r3, [r3, #2]

						}
						else if(buffer[2] == '3'){

						}
						state2 = 5;
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <get_command+0x2a0>)
 8000d62:	2205      	movs	r2, #5
 8000d64:	601a      	str	r2, [r3, #0]
						setTimer(0, 100);
 8000d66:	2164      	movs	r1, #100	; 0x64
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff fbbd 	bl	80004e8 <setTimer>
					}
					count = 0;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <get_command+0x29c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
					state1 = INIT;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <get_command+0x294>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
				}

				if(buffer[count] == '!')
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <get_command+0x29c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <get_command+0x298>)
 8000d80:	5cd3      	ldrb	r3, [r2, r3]
 8000d82:	2b21      	cmp	r3, #33	; 0x21
 8000d84:	d105      	bne.n	8000d92 <get_command+0x26a>
				{
					buffer[0] = '!';
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <get_command+0x298>)
 8000d88:	2221      	movs	r2, #33	; 0x21
 8000d8a:	701a      	strb	r2, [r3, #0]
					count = 1;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <get_command+0x29c>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	601a      	str	r2, [r3, #0]
				}
				count++;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <get_command+0x29c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <get_command+0x29c>)
 8000d9a:	601a      	str	r2, [r3, #0]
				break;
 8000d9c:	e009      	b.n	8000db2 <get_command+0x28a>
			default:
				UART_send(UART_3, "DEFAULT\n", sizeof("DEFAULT\n"));
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <get_command+0x2d8>)
 8000da0:	2209      	movs	r2, #9
 8000da2:	0019      	movs	r1, r3
 8000da4:	2002      	movs	r0, #2
 8000da6:	f7ff fced 	bl	8000784 <UART_send>
				break;
 8000daa:	e002      	b.n	8000db2 <get_command+0x28a>
		}
	}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	e000      	b.n	8000db2 <get_command+0x28a>
				break;
 8000db0:	46c0      	nop			; (mov r8, r8)
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bdb0      	pop	{r4, r5, r7, pc}
 8000db8:	20000468 	.word	0x20000468
 8000dbc:	200024b8 	.word	0x200024b8
 8000dc0:	200024c4 	.word	0x200024c4
 8000dc4:	200024c0 	.word	0x200024c0
 8000dc8:	200024bc 	.word	0x200024bc
 8000dcc:	50000800 	.word	0x50000800
 8000dd0:	08005f9c 	.word	0x08005f9c
 8000dd4:	08005fb0 	.word	0x08005fb0
 8000dd8:	200024d0 	.word	0x200024d0
 8000ddc:	08005fb4 	.word	0x08005fb4
 8000de0:	08005fc8 	.word	0x08005fc8
 8000de4:	08005fdc 	.word	0x08005fdc
 8000de8:	08005ff0 	.word	0x08005ff0
 8000dec:	20002504 	.word	0x20002504
 8000df0:	50000400 	.word	0x50000400
 8000df4:	08006000 	.word	0x08006000
 8000df8:	08006010 	.word	0x08006010
 8000dfc:	08006020 	.word	0x08006020
 8000e00:	08006030 	.word	0x08006030

08000e04 <fsm_uart>:

void fsm_uart()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	switch (state2) {
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <fsm_uart+0xd8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d854      	bhi.n	8000eba <fsm_uart+0xb6>
 8000e10:	009a      	lsls	r2, r3, #2
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <fsm_uart+0xdc>)
 8000e14:	18d3      	adds	r3, r2, r3
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	469f      	mov	pc, r3
		case 0:
			break;
		case 1:
			if(isTimer_timeout(0)){
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fb7c 	bl	8000518 <isTimer_timeout>
 8000e20:	1e03      	subs	r3, r0, #0
 8000e22:	d04e      	beq.n	8000ec2 <fsm_uart+0xbe>
				UART_send(UART_3, STRING1, sizeof(STRING1));
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <fsm_uart+0xe0>)
 8000e26:	2232      	movs	r2, #50	; 0x32
 8000e28:	0019      	movs	r1, r3
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f7ff fcaa 	bl	8000784 <UART_send>
				setTimer(0, 100);
 8000e30:	2164      	movs	r1, #100	; 0x64
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fb58 	bl	80004e8 <setTimer>
			}
			break;
 8000e38:	e043      	b.n	8000ec2 <fsm_uart+0xbe>
		case 2:
			if(isTimer_timeout(0)){
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fb6c 	bl	8000518 <isTimer_timeout>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d040      	beq.n	8000ec6 <fsm_uart+0xc2>
				UART_send(UART_3, STRING2, sizeof(STRING2));
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <fsm_uart+0xe4>)
 8000e46:	2232      	movs	r2, #50	; 0x32
 8000e48:	0019      	movs	r1, r3
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f7ff fc9a 	bl	8000784 <UART_send>
				setTimer(0, 100);
 8000e50:	2164      	movs	r1, #100	; 0x64
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff fb48 	bl	80004e8 <setTimer>
			}
			break;
 8000e58:	e035      	b.n	8000ec6 <fsm_uart+0xc2>
		case 3:
			if(isTimer_timeout(0)){
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff fb5c 	bl	8000518 <isTimer_timeout>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d032      	beq.n	8000eca <fsm_uart+0xc6>
				UART_send(UART_3, STRING3, sizeof(STRING3));
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <fsm_uart+0xe8>)
 8000e66:	2232      	movs	r2, #50	; 0x32
 8000e68:	0019      	movs	r1, r3
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f7ff fc8a 	bl	8000784 <UART_send>
				setTimer(0, 100);
 8000e70:	2164      	movs	r1, #100	; 0x64
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fb38 	bl	80004e8 <setTimer>
			}
			break;
 8000e78:	e027      	b.n	8000eca <fsm_uart+0xc6>
		case 4:
			if(isTimer_timeout(0)){
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fb4c 	bl	8000518 <isTimer_timeout>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d024      	beq.n	8000ece <fsm_uart+0xca>
				UART_send(UART_3, STRING4, sizeof(STRING4));
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <fsm_uart+0xec>)
 8000e86:	2232      	movs	r2, #50	; 0x32
 8000e88:	0019      	movs	r1, r3
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f7ff fc7a 	bl	8000784 <UART_send>
				setTimer(0, 100);
 8000e90:	2164      	movs	r1, #100	; 0x64
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fb28 	bl	80004e8 <setTimer>
			}
			break;
 8000e98:	e019      	b.n	8000ece <fsm_uart+0xca>
		case 5:
			if(isTimer_timeout(0)){
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fb3c 	bl	8000518 <isTimer_timeout>
 8000ea0:	1e03      	subs	r3, r0, #0
 8000ea2:	d016      	beq.n	8000ed2 <fsm_uart+0xce>
				UART_send(UART_3, STRING5, sizeof(STRING5));
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <fsm_uart+0xf0>)
 8000ea6:	2232      	movs	r2, #50	; 0x32
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f7ff fc6a 	bl	8000784 <UART_send>
				setTimer(0, 100);
 8000eb0:	2164      	movs	r1, #100	; 0x64
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff fb18 	bl	80004e8 <setTimer>
			}
			break;
 8000eb8:	e00b      	b.n	8000ed2 <fsm_uart+0xce>
		default:
			break;
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	e00a      	b.n	8000ed4 <fsm_uart+0xd0>
			break;
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	e008      	b.n	8000ed4 <fsm_uart+0xd0>
			break;
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	e006      	b.n	8000ed4 <fsm_uart+0xd0>
			break;
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	e004      	b.n	8000ed4 <fsm_uart+0xd0>
			break;
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	e002      	b.n	8000ed4 <fsm_uart+0xd0>
			break;
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	e000      	b.n	8000ed4 <fsm_uart+0xd0>
			break;
 8000ed2:	46c0      	nop			; (mov r8, r8)
	}
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	200024bc 	.word	0x200024bc
 8000ee0:	0800603c 	.word	0x0800603c
 8000ee4:	200024d0 	.word	0x200024d0
 8000ee8:	20002504 	.word	0x20002504
 8000eec:	20002538 	.word	0x20002538
 8000ef0:	2000256c 	.word	0x2000256c
 8000ef4:	200025a0 	.word	0x200025a0

08000ef8 <fsm_run>:

void fsm_run(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	get_command();
 8000efc:	f7ff fe14 	bl	8000b28 <get_command>
	fsm_uart();
 8000f00:	f7ff ff80 	bl	8000e04 <fsm_uart>
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0e:	f000 fa33 	bl	8001378 <HAL_Init>

  /* USER CODE BEGIN Init */
  UART_init();
 8000f12:	f7ff fb5d 	bl	80005d0 <UART_init>
  TIM_init();
 8000f16:	f7ff fa9f 	bl	8000458 <TIM_init>
  ADC_init();
 8000f1a:	f7ff f987 	bl	800022c <ADC_init>
  GPIO_init();
 8000f1e:	f7ff f9ed 	bl	80002fc <GPIO_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f803 	bl	8000f2c <SystemClock_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  fsm_run();
 8000f26:	f7ff ffe7 	bl	8000ef8 <fsm_run>
 8000f2a:	e7fc      	b.n	8000f26 <main+0x1c>

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b093      	sub	sp, #76	; 0x4c
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	2414      	movs	r4, #20
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	0018      	movs	r0, r3
 8000f38:	2334      	movs	r3, #52	; 0x34
 8000f3a:	001a      	movs	r2, r3
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f004 fbb8 	bl	80056b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	0018      	movs	r0, r3
 8000f46:	2310      	movs	r3, #16
 8000f48:	001a      	movs	r2, r3
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f004 fbb1 	bl	80056b2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f001 fbcb 	bl	80026f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	0052      	lsls	r2, r2, #1
 8000f66:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	2240      	movs	r2, #64	; 0x40
 8000f72:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f001 fc03 	bl	8002788 <HAL_RCC_OscConfig>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f86:	f000 f819 	bl	8000fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 fefe 	bl	8002da8 <HAL_RCC_ClockConfig>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000fb0:	f000 f804 	bl	8000fbc <Error_Handler>
  }
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b013      	add	sp, #76	; 0x4c
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <Error_Handler+0x8>
	...

08000fc8 <SCH_Update>:

void SCH_Init(void){
	// Do nothing
}

void SCH_Update(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <SCH_Update+0x44>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <SCH_Update+0x44>)
 8000fd4:	601a      	str	r2, [r3, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <SCH_Update+0x48>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d013      	beq.n	8001006 <SCH_Update+0x3e>
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <SCH_Update+0x48>)
 8000fe0:	7b1b      	ldrb	r3, [r3, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10f      	bne.n	8001006 <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <SCH_Update+0x48>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <SCH_Update+0x48>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	1e5a      	subs	r2, r3, #1
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SCH_Update+0x48>)
 8000ff6:	605a      	str	r2, [r3, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SCH_Update+0x48>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <SCH_Update+0x48>)
 8001002:	2201      	movs	r2, #1
 8001004:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200028f4 	.word	0x200028f4
 8001010:	200025d4 	.word	0x200025d4

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_MspInit+0x44>)
 800101c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_MspInit+0x44>)
 8001020:	2101      	movs	r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	641a      	str	r2, [r3, #64]	; 0x40
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_MspInit+0x44>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2201      	movs	r2, #1
 800102c:	4013      	ands	r3, r2
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_MspInit+0x44>)
 8001034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_MspInit+0x44>)
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	0549      	lsls	r1, r1, #21
 800103c:	430a      	orrs	r2, r1
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_MspInit+0x44>)
 8001042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	055b      	lsls	r3, r3, #21
 8001048:	4013      	ands	r3, r2
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b08b      	sub	sp, #44	; 0x2c
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	2414      	movs	r4, #20
 8001066:	193b      	adds	r3, r7, r4
 8001068:	0018      	movs	r0, r3
 800106a:	2314      	movs	r3, #20
 800106c:	001a      	movs	r2, r3
 800106e:	2100      	movs	r1, #0
 8001070:	f004 fb1f 	bl	80056b2 <memset>
  if(hadc->Instance==ADC1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <HAL_ADC_MspInit+0xd4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d154      	bne.n	8001128 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800107e:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <HAL_ADC_MspInit+0xd8>)
 8001080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <HAL_ADC_MspInit+0xd8>)
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	0349      	lsls	r1, r1, #13
 8001088:	430a      	orrs	r2, r1
 800108a:	641a      	str	r2, [r3, #64]	; 0x40
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <HAL_ADC_MspInit+0xd8>)
 800108e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	035b      	lsls	r3, r3, #13
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_ADC_MspInit+0xd8>)
 800109c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <HAL_ADC_MspInit+0xd8>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	430a      	orrs	r2, r1
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
 80010a6:	4b23      	ldr	r3, [pc, #140]	; (8001134 <HAL_ADC_MspInit+0xd8>)
 80010a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010aa:	2201      	movs	r2, #1
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	220f      	movs	r2, #15
 80010b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	2203      	movs	r2, #3
 80010bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	193a      	adds	r2, r7, r4
 80010c6:	23a0      	movs	r3, #160	; 0xa0
 80010c8:	05db      	lsls	r3, r3, #23
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f001 f98d 	bl	80023ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_ADC_MspInit+0xe0>)
 80010d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 80010da:	2205      	movs	r2, #5
 80010dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	0052      	lsls	r2, r2, #1
 80010f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	00d2      	lsls	r2, r2, #3
 80010fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 800110e:	0018      	movs	r0, r3
 8001110:	f000 ff14 	bl	8001f3c <HAL_DMA_Init>
 8001114:	1e03      	subs	r3, r0, #0
 8001116:	d001      	beq.n	800111c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001118:	f7ff ff50 	bl	8000fbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 8001120:	651a      	str	r2, [r3, #80]	; 0x50
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_ADC_MspInit+0xdc>)
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b00b      	add	sp, #44	; 0x2c
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	40012400 	.word	0x40012400
 8001134:	40021000 	.word	0x40021000
 8001138:	200003bc 	.word	0x200003bc
 800113c:	40020008 	.word	0x40020008

08001140 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_TIM_Base_MspInit+0x44>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d113      	bne.n	800117a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_TIM_Base_MspInit+0x48>)
 8001154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_TIM_Base_MspInit+0x48>)
 8001158:	2102      	movs	r1, #2
 800115a:	430a      	orrs	r2, r1
 800115c:	63da      	str	r2, [r3, #60]	; 0x3c
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_TIM_Base_MspInit+0x48>)
 8001160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001162:	2202      	movs	r2, #2
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2010      	movs	r0, #16
 8001170:	f000 feb2 	bl	8001ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001174:	2010      	movs	r0, #16
 8001176:	f000 fec4 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b004      	add	sp, #16
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	40000400 	.word	0x40000400
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b08b      	sub	sp, #44	; 0x2c
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	2414      	movs	r4, #20
 8001196:	193b      	adds	r3, r7, r4
 8001198:	0018      	movs	r0, r3
 800119a:	2314      	movs	r3, #20
 800119c:	001a      	movs	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	f004 fa87 	bl	80056b2 <memset>
  if(huart->Instance==USART3)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1f      	ldr	r2, [pc, #124]	; (8001228 <HAL_UART_MspInit+0x9c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d138      	bne.n	8001220 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_UART_MspInit+0xa0>)
 80011b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_UART_MspInit+0xa0>)
 80011b4:	2180      	movs	r1, #128	; 0x80
 80011b6:	02c9      	lsls	r1, r1, #11
 80011b8:	430a      	orrs	r2, r1
 80011ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_UART_MspInit+0xa0>)
 80011be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	02db      	lsls	r3, r3, #11
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_UART_MspInit+0xa0>)
 80011cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_UART_MspInit+0xa0>)
 80011d0:	2108      	movs	r1, #8
 80011d2:	430a      	orrs	r2, r1
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_UART_MspInit+0xa0>)
 80011d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011da:	2208      	movs	r2, #8
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011e2:	193b      	adds	r3, r7, r4
 80011e4:	22c0      	movs	r2, #192	; 0xc0
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	0021      	movs	r1, r4
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2202      	movs	r2, #2
 80011f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001204:	187b      	adds	r3, r7, r1
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_UART_MspInit+0xa4>)
 8001208:	0019      	movs	r1, r3
 800120a:	0010      	movs	r0, r2
 800120c:	f001 f8ee 	bl	80023ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	201d      	movs	r0, #29
 8001216:	f000 fe5f 	bl	8001ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800121a:	201d      	movs	r0, #29
 800121c:	f000 fe71 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b00b      	add	sp, #44	; 0x2c
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	40004800 	.word	0x40004800
 800122c:	40021000 	.word	0x40021000
 8001230:	50000c00 	.word	0x50000c00

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f8f8 	bl	800144c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <DMA1_Channel1_IRQHandler+0x14>)
 800126a:	0018      	movs	r0, r3
 800126c:	f000 ffbc 	bl	80021e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	200003bc 	.word	0x200003bc

0800127c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <TIM3_IRQHandler+0x14>)
 8001282:	0018      	movs	r0, r3
 8001284:	f001 ffe8 	bl	8003258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	20000064 	.word	0x20000064

08001294 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <USART3_4_IRQHandler+0x14>)
 800129a:	0018      	movs	r0, r3
 800129c:	f002 fce0 	bl	8003c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	200001d8 	.word	0x200001d8

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	18d3      	adds	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f004 f9b6 	bl	800564c <__errno>
 80012e0:	0003      	movs	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	425b      	negs	r3, r3
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	18d2      	adds	r2, r2, r3
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b006      	add	sp, #24
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20009000 	.word	0x20009000
 800130c:	00000400 	.word	0x00000400
 8001310:	200028f8 	.word	0x200028f8
 8001314:	20002910 	.word	0x20002910

08001318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001326:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001328:	f7ff fff6 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <LoopForever+0x6>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	; (8001364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <LoopForever+0xe>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	; (8001370 <LoopForever+0x16>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001352:	f004 f981 	bl	8005658 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001356:	f7ff fdd8 	bl	8000f0a <main>

0800135a <LoopForever>:

LoopForever:
  b LoopForever
 800135a:	e7fe      	b.n	800135a <LoopForever>
  ldr   r0, =_estack
 800135c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	200003a0 	.word	0x200003a0
  ldr r2, =_sidata
 8001368:	08006108 	.word	0x08006108
  ldr r2, =_sbss
 800136c:	200003a0 	.word	0x200003a0
  ldr r4, =_ebss
 8001370:	20002910 	.word	0x20002910

08001374 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC1_IRQHandler>
	...

08001378 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_Init+0x3c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_Init+0x3c>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	0049      	lsls	r1, r1, #1
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001392:	2003      	movs	r0, #3
 8001394:	f000 f810 	bl	80013b8 <HAL_InitTick>
 8001398:	1e03      	subs	r3, r0, #0
 800139a:	d003      	beq.n	80013a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
 80013a2:	e001      	b.n	80013a8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013a4:	f7ff fe36 	bl	8001014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	781b      	ldrb	r3, [r3, #0]
}
 80013ac:	0018      	movs	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b002      	add	sp, #8
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40022000 	.word	0x40022000

080013b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c0:	230f      	movs	r3, #15
 80013c2:	18fb      	adds	r3, r7, r3
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <HAL_InitTick+0x88>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d02b      	beq.n	8001428 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_InitTick+0x8c>)
 80013d2:	681c      	ldr	r4, [r3, #0]
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_InitTick+0x88>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	0019      	movs	r1, r3
 80013da:	23fa      	movs	r3, #250	; 0xfa
 80013dc:	0098      	lsls	r0, r3, #2
 80013de:	f7fe fe99 	bl	8000114 <__udivsi3>
 80013e2:	0003      	movs	r3, r0
 80013e4:	0019      	movs	r1, r3
 80013e6:	0020      	movs	r0, r4
 80013e8:	f7fe fe94 	bl	8000114 <__udivsi3>
 80013ec:	0003      	movs	r3, r0
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 fd97 	bl	8001f22 <HAL_SYSTICK_Config>
 80013f4:	1e03      	subs	r3, r0, #0
 80013f6:	d112      	bne.n	800141e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d80a      	bhi.n	8001414 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	2301      	movs	r3, #1
 8001402:	425b      	negs	r3, r3
 8001404:	2200      	movs	r2, #0
 8001406:	0018      	movs	r0, r3
 8001408:	f000 fd66 	bl	8001ed8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_InitTick+0x90>)
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e00d      	b.n	8001430 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001414:	230f      	movs	r3, #15
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	e008      	b.n	8001430 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800141e:	230f      	movs	r3, #15
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	e003      	b.n	8001430 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001428:	230f      	movs	r3, #15
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001430:	230f      	movs	r3, #15
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	781b      	ldrb	r3, [r3, #0]
}
 8001436:	0018      	movs	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	b005      	add	sp, #20
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	20000338 	.word	0x20000338
 8001444:	20000330 	.word	0x20000330
 8001448:	20000334 	.word	0x20000334

0800144c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x1c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	001a      	movs	r2, r3
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_IncTick+0x20>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	18d2      	adds	r2, r2, r3
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_IncTick+0x20>)
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	20000338 	.word	0x20000338
 800146c:	200028fc 	.word	0x200028fc

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <HAL_GetTick+0x10>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	200028fc 	.word	0x200028fc

08001484 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001494:	401a      	ands	r2, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	fe3fffff 	.word	0xfe3fffff

080014ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	23e0      	movs	r3, #224	; 0xe0
 80014ba:	045b      	lsls	r3, r3, #17
 80014bc:	4013      	ands	r3, r2
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	2104      	movs	r1, #4
 80014da:	400a      	ands	r2, r1
 80014dc:	2107      	movs	r1, #7
 80014de:	4091      	lsls	r1, r2
 80014e0:	000a      	movs	r2, r1
 80014e2:	43d2      	mvns	r2, r2
 80014e4:	401a      	ands	r2, r3
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2104      	movs	r1, #4
 80014ea:	400b      	ands	r3, r1
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4099      	lsls	r1, r3
 80014f0:	000b      	movs	r3, r1
 80014f2:	431a      	orrs	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b004      	add	sp, #16
 80014fe:	bd80      	pop	{r7, pc}

08001500 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	2104      	movs	r1, #4
 8001512:	400a      	ands	r2, r1
 8001514:	2107      	movs	r1, #7
 8001516:	4091      	lsls	r1, r2
 8001518:	000a      	movs	r2, r1
 800151a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2104      	movs	r1, #4
 8001520:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001522:	40da      	lsrs	r2, r3
 8001524:	0013      	movs	r3, r2
}
 8001526:	0018      	movs	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}

0800152e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	211f      	movs	r1, #31
 8001542:	400a      	ands	r2, r1
 8001544:	210f      	movs	r1, #15
 8001546:	4091      	lsls	r1, r2
 8001548:	000a      	movs	r2, r1
 800154a:	43d2      	mvns	r2, r2
 800154c:	401a      	ands	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0e9b      	lsrs	r3, r3, #26
 8001552:	210f      	movs	r1, #15
 8001554:	4019      	ands	r1, r3
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	201f      	movs	r0, #31
 800155a:	4003      	ands	r3, r0
 800155c:	4099      	lsls	r1, r3
 800155e:	000b      	movs	r3, r1
 8001560:	431a      	orrs	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}

0800156e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	035b      	lsls	r3, r3, #13
 8001580:	0b5b      	lsrs	r3, r3, #13
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}

08001590 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	0352      	lsls	r2, r2, #13
 80015a2:	0b52      	lsrs	r2, r2, #13
 80015a4:	43d2      	mvns	r2, r2
 80015a6:	401a      	ands	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	0212      	lsls	r2, r2, #8
 80015c8:	43d2      	mvns	r2, r2
 80015ca:	401a      	ands	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	400b      	ands	r3, r1
 80015d4:	4904      	ldr	r1, [pc, #16]	; (80015e8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80015d6:	400b      	ands	r3, r1
 80015d8:	431a      	orrs	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b004      	add	sp, #16
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	07ffff00 	.word	0x07ffff00

080015ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a05      	ldr	r2, [pc, #20]	; (8001610 <LL_ADC_EnableInternalRegulator+0x24>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	0552      	lsls	r2, r2, #21
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	6fffffe8 	.word	0x6fffffe8

08001614 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	055b      	lsls	r3, r3, #21
 8001624:	401a      	ands	r2, r3
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	055b      	lsls	r3, r3, #21
 800162a:	429a      	cmp	r2, r3
 800162c:	d101      	bne.n	8001632 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001632:	2300      	movs	r3, #0
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}

0800163c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <LL_ADC_IsEnabled+0x18>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <LL_ADC_IsEnabled+0x1a>
 8001654:	2300      	movs	r3, #0
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}

0800165e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2204      	movs	r2, #4
 800166c:	4013      	ands	r3, r2
 800166e:	2b04      	cmp	r3, #4
 8001670:	d101      	bne.n	8001676 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001688:	231f      	movs	r3, #31
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e17f      	b.n	80019a6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10a      	bne.n	80016c4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff fcd3 	bl	800105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2254      	movs	r2, #84	; 0x54
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff ffa3 	bl	8001614 <LL_ADC_IsInternalRegulatorEnabled>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d115      	bne.n	80016fe <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7ff ff88 	bl	80015ec <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016dc:	4bb4      	ldr	r3, [pc, #720]	; (80019b0 <HAL_ADC_Init+0x330>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	49b4      	ldr	r1, [pc, #720]	; (80019b4 <HAL_ADC_Init+0x334>)
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7fe fd16 	bl	8000114 <__udivsi3>
 80016e8:	0003      	movs	r3, r0
 80016ea:	3301      	adds	r3, #1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016f0:	e002      	b.n	80016f8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f9      	bne.n	80016f2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff ff86 	bl	8001614 <LL_ADC_IsInternalRegulatorEnabled>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d10f      	bne.n	800172c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	2210      	movs	r2, #16
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	2201      	movs	r2, #1
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001724:	231f      	movs	r3, #31
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff ff94 	bl	800165e <LL_ADC_REG_IsConversionOngoing>
 8001736:	0003      	movs	r3, r0
 8001738:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	2210      	movs	r2, #16
 8001740:	4013      	ands	r3, r2
 8001742:	d000      	beq.n	8001746 <HAL_ADC_Init+0xc6>
 8001744:	e122      	b.n	800198c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d000      	beq.n	800174e <HAL_ADC_Init+0xce>
 800174c:	e11e      	b.n	800198c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	4a99      	ldr	r2, [pc, #612]	; (80019b8 <HAL_ADC_Init+0x338>)
 8001754:	4013      	ands	r3, r2
 8001756:	2202      	movs	r2, #2
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff ff6a 	bl	800163c <LL_ADC_IsEnabled>
 8001768:	1e03      	subs	r3, r0, #0
 800176a:	d000      	beq.n	800176e <HAL_ADC_Init+0xee>
 800176c:	e0ad      	b.n	80018ca <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7e1b      	ldrb	r3, [r3, #24]
 8001776:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001778:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7e5b      	ldrb	r3, [r3, #25]
 800177e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001780:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7e9b      	ldrb	r3, [r3, #26]
 8001786:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001788:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <HAL_ADC_Init+0x118>
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	015b      	lsls	r3, r3, #5
 8001796:	e000      	b.n	800179a <HAL_ADC_Init+0x11a>
 8001798:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800179a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017a0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da04      	bge.n	80017b4 <HAL_ADC_Init+0x134>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	e001      	b.n	80017b8 <HAL_ADC_Init+0x138>
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80017b8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	5c5b      	ldrb	r3, [r3, r1]
 80017c0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017c2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2220      	movs	r2, #32
 80017ce:	5c9b      	ldrb	r3, [r3, r2]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d115      	bne.n	8001800 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e9b      	ldrb	r3, [r3, #26]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2280      	movs	r2, #128	; 0x80
 80017e0:	0252      	lsls	r2, r2, #9
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	e00b      	b.n	8001800 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	2220      	movs	r2, #32
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	2201      	movs	r2, #1
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00a      	beq.n	800181e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180c:	23e0      	movs	r3, #224	; 0xe0
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001816:	4313      	orrs	r3, r2
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4a65      	ldr	r2, [pc, #404]	; (80019bc <HAL_ADC_Init+0x33c>)
 8001826:	4013      	ands	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	430a      	orrs	r2, r1
 8001832:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	0f9b      	lsrs	r3, r3, #30
 800183a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001840:	4313      	orrs	r3, r2
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4313      	orrs	r3, r2
 8001846:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	223c      	movs	r2, #60	; 0x3c
 800184c:	5c9b      	ldrb	r3, [r3, r2]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d111      	bne.n	8001876 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	0f9b      	lsrs	r3, r3, #30
 8001858:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800185e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001864:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800186a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	4313      	orrs	r3, r2
 8001870:	2201      	movs	r2, #1
 8001872:	4313      	orrs	r3, r2
 8001874:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	4a50      	ldr	r2, [pc, #320]	; (80019c0 <HAL_ADC_Init+0x340>)
 800187e:	4013      	ands	r3, r2
 8001880:	0019      	movs	r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	430a      	orrs	r2, r1
 800188a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	23c0      	movs	r3, #192	; 0xc0
 8001892:	061b      	lsls	r3, r3, #24
 8001894:	429a      	cmp	r2, r3
 8001896:	d018      	beq.n	80018ca <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	05db      	lsls	r3, r3, #23
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d012      	beq.n	80018ca <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	061b      	lsls	r3, r3, #24
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d00c      	beq.n	80018ca <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80018b0:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <HAL_ADC_Init+0x344>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a44      	ldr	r2, [pc, #272]	; (80019c8 <HAL_ADC_Init+0x348>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	0019      	movs	r1, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	23f0      	movs	r3, #240	; 0xf0
 80018c0:	039b      	lsls	r3, r3, #14
 80018c2:	401a      	ands	r2, r3
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_ADC_Init+0x344>)
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	001a      	movs	r2, r3
 80018d4:	2100      	movs	r1, #0
 80018d6:	f7ff fdf6 	bl	80014c6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e2:	493a      	ldr	r1, [pc, #232]	; (80019cc <HAL_ADC_Init+0x34c>)
 80018e4:	001a      	movs	r2, r3
 80018e6:	f7ff fdee 	bl	80014c6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2110      	movs	r1, #16
 80018fe:	4249      	negs	r1, r1
 8001900:	430a      	orrs	r2, r1
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
 8001904:	e018      	b.n	8001938 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	039b      	lsls	r3, r3, #14
 800190e:	429a      	cmp	r2, r3
 8001910:	d112      	bne.n	8001938 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	3b01      	subs	r3, #1
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	221c      	movs	r2, #28
 8001922:	4013      	ands	r3, r2
 8001924:	2210      	movs	r2, #16
 8001926:	4252      	negs	r2, r2
 8001928:	409a      	lsls	r2, r3
 800192a:	0011      	movs	r1, r2
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2100      	movs	r1, #0
 800193e:	0018      	movs	r0, r3
 8001940:	f7ff fdde 	bl	8001500 <LL_ADC_GetSamplingTimeCommonChannels>
 8001944:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800194a:	429a      	cmp	r2, r3
 800194c:	d10b      	bne.n	8001966 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	2203      	movs	r2, #3
 800195a:	4393      	bics	r3, r2
 800195c:	2201      	movs	r2, #1
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001964:	e01c      	b.n	80019a0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	2212      	movs	r2, #18
 800196c:	4393      	bics	r3, r2
 800196e:	2210      	movs	r2, #16
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	2201      	movs	r2, #1
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001982:	231f      	movs	r3, #31
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800198a:	e009      	b.n	80019a0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	2210      	movs	r2, #16
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001998:	231f      	movs	r3, #31
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80019a0:	231f      	movs	r3, #31
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	781b      	ldrb	r3, [r3, #0]
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b008      	add	sp, #32
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	20000330 	.word	0x20000330
 80019b4:	00030d40 	.word	0x00030d40
 80019b8:	fffffefd 	.word	0xfffffefd
 80019bc:	fffe0201 	.word	0xfffe0201
 80019c0:	1ffffc02 	.word	0x1ffffc02
 80019c4:	40012708 	.word	0x40012708
 80019c8:	ffc3ffff 	.word	0xffc3ffff
 80019cc:	07ffff04 	.word	0x07ffff04

080019d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019da:	2317      	movs	r3, #23
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2254      	movs	r2, #84	; 0x54
 80019ea:	5c9b      	ldrb	r3, [r3, r2]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x24>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e1c0      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x3a6>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2254      	movs	r2, #84	; 0x54
 80019f8:	2101      	movs	r1, #1
 80019fa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff fe2c 	bl	800165e <LL_ADC_REG_IsConversionOngoing>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d000      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x3c>
 8001a0a:	e1a3      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d100      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x46>
 8001a14:	e143      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691a      	ldr	r2, [r3, #16]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	061b      	lsls	r3, r3, #24
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d004      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a26:	4ac1      	ldr	r2, [pc, #772]	; (8001d2c <HAL_ADC_ConfigChannel+0x35c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d108      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0019      	movs	r1, r3
 8001a36:	0010      	movs	r0, r2
 8001a38:	f7ff fd99 	bl	800156e <LL_ADC_REG_SetSequencerChAdd>
 8001a3c:	e0c9      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	211f      	movs	r1, #31
 8001a48:	400b      	ands	r3, r1
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	4099      	lsls	r1, r3
 8001a4e:	000b      	movs	r3, r1
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4013      	ands	r3, r2
 8001a54:	0019      	movs	r1, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	035b      	lsls	r3, r3, #13
 8001a5c:	0b5b      	lsrs	r3, r3, #13
 8001a5e:	d105      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x9c>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0e9b      	lsrs	r3, r3, #26
 8001a66:	221f      	movs	r2, #31
 8001a68:	4013      	ands	r3, r2
 8001a6a:	e098      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4013      	ands	r3, r2
 8001a74:	d000      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0xa8>
 8001a76:	e091      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x1cc>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d000      	beq.n	8001a84 <HAL_ADC_ConfigChannel+0xb4>
 8001a82:	e089      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x1c8>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d000      	beq.n	8001a90 <HAL_ADC_ConfigChannel+0xc0>
 8001a8e:	e081      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x1c4>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2208      	movs	r2, #8
 8001a96:	4013      	ands	r3, r2
 8001a98:	d000      	beq.n	8001a9c <HAL_ADC_ConfigChannel+0xcc>
 8001a9a:	e079      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x1c0>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d000      	beq.n	8001aa8 <HAL_ADC_ConfigChannel+0xd8>
 8001aa6:	e071      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x1bc>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2220      	movs	r2, #32
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d000      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0xe4>
 8001ab2:	e069      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x1b8>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2240      	movs	r2, #64	; 0x40
 8001aba:	4013      	ands	r3, r2
 8001abc:	d000      	beq.n	8001ac0 <HAL_ADC_ConfigChannel+0xf0>
 8001abe:	e061      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x1b4>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d000      	beq.n	8001acc <HAL_ADC_ConfigChannel+0xfc>
 8001aca:	e059      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x1b0>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d151      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x1ac>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d149      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x1a8>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4013      	ands	r3, r2
 8001aee:	d141      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1a4>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	4013      	ands	r3, r2
 8001afa:	d139      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1a0>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	015b      	lsls	r3, r3, #5
 8001b04:	4013      	ands	r3, r2
 8001b06:	d131      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x19c>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	019b      	lsls	r3, r3, #6
 8001b10:	4013      	ands	r3, r2
 8001b12:	d129      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x198>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	01db      	lsls	r3, r3, #7
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d121      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x194>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d119      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x190>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	025b      	lsls	r3, r3, #9
 8001b34:	4013      	ands	r3, r2
 8001b36:	d111      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x18c>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	029b      	lsls	r3, r3, #10
 8001b40:	4013      	ands	r3, r2
 8001b42:	d109      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x188>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	02db      	lsls	r3, r3, #11
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d001      	beq.n	8001b54 <HAL_ADC_ConfigChannel+0x184>
 8001b50:	2312      	movs	r3, #18
 8001b52:	e024      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b54:	2300      	movs	r3, #0
 8001b56:	e022      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b58:	2311      	movs	r3, #17
 8001b5a:	e020      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b5c:	2310      	movs	r3, #16
 8001b5e:	e01e      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b60:	230f      	movs	r3, #15
 8001b62:	e01c      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b64:	230e      	movs	r3, #14
 8001b66:	e01a      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b68:	230d      	movs	r3, #13
 8001b6a:	e018      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	e016      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b70:	230b      	movs	r3, #11
 8001b72:	e014      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b74:	230a      	movs	r3, #10
 8001b76:	e012      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b78:	2309      	movs	r3, #9
 8001b7a:	e010      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	e00e      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b80:	2307      	movs	r3, #7
 8001b82:	e00c      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b84:	2306      	movs	r3, #6
 8001b86:	e00a      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b88:	2305      	movs	r3, #5
 8001b8a:	e008      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	e006      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b90:	2303      	movs	r3, #3
 8001b92:	e004      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e002      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	6852      	ldr	r2, [r2, #4]
 8001ba2:	201f      	movs	r0, #31
 8001ba4:	4002      	ands	r2, r0
 8001ba6:	4093      	lsls	r3, r2
 8001ba8:	000a      	movs	r2, r1
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d808      	bhi.n	8001bd2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	001a      	movs	r2, r3
 8001bce:	f7ff fcae 	bl	800152e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6819      	ldr	r1, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	001a      	movs	r2, r3
 8001be0:	f7ff fce8 	bl	80015b4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db00      	blt.n	8001bee <HAL_ADC_ConfigChannel+0x21e>
 8001bec:	e0bc      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bee:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_ADC_ConfigChannel+0x360>)
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7ff fc5b 	bl	80014ac <LL_ADC_GetCommonPathInternalCh>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a4d      	ldr	r2, [pc, #308]	; (8001d34 <HAL_ADC_ConfigChannel+0x364>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d122      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c0c:	d11d      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2280      	movs	r2, #128	; 0x80
 8001c12:	0412      	lsls	r2, r2, #16
 8001c14:	4313      	orrs	r3, r2
 8001c16:	4a46      	ldr	r2, [pc, #280]	; (8001d30 <HAL_ADC_ConfigChannel+0x360>)
 8001c18:	0019      	movs	r1, r3
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	f7ff fc32 	bl	8001484 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c20:	4b45      	ldr	r3, [pc, #276]	; (8001d38 <HAL_ADC_ConfigChannel+0x368>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4945      	ldr	r1, [pc, #276]	; (8001d3c <HAL_ADC_ConfigChannel+0x36c>)
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7fe fa74 	bl	8000114 <__udivsi3>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	0013      	movs	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	189b      	adds	r3, r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c3a:	e002      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f9      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c48:	e08e      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a3c      	ldr	r2, [pc, #240]	; (8001d40 <HAL_ADC_ConfigChannel+0x370>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d10e      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	045b      	lsls	r3, r3, #17
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d109      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	0452      	lsls	r2, r2, #17
 8001c64:	4313      	orrs	r3, r2
 8001c66:	4a32      	ldr	r2, [pc, #200]	; (8001d30 <HAL_ADC_ConfigChannel+0x360>)
 8001c68:	0019      	movs	r1, r3
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	f7ff fc0a 	bl	8001484 <LL_ADC_SetCommonPathInternalCh>
 8001c70:	e07a      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a33      	ldr	r2, [pc, #204]	; (8001d44 <HAL_ADC_ConfigChannel+0x374>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d000      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0x2ae>
 8001c7c:	e074      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	03db      	lsls	r3, r3, #15
 8001c84:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c86:	d000      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x2ba>
 8001c88:	e06e      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	03d2      	lsls	r2, r2, #15
 8001c90:	4313      	orrs	r3, r2
 8001c92:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <HAL_ADC_ConfigChannel+0x360>)
 8001c94:	0019      	movs	r1, r3
 8001c96:	0010      	movs	r0, r2
 8001c98:	f7ff fbf4 	bl	8001484 <LL_ADC_SetCommonPathInternalCh>
 8001c9c:	e064      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d004      	beq.n	8001cb4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cae:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HAL_ADC_ConfigChannel+0x35c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d107      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	0010      	movs	r0, r2
 8001cc0:	f7ff fc66 	bl	8001590 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	da4d      	bge.n	8001d68 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_ADC_ConfigChannel+0x360>)
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7ff fbec 	bl	80014ac <LL_ADC_GetCommonPathInternalCh>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <HAL_ADC_ConfigChannel+0x364>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d108      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_ADC_ConfigChannel+0x378>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_ADC_ConfigChannel+0x360>)
 8001cea:	0019      	movs	r1, r3
 8001cec:	0010      	movs	r0, r2
 8001cee:	f7ff fbc9 	bl	8001484 <LL_ADC_SetCommonPathInternalCh>
 8001cf2:	e039      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <HAL_ADC_ConfigChannel+0x370>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d108      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <HAL_ADC_ConfigChannel+0x37c>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_ADC_ConfigChannel+0x360>)
 8001d06:	0019      	movs	r1, r3
 8001d08:	0010      	movs	r0, r2
 8001d0a:	f7ff fbbb 	bl	8001484 <LL_ADC_SetCommonPathInternalCh>
 8001d0e:	e02b      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_ADC_ConfigChannel+0x374>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d126      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <HAL_ADC_ConfigChannel+0x380>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	4a03      	ldr	r2, [pc, #12]	; (8001d30 <HAL_ADC_ConfigChannel+0x360>)
 8001d22:	0019      	movs	r1, r3
 8001d24:	0010      	movs	r0, r2
 8001d26:	f7ff fbad 	bl	8001484 <LL_ADC_SetCommonPathInternalCh>
 8001d2a:	e01d      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x398>
 8001d2c:	80000004 	.word	0x80000004
 8001d30:	40012708 	.word	0x40012708
 8001d34:	b0001000 	.word	0xb0001000
 8001d38:	20000330 	.word	0x20000330
 8001d3c:	00030d40 	.word	0x00030d40
 8001d40:	b8004000 	.word	0xb8004000
 8001d44:	b4002000 	.word	0xb4002000
 8001d48:	ff7fffff 	.word	0xff7fffff
 8001d4c:	feffffff 	.word	0xfeffffff
 8001d50:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	2220      	movs	r2, #32
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d60:	2317      	movs	r3, #23
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2254      	movs	r2, #84	; 0x54
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d70:	2317      	movs	r3, #23
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	781b      	ldrb	r3, [r3, #0]
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b006      	add	sp, #24
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)

08001d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	0002      	movs	r2, r0
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	1dfb      	adds	r3, r7, #7
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b7f      	cmp	r3, #127	; 0x7f
 8001d92:	d809      	bhi.n	8001da8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	001a      	movs	r2, r3
 8001d9a:	231f      	movs	r3, #31
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_EnableIRQ+0x30>)
 8001da0:	2101      	movs	r1, #1
 8001da2:	4091      	lsls	r1, r2
 8001da4:	000a      	movs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	0002      	movs	r2, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	1dfb      	adds	r3, r7, #7
 8001dc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8001dc8:	d828      	bhi.n	8001e1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dca:	4a2f      	ldr	r2, [pc, #188]	; (8001e88 <__NVIC_SetPriority+0xd4>)
 8001dcc:	1dfb      	adds	r3, r7, #7
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	33c0      	adds	r3, #192	; 0xc0
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	589b      	ldr	r3, [r3, r2]
 8001dda:	1dfa      	adds	r2, r7, #7
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	0011      	movs	r1, r2
 8001de0:	2203      	movs	r2, #3
 8001de2:	400a      	ands	r2, r1
 8001de4:	00d2      	lsls	r2, r2, #3
 8001de6:	21ff      	movs	r1, #255	; 0xff
 8001de8:	4091      	lsls	r1, r2
 8001dea:	000a      	movs	r2, r1
 8001dec:	43d2      	mvns	r2, r2
 8001dee:	401a      	ands	r2, r3
 8001df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	22ff      	movs	r2, #255	; 0xff
 8001df8:	401a      	ands	r2, r3
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	2303      	movs	r3, #3
 8001e02:	4003      	ands	r3, r0
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e08:	481f      	ldr	r0, [pc, #124]	; (8001e88 <__NVIC_SetPriority+0xd4>)
 8001e0a:	1dfb      	adds	r3, r7, #7
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	430a      	orrs	r2, r1
 8001e14:	33c0      	adds	r3, #192	; 0xc0
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e1a:	e031      	b.n	8001e80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <__NVIC_SetPriority+0xd8>)
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	0019      	movs	r1, r3
 8001e24:	230f      	movs	r3, #15
 8001e26:	400b      	ands	r3, r1
 8001e28:	3b08      	subs	r3, #8
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3306      	adds	r3, #6
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	18d3      	adds	r3, r2, r3
 8001e32:	3304      	adds	r3, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	1dfa      	adds	r2, r7, #7
 8001e38:	7812      	ldrb	r2, [r2, #0]
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	400a      	ands	r2, r1
 8001e40:	00d2      	lsls	r2, r2, #3
 8001e42:	21ff      	movs	r1, #255	; 0xff
 8001e44:	4091      	lsls	r1, r2
 8001e46:	000a      	movs	r2, r1
 8001e48:	43d2      	mvns	r2, r2
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	019b      	lsls	r3, r3, #6
 8001e52:	22ff      	movs	r2, #255	; 0xff
 8001e54:	401a      	ands	r2, r3
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	4003      	ands	r3, r0
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e64:	4809      	ldr	r0, [pc, #36]	; (8001e8c <__NVIC_SetPriority+0xd8>)
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	001c      	movs	r4, r3
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	4023      	ands	r3, r4
 8001e70:	3b08      	subs	r3, #8
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	430a      	orrs	r2, r1
 8001e76:	3306      	adds	r3, #6
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	18c3      	adds	r3, r0, r3
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	601a      	str	r2, [r3, #0]
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b003      	add	sp, #12
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	1e5a      	subs	r2, r3, #1
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	045b      	lsls	r3, r3, #17
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d301      	bcc.n	8001ea8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e010      	b.n	8001eca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <SysTick_Config+0x44>)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	3a01      	subs	r2, #1
 8001eae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	425b      	negs	r3, r3
 8001eb4:	2103      	movs	r1, #3
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7ff ff7c 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <SysTick_Config+0x44>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <SysTick_Config+0x44>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	1c02      	adds	r2, r0, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b25b      	sxtb	r3, r3
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff ff5d 	bl	8001db4 <__NVIC_SetPriority>
}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b004      	add	sp, #16
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	0002      	movs	r2, r0
 8001f0a:	1dfb      	adds	r3, r7, #7
 8001f0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff ff33 	bl	8001d80 <__NVIC_EnableIRQ>
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b002      	add	sp, #8
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff ffaf 	bl	8001e90 <SysTick_Config>
 8001f32:	0003      	movs	r3, r0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e077      	b.n	800203e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a3d      	ldr	r2, [pc, #244]	; (8002048 <HAL_DMA_Init+0x10c>)
 8001f54:	4694      	mov	ip, r2
 8001f56:	4463      	add	r3, ip
 8001f58:	2114      	movs	r1, #20
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7fe f8da 	bl	8000114 <__udivsi3>
 8001f60:	0003      	movs	r3, r0
 8001f62:	009a      	lsls	r2, r3, #2
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2225      	movs	r2, #37	; 0x25
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4934      	ldr	r1, [pc, #208]	; (800204c <HAL_DMA_Init+0x110>)
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6819      	ldr	r1, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f000 f9c7 	bl	800234c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	01db      	lsls	r3, r3, #7
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d102      	bne.n	8001fd0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	213f      	movs	r1, #63	; 0x3f
 8001fda:	400a      	ands	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fe6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d011      	beq.n	8002014 <HAL_DMA_Init+0xd8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d80d      	bhi.n	8002014 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 f9d2 	bl	80023a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	e008      	b.n	8002026 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2225      	movs	r2, #37	; 0x25
 8002030:	2101      	movs	r1, #1
 8002032:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2224      	movs	r2, #36	; 0x24
 8002038:	2100      	movs	r1, #0
 800203a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	bffdfff8 	.word	0xbffdfff8
 800204c:	ffff800f 	.word	0xffff800f

08002050 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e050      	b.n	8002104 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2225      	movs	r2, #37	; 0x25
 8002066:	5c9b      	ldrb	r3, [r3, r2]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d008      	beq.n	8002080 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2204      	movs	r2, #4
 8002072:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	2100      	movs	r1, #0
 800207a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e041      	b.n	8002104 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	210e      	movs	r1, #14
 800208c:	438a      	bics	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	491c      	ldr	r1, [pc, #112]	; (800210c <HAL_DMA_Abort+0xbc>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2101      	movs	r1, #1
 80020ac:	438a      	bics	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_DMA_Abort+0xc0>)
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	221c      	movs	r2, #28
 80020ba:	4013      	ands	r3, r2
 80020bc:	2201      	movs	r2, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_DMA_Abort+0xc0>)
 80020c2:	430a      	orrs	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020ce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00c      	beq.n	80020f2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	490a      	ldr	r1, [pc, #40]	; (800210c <HAL_DMA_Abort+0xbc>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80020f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2225      	movs	r2, #37	; 0x25
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2224      	movs	r2, #36	; 0x24
 80020fe:	2100      	movs	r1, #0
 8002100:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}
 800210c:	fffffeff 	.word	0xfffffeff
 8002110:	40020000 	.word	0x40020000

08002114 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800211c:	210f      	movs	r1, #15
 800211e:	187b      	adds	r3, r7, r1
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2225      	movs	r2, #37	; 0x25
 8002128:	5c9b      	ldrb	r3, [r3, r2]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d006      	beq.n	800213e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2204      	movs	r2, #4
 8002134:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002136:	187b      	adds	r3, r7, r1
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
 800213c:	e049      	b.n	80021d2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	210e      	movs	r1, #14
 800214a:	438a      	bics	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	438a      	bics	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	491d      	ldr	r1, [pc, #116]	; (80021e0 <HAL_DMA_Abort_IT+0xcc>)
 800216a:	400a      	ands	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_DMA_Abort_IT+0xd0>)
 8002170:	6859      	ldr	r1, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	221c      	movs	r2, #28
 8002178:	4013      	ands	r3, r2
 800217a:	2201      	movs	r2, #1
 800217c:	409a      	lsls	r2, r3
 800217e:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_DMA_Abort_IT+0xd0>)
 8002180:	430a      	orrs	r2, r1
 8002182:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800218c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00c      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_DMA_Abort_IT+0xcc>)
 80021a2:	400a      	ands	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80021ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2225      	movs	r2, #37	; 0x25
 80021b4:	2101      	movs	r1, #1
 80021b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2224      	movs	r2, #36	; 0x24
 80021bc:	2100      	movs	r1, #0
 80021be:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	0010      	movs	r0, r2
 80021d0:	4798      	blx	r3
    }
  }
  return status;
 80021d2:	230f      	movs	r3, #15
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	781b      	ldrb	r3, [r3, #0]
}
 80021d8:	0018      	movs	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	b004      	add	sp, #16
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	fffffeff 	.word	0xfffffeff
 80021e4:	40020000 	.word	0x40020000

080021e8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80021f0:	4b55      	ldr	r3, [pc, #340]	; (8002348 <HAL_DMA_IRQHandler+0x160>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	221c      	movs	r2, #28
 8002204:	4013      	ands	r3, r2
 8002206:	2204      	movs	r2, #4
 8002208:	409a      	lsls	r2, r3
 800220a:	0013      	movs	r3, r2
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	d027      	beq.n	8002262 <HAL_DMA_IRQHandler+0x7a>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2204      	movs	r2, #4
 8002216:	4013      	ands	r3, r2
 8002218:	d023      	beq.n	8002262 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2220      	movs	r2, #32
 8002222:	4013      	ands	r3, r2
 8002224:	d107      	bne.n	8002236 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2104      	movs	r1, #4
 8002232:	438a      	bics	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002236:	4b44      	ldr	r3, [pc, #272]	; (8002348 <HAL_DMA_IRQHandler+0x160>)
 8002238:	6859      	ldr	r1, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	221c      	movs	r2, #28
 8002240:	4013      	ands	r3, r2
 8002242:	2204      	movs	r2, #4
 8002244:	409a      	lsls	r2, r3
 8002246:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_DMA_IRQHandler+0x160>)
 8002248:	430a      	orrs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	2b00      	cmp	r3, #0
 8002252:	d100      	bne.n	8002256 <HAL_DMA_IRQHandler+0x6e>
 8002254:	e073      	b.n	800233e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	0010      	movs	r0, r2
 800225e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002260:	e06d      	b.n	800233e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	221c      	movs	r2, #28
 8002268:	4013      	ands	r3, r2
 800226a:	2202      	movs	r2, #2
 800226c:	409a      	lsls	r2, r3
 800226e:	0013      	movs	r3, r2
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	d02e      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xec>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2202      	movs	r2, #2
 800227a:	4013      	ands	r3, r2
 800227c:	d02a      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2220      	movs	r2, #32
 8002286:	4013      	ands	r3, r2
 8002288:	d10b      	bne.n	80022a2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	210a      	movs	r1, #10
 8002296:	438a      	bics	r2, r1
 8002298:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2225      	movs	r2, #37	; 0x25
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_DMA_IRQHandler+0x160>)
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	221c      	movs	r2, #28
 80022ac:	4013      	ands	r3, r2
 80022ae:	2202      	movs	r2, #2
 80022b0:	409a      	lsls	r2, r3
 80022b2:	4b25      	ldr	r3, [pc, #148]	; (8002348 <HAL_DMA_IRQHandler+0x160>)
 80022b4:	430a      	orrs	r2, r1
 80022b6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2224      	movs	r2, #36	; 0x24
 80022bc:	2100      	movs	r1, #0
 80022be:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d03a      	beq.n	800233e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	0010      	movs	r0, r2
 80022d0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80022d2:	e034      	b.n	800233e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	221c      	movs	r2, #28
 80022da:	4013      	ands	r3, r2
 80022dc:	2208      	movs	r2, #8
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	d02b      	beq.n	8002340 <HAL_DMA_IRQHandler+0x158>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2208      	movs	r2, #8
 80022ec:	4013      	ands	r3, r2
 80022ee:	d027      	beq.n	8002340 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	210e      	movs	r1, #14
 80022fc:	438a      	bics	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_DMA_IRQHandler+0x160>)
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	221c      	movs	r2, #28
 800230a:	4013      	ands	r3, r2
 800230c:	2201      	movs	r2, #1
 800230e:	409a      	lsls	r2, r3
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_DMA_IRQHandler+0x160>)
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2225      	movs	r2, #37	; 0x25
 8002320:	2101      	movs	r1, #1
 8002322:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	2100      	movs	r1, #0
 800232a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	0010      	movs	r0, r2
 800233c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46c0      	nop			; (mov r8, r8)
}
 8002342:	46bd      	mov	sp, r7
 8002344:	b004      	add	sp, #16
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40020000 	.word	0x40020000

0800234c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800235c:	4694      	mov	ip, r2
 800235e:	4463      	add	r3, ip
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	001a      	movs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	001a      	movs	r2, r3
 800236e:	23ff      	movs	r3, #255	; 0xff
 8002370:	4013      	ands	r3, r2
 8002372:	3b08      	subs	r3, #8
 8002374:	2114      	movs	r1, #20
 8002376:	0018      	movs	r0, r3
 8002378:	f7fd fecc 	bl	8000114 <__udivsi3>
 800237c:	0003      	movs	r3, r0
 800237e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002384:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	221f      	movs	r2, #31
 800238a:	4013      	ands	r3, r2
 800238c:	2201      	movs	r2, #1
 800238e:	409a      	lsls	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b004      	add	sp, #16
 800239a:	bd80      	pop	{r7, pc}
 800239c:	10008200 	.word	0x10008200
 80023a0:	40020880 	.word	0x40020880

080023a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	223f      	movs	r2, #63	; 0x3f
 80023b2:	4013      	ands	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80023ba:	4694      	mov	ip, r2
 80023bc:	4463      	add	r3, ip
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	001a      	movs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	4013      	ands	r3, r2
 80023d4:	2201      	movs	r2, #1
 80023d6:	409a      	lsls	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	659a      	str	r2, [r3, #88]	; 0x58
}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b004      	add	sp, #16
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	1000823f 	.word	0x1000823f
 80023e8:	40020940 	.word	0x40020940

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fa:	e147      	b.n	800268c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4091      	lsls	r1, r2
 8002406:	000a      	movs	r2, r1
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d100      	bne.n	8002414 <HAL_GPIO_Init+0x28>
 8002412:	e138      	b.n	8002686 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2203      	movs	r2, #3
 800241a:	4013      	ands	r3, r2
 800241c:	2b01      	cmp	r3, #1
 800241e:	d005      	beq.n	800242c <HAL_GPIO_Init+0x40>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2203      	movs	r2, #3
 8002426:	4013      	ands	r3, r2
 8002428:	2b02      	cmp	r3, #2
 800242a:	d130      	bne.n	800248e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	409a      	lsls	r2, r3
 800243a:	0013      	movs	r3, r2
 800243c:	43da      	mvns	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	409a      	lsls	r2, r3
 800244e:	0013      	movs	r3, r2
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002462:	2201      	movs	r2, #1
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
 8002468:	0013      	movs	r3, r2
 800246a:	43da      	mvns	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	2201      	movs	r2, #1
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
 8002480:	0013      	movs	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2203      	movs	r2, #3
 8002494:	4013      	ands	r3, r2
 8002496:	2b03      	cmp	r3, #3
 8002498:	d017      	beq.n	80024ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	409a      	lsls	r2, r3
 80024a8:	0013      	movs	r3, r2
 80024aa:	43da      	mvns	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	409a      	lsls	r2, r3
 80024bc:	0013      	movs	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d123      	bne.n	800251e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	08da      	lsrs	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3208      	adds	r2, #8
 80024de:	0092      	lsls	r2, r2, #2
 80024e0:	58d3      	ldr	r3, [r2, r3]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2207      	movs	r2, #7
 80024e8:	4013      	ands	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	409a      	lsls	r2, r3
 80024f0:	0013      	movs	r3, r2
 80024f2:	43da      	mvns	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2107      	movs	r1, #7
 8002502:	400b      	ands	r3, r1
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	409a      	lsls	r2, r3
 8002508:	0013      	movs	r3, r2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	0092      	lsls	r2, r2, #2
 800251a:	6939      	ldr	r1, [r7, #16]
 800251c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	409a      	lsls	r2, r3
 800252c:	0013      	movs	r3, r2
 800252e:	43da      	mvns	r2, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2203      	movs	r2, #3
 800253c:	401a      	ands	r2, r3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	0013      	movs	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	23c0      	movs	r3, #192	; 0xc0
 8002558:	029b      	lsls	r3, r3, #10
 800255a:	4013      	ands	r3, r2
 800255c:	d100      	bne.n	8002560 <HAL_GPIO_Init+0x174>
 800255e:	e092      	b.n	8002686 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002560:	4a50      	ldr	r2, [pc, #320]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	3318      	adds	r3, #24
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	589b      	ldr	r3, [r3, r2]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2203      	movs	r2, #3
 8002572:	4013      	ands	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	220f      	movs	r2, #15
 8002578:	409a      	lsls	r2, r3
 800257a:	0013      	movs	r3, r2
 800257c:	43da      	mvns	r2, r3
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	23a0      	movs	r3, #160	; 0xa0
 8002588:	05db      	lsls	r3, r3, #23
 800258a:	429a      	cmp	r2, r3
 800258c:	d013      	beq.n	80025b6 <HAL_GPIO_Init+0x1ca>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a45      	ldr	r2, [pc, #276]	; (80026a8 <HAL_GPIO_Init+0x2bc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00d      	beq.n	80025b2 <HAL_GPIO_Init+0x1c6>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a44      	ldr	r2, [pc, #272]	; (80026ac <HAL_GPIO_Init+0x2c0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_GPIO_Init+0x1c2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a43      	ldr	r2, [pc, #268]	; (80026b0 <HAL_GPIO_Init+0x2c4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <HAL_GPIO_Init+0x1be>
 80025a6:	2303      	movs	r3, #3
 80025a8:	e006      	b.n	80025b8 <HAL_GPIO_Init+0x1cc>
 80025aa:	2305      	movs	r3, #5
 80025ac:	e004      	b.n	80025b8 <HAL_GPIO_Init+0x1cc>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e002      	b.n	80025b8 <HAL_GPIO_Init+0x1cc>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_GPIO_Init+0x1cc>
 80025b6:	2300      	movs	r3, #0
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	2103      	movs	r1, #3
 80025bc:	400a      	ands	r2, r1
 80025be:	00d2      	lsls	r2, r2, #3
 80025c0:	4093      	lsls	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80025c8:	4936      	ldr	r1, [pc, #216]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	3318      	adds	r3, #24
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025d6:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	43da      	mvns	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4013      	ands	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	035b      	lsls	r3, r3, #13
 80025ee:	4013      	ands	r3, r2
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025fa:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002600:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	43da      	mvns	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	039b      	lsls	r3, r3, #14
 8002618:	4013      	ands	r3, r2
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002624:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800262a:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 800262c:	2384      	movs	r3, #132	; 0x84
 800262e:	58d3      	ldr	r3, [r2, r3]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	43da      	mvns	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	029b      	lsls	r3, r3, #10
 8002644:	4013      	ands	r3, r2
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002650:	4914      	ldr	r1, [pc, #80]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 8002652:	2284      	movs	r2, #132	; 0x84
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002658:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	58d3      	ldr	r3, [r2, r3]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43da      	mvns	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	025b      	lsls	r3, r3, #9
 8002672:	4013      	ands	r3, r2
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800267e:	4909      	ldr	r1, [pc, #36]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	40da      	lsrs	r2, r3
 8002694:	1e13      	subs	r3, r2, #0
 8002696:	d000      	beq.n	800269a <HAL_GPIO_Init+0x2ae>
 8002698:	e6b0      	b.n	80023fc <HAL_GPIO_Init+0x10>
  }
}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b006      	add	sp, #24
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021800 	.word	0x40021800
 80026a8:	50000400 	.word	0x50000400
 80026ac:	50000800 	.word	0x50000800
 80026b0:	50000c00 	.word	0x50000c00

080026b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	0008      	movs	r0, r1
 80026be:	0011      	movs	r1, r2
 80026c0:	1cbb      	adds	r3, r7, #2
 80026c2:	1c02      	adds	r2, r0, #0
 80026c4:	801a      	strh	r2, [r3, #0]
 80026c6:	1c7b      	adds	r3, r7, #1
 80026c8:	1c0a      	adds	r2, r1, #0
 80026ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026cc:	1c7b      	adds	r3, r7, #1
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d004      	beq.n	80026de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026d4:	1cbb      	adds	r3, r7, #2
 80026d6:	881a      	ldrh	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026dc:	e003      	b.n	80026e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026de:	1cbb      	adds	r3, r7, #2
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a19      	ldr	r2, [pc, #100]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80026fe:	4013      	ands	r3, r2
 8002700:	0019      	movs	r1, r3
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	430a      	orrs	r2, r1
 8002708:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d11f      	bne.n	8002754 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	0013      	movs	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	189b      	adds	r3, r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4912      	ldr	r1, [pc, #72]	; (800276c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002722:	0018      	movs	r0, r3
 8002724:	f7fd fcf6 	bl	8000114 <__udivsi3>
 8002728:	0003      	movs	r3, r0
 800272a:	3301      	adds	r3, #1
 800272c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800272e:	e008      	b.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3b01      	subs	r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e001      	b.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e009      	b.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	401a      	ands	r2, r3
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	429a      	cmp	r2, r3
 8002752:	d0ed      	beq.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	0018      	movs	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	b004      	add	sp, #16
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	40007000 	.word	0x40007000
 8002764:	fffff9ff 	.word	0xfffff9ff
 8002768:	20000330 	.word	0x20000330
 800276c:	000f4240 	.word	0x000f4240

08002770 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	23e0      	movs	r3, #224	; 0xe0
 800277a:	01db      	lsls	r3, r3, #7
 800277c:	4013      	ands	r3, r2
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000

08002788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e2f3      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2201      	movs	r2, #1
 80027a0:	4013      	ands	r3, r2
 80027a2:	d100      	bne.n	80027a6 <HAL_RCC_OscConfig+0x1e>
 80027a4:	e07c      	b.n	80028a0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a6:	4bc3      	ldr	r3, [pc, #780]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2238      	movs	r2, #56	; 0x38
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b0:	4bc0      	ldr	r3, [pc, #768]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2203      	movs	r2, #3
 80027b6:	4013      	ands	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d102      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3e>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d002      	beq.n	80027cc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d10b      	bne.n	80027e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	4bb9      	ldr	r3, [pc, #740]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	029b      	lsls	r3, r3, #10
 80027d4:	4013      	ands	r3, r2
 80027d6:	d062      	beq.n	800289e <HAL_RCC_OscConfig+0x116>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d15e      	bne.n	800289e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e2ce      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	025b      	lsls	r3, r3, #9
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x78>
 80027f0:	4bb0      	ldr	r3, [pc, #704]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4baf      	ldr	r3, [pc, #700]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	0249      	lsls	r1, r1, #9
 80027fa:	430a      	orrs	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e020      	b.n	8002842 <HAL_RCC_OscConfig+0xba>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	23a0      	movs	r3, #160	; 0xa0
 8002806:	02db      	lsls	r3, r3, #11
 8002808:	429a      	cmp	r2, r3
 800280a:	d10e      	bne.n	800282a <HAL_RCC_OscConfig+0xa2>
 800280c:	4ba9      	ldr	r3, [pc, #676]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4ba8      	ldr	r3, [pc, #672]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	02c9      	lsls	r1, r1, #11
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	4ba6      	ldr	r3, [pc, #664]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4ba5      	ldr	r3, [pc, #660]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002820:	2180      	movs	r1, #128	; 0x80
 8002822:	0249      	lsls	r1, r1, #9
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e00b      	b.n	8002842 <HAL_RCC_OscConfig+0xba>
 800282a:	4ba2      	ldr	r3, [pc, #648]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4ba1      	ldr	r3, [pc, #644]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002830:	49a1      	ldr	r1, [pc, #644]	; (8002ab8 <HAL_RCC_OscConfig+0x330>)
 8002832:	400a      	ands	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	4b9f      	ldr	r3, [pc, #636]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b9e      	ldr	r3, [pc, #632]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 800283c:	499f      	ldr	r1, [pc, #636]	; (8002abc <HAL_RCC_OscConfig+0x334>)
 800283e:	400a      	ands	r2, r1
 8002840:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d014      	beq.n	8002874 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe fe11 	bl	8001470 <HAL_GetTick>
 800284e:	0003      	movs	r3, r0
 8002850:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe fe0c 	bl	8001470 <HAL_GetTick>
 8002858:	0002      	movs	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e28d      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002866:	4b93      	ldr	r3, [pc, #588]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	029b      	lsls	r3, r3, #10
 800286e:	4013      	ands	r3, r2
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xcc>
 8002872:	e015      	b.n	80028a0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fdfc 	bl	8001470 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287e:	f7fe fdf7 	bl	8001470 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b64      	cmp	r3, #100	; 0x64
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e278      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002890:	4b88      	ldr	r3, [pc, #544]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	029b      	lsls	r3, r3, #10
 8002898:	4013      	ands	r3, r2
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0xf6>
 800289c:	e000      	b.n	80028a0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2202      	movs	r2, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d100      	bne.n	80028ac <HAL_RCC_OscConfig+0x124>
 80028aa:	e099      	b.n	80029e0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ac:	4b81      	ldr	r3, [pc, #516]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2238      	movs	r2, #56	; 0x38
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b6:	4b7f      	ldr	r3, [pc, #508]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2203      	movs	r2, #3
 80028bc:	4013      	ands	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d102      	bne.n	80028cc <HAL_RCC_OscConfig+0x144>
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d002      	beq.n	80028d2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d135      	bne.n	800293e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d2:	4b78      	ldr	r3, [pc, #480]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4013      	ands	r3, r2
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x162>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e24b      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ea:	4b72      	ldr	r3, [pc, #456]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4a74      	ldr	r2, [pc, #464]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	021a      	lsls	r2, r3, #8
 80028fa:	4b6e      	ldr	r3, [pc, #440]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d112      	bne.n	800292c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002906:	4b6b      	ldr	r3, [pc, #428]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6e      	ldr	r2, [pc, #440]	; (8002ac4 <HAL_RCC_OscConfig+0x33c>)
 800290c:	4013      	ands	r3, r2
 800290e:	0019      	movs	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	4b67      	ldr	r3, [pc, #412]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002916:	430a      	orrs	r2, r1
 8002918:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800291a:	4b66      	ldr	r3, [pc, #408]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0adb      	lsrs	r3, r3, #11
 8002920:	2207      	movs	r2, #7
 8002922:	4013      	ands	r3, r2
 8002924:	4a68      	ldr	r2, [pc, #416]	; (8002ac8 <HAL_RCC_OscConfig+0x340>)
 8002926:	40da      	lsrs	r2, r3
 8002928:	4b68      	ldr	r3, [pc, #416]	; (8002acc <HAL_RCC_OscConfig+0x344>)
 800292a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_OscConfig+0x348>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0018      	movs	r0, r3
 8002932:	f7fe fd41 	bl	80013b8 <HAL_InitTick>
 8002936:	1e03      	subs	r3, r0, #0
 8002938:	d051      	beq.n	80029de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e221      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d030      	beq.n	80029a8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002946:	4b5b      	ldr	r3, [pc, #364]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a5e      	ldr	r2, [pc, #376]	; (8002ac4 <HAL_RCC_OscConfig+0x33c>)
 800294c:	4013      	ands	r3, r2
 800294e:	0019      	movs	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	4b57      	ldr	r3, [pc, #348]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800295a:	4b56      	ldr	r3, [pc, #344]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b55      	ldr	r3, [pc, #340]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	0049      	lsls	r1, r1, #1
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe fd82 	bl	8001470 <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002972:	f7fe fd7d 	bl	8001470 <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e1fe      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002984:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4013      	ands	r3, r2
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002996:	4013      	ands	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	021a      	lsls	r2, r3, #8
 80029a0:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	e01b      	b.n	80029e0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80029a8:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80029ae:	4949      	ldr	r1, [pc, #292]	; (8002ad4 <HAL_RCC_OscConfig+0x34c>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fd5c 	bl	8001470 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029be:	f7fe fd57 	bl	8001470 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e1d8      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d0:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4013      	ands	r3, r2
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x236>
 80029dc:	e000      	b.n	80029e0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2208      	movs	r2, #8
 80029e6:	4013      	ands	r3, r2
 80029e8:	d047      	beq.n	8002a7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80029ea:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2238      	movs	r2, #56	; 0x38
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b18      	cmp	r3, #24
 80029f4:	d10a      	bne.n	8002a0c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80029f6:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 80029f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fa:	2202      	movs	r2, #2
 80029fc:	4013      	ands	r3, r2
 80029fe:	d03c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x2f2>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d138      	bne.n	8002a7a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e1ba      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d019      	beq.n	8002a48 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002a16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a18:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fd26 	bl	8001470 <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2a:	f7fe fd21 	bl	8001470 <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e1a2      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a40:	2202      	movs	r2, #2
 8002a42:	4013      	ands	r3, r2
 8002a44:	d0f1      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2a2>
 8002a46:	e018      	b.n	8002a7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002a4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002a4e:	2101      	movs	r1, #1
 8002a50:	438a      	bics	r2, r1
 8002a52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fd0c 	bl	8001470 <HAL_GetTick>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fd07 	bl	8001470 <HAL_GetTick>
 8002a62:	0002      	movs	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e188      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a74:	2202      	movs	r2, #2
 8002a76:	4013      	ands	r3, r2
 8002a78:	d1f1      	bne.n	8002a5e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2204      	movs	r2, #4
 8002a80:	4013      	ands	r3, r2
 8002a82:	d100      	bne.n	8002a86 <HAL_RCC_OscConfig+0x2fe>
 8002a84:	e0c6      	b.n	8002c14 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a86:	231f      	movs	r3, #31
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2238      	movs	r2, #56	; 0x38
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d11e      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_RCC_OscConfig+0x32c>)
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d100      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x31e>
 8002aa4:	e0b6      	b.n	8002c14 <HAL_RCC_OscConfig+0x48c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d000      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x328>
 8002aae:	e0b1      	b.n	8002c14 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e166      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	fffeffff 	.word	0xfffeffff
 8002abc:	fffbffff 	.word	0xfffbffff
 8002ac0:	ffff80ff 	.word	0xffff80ff
 8002ac4:	ffffc7ff 	.word	0xffffc7ff
 8002ac8:	00f42400 	.word	0x00f42400
 8002acc:	20000330 	.word	0x20000330
 8002ad0:	20000334 	.word	0x20000334
 8002ad4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ad8:	4bac      	ldr	r3, [pc, #688]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	055b      	lsls	r3, r3, #21
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x360>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x362>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d011      	beq.n	8002b12 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	4ba7      	ldr	r3, [pc, #668]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002af2:	4ba6      	ldr	r3, [pc, #664]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	0549      	lsls	r1, r1, #21
 8002af8:	430a      	orrs	r2, r1
 8002afa:	63da      	str	r2, [r3, #60]	; 0x3c
 8002afc:	4ba3      	ldr	r3, [pc, #652]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	055b      	lsls	r3, r3, #21
 8002b04:	4013      	ands	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002b0a:	231f      	movs	r3, #31
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b12:	4b9f      	ldr	r3, [pc, #636]	; (8002d90 <HAL_RCC_OscConfig+0x608>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d11a      	bne.n	8002b54 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b1e:	4b9c      	ldr	r3, [pc, #624]	; (8002d90 <HAL_RCC_OscConfig+0x608>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b9b      	ldr	r3, [pc, #620]	; (8002d90 <HAL_RCC_OscConfig+0x608>)
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	0049      	lsls	r1, r1, #1
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fca0 	bl	8001470 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7fe fc9b 	bl	8001470 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e11c      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b48:	4b91      	ldr	r3, [pc, #580]	; (8002d90 <HAL_RCC_OscConfig+0x608>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3e2>
 8002b5c:	4b8b      	ldr	r3, [pc, #556]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002b5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b60:	4b8a      	ldr	r3, [pc, #552]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002b62:	2101      	movs	r1, #1
 8002b64:	430a      	orrs	r2, r1
 8002b66:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b68:	e01c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x41c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x404>
 8002b72:	4b86      	ldr	r3, [pc, #536]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002b74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b76:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002b78:	2104      	movs	r1, #4
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b7e:	4b83      	ldr	r3, [pc, #524]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b82:	4b82      	ldr	r3, [pc, #520]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	430a      	orrs	r2, r1
 8002b88:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x41c>
 8002b8c:	4b7f      	ldr	r3, [pc, #508]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002b8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b90:	4b7e      	ldr	r3, [pc, #504]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002b92:	2101      	movs	r1, #1
 8002b94:	438a      	bics	r2, r1
 8002b96:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b98:	4b7c      	ldr	r3, [pc, #496]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b9c:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002b9e:	2104      	movs	r1, #4
 8002ba0:	438a      	bics	r2, r1
 8002ba2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d014      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fc60 	bl	8001470 <HAL_GetTick>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb4:	e009      	b.n	8002bca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe fc5b 	bl	8001470 <HAL_GetTick>
 8002bba:	0002      	movs	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	4a74      	ldr	r2, [pc, #464]	; (8002d94 <HAL_RCC_OscConfig+0x60c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0db      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bca:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	2202      	movs	r2, #2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x42e>
 8002bd4:	e013      	b.n	8002bfe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fc4b 	bl	8001470 <HAL_GetTick>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bde:	e009      	b.n	8002bf4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe fc46 	bl	8001470 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	4a6a      	ldr	r2, [pc, #424]	; (8002d94 <HAL_RCC_OscConfig+0x60c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e0c6      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf4:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002bfe:	231f      	movs	r3, #31
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	4b60      	ldr	r3, [pc, #384]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c0c:	4b5f      	ldr	r3, [pc, #380]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002c0e:	4962      	ldr	r1, [pc, #392]	; (8002d98 <HAL_RCC_OscConfig+0x610>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d100      	bne.n	8002c1e <HAL_RCC_OscConfig+0x496>
 8002c1c:	e0b0      	b.n	8002d80 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c1e:	4b5b      	ldr	r3, [pc, #364]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2238      	movs	r2, #56	; 0x38
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d100      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4a4>
 8002c2a:	e078      	b.n	8002d1e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d153      	bne.n	8002cdc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b55      	ldr	r3, [pc, #340]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b54      	ldr	r3, [pc, #336]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002c3a:	4958      	ldr	r1, [pc, #352]	; (8002d9c <HAL_RCC_OscConfig+0x614>)
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fc16 	bl	8001470 <HAL_GetTick>
 8002c44:	0003      	movs	r3, r0
 8002c46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7fe fc11 	bl	8001470 <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e092      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5c:	4b4b      	ldr	r3, [pc, #300]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	049b      	lsls	r3, r3, #18
 8002c64:	4013      	ands	r3, r2
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c68:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a4c      	ldr	r2, [pc, #304]	; (8002da0 <HAL_RCC_OscConfig+0x618>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1a      	ldr	r2, [r3, #32]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002c92:	430a      	orrs	r2, r1
 8002c94:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b3c      	ldr	r3, [pc, #240]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002c9c:	2180      	movs	r1, #128	; 0x80
 8002c9e:	0449      	lsls	r1, r1, #17
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ca4:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	0549      	lsls	r1, r1, #21
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe fbdd 	bl	8001470 <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fbd8 	bl	8001470 <HAL_GetTick>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e059      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	049b      	lsls	r3, r3, #18
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x534>
 8002cda:	e051      	b.n	8002d80 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002ce2:	492e      	ldr	r1, [pc, #184]	; (8002d9c <HAL_RCC_OscConfig+0x614>)
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fbc2 	bl	8001470 <HAL_GetTick>
 8002cec:	0003      	movs	r3, r0
 8002cee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7fe fbbd 	bl	8001470 <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e03e      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d04:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	049b      	lsls	r3, r3, #18
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002d10:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002d16:	4923      	ldr	r1, [pc, #140]	; (8002da4 <HAL_RCC_OscConfig+0x61c>)
 8002d18:	400a      	ands	r2, r1
 8002d1a:	60da      	str	r2, [r3, #12]
 8002d1c:	e030      	b.n	8002d80 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e02b      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_RCC_OscConfig+0x604>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2203      	movs	r2, #3
 8002d34:	401a      	ands	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d11e      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2270      	movs	r2, #112	; 0x70
 8002d42:	401a      	ands	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d117      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	23fe      	movs	r3, #254	; 0xfe
 8002d50:	01db      	lsls	r3, r3, #7
 8002d52:	401a      	ands	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d10e      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	23f8      	movs	r3, #248	; 0xf8
 8002d62:	039b      	lsls	r3, r3, #14
 8002d64:	401a      	ands	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	0f5b      	lsrs	r3, r3, #29
 8002d72:	075a      	lsls	r2, r3, #29
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b008      	add	sp, #32
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40007000 	.word	0x40007000
 8002d94:	00001388 	.word	0x00001388
 8002d98:	efffffff 	.word	0xefffffff
 8002d9c:	feffffff 	.word	0xfeffffff
 8002da0:	1fc1808c 	.word	0x1fc1808c
 8002da4:	effefffc 	.word	0xeffefffc

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0e9      	b.n	8002f90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d91e      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b73      	ldr	r3, [pc, #460]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2207      	movs	r2, #7
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe fb48 	bl	8001470 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002de4:	e009      	b.n	8002dfa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de6:	f7fe fb43 	bl	8001470 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	4a6a      	ldr	r2, [pc, #424]	; (8002f9c <HAL_RCC_ClockConfig+0x1f4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0ca      	b.n	8002f90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dfa:	4b67      	ldr	r3, [pc, #412]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2207      	movs	r2, #7
 8002e00:	4013      	ands	r3, r2
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d1ee      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d015      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2204      	movs	r2, #4
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d006      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e1c:	4b60      	ldr	r3, [pc, #384]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	4b5f      	ldr	r3, [pc, #380]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e22:	21e0      	movs	r1, #224	; 0xe0
 8002e24:	01c9      	lsls	r1, r1, #7
 8002e26:	430a      	orrs	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e2a:	4b5d      	ldr	r3, [pc, #372]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4a5d      	ldr	r2, [pc, #372]	; (8002fa4 <HAL_RCC_ClockConfig+0x1fc>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2201      	movs	r2, #1
 8002e44:	4013      	ands	r3, r2
 8002e46:	d057      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e50:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	029b      	lsls	r3, r3, #10
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d12b      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e097      	b.n	8002f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e68:	4b4d      	ldr	r3, [pc, #308]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	049b      	lsls	r3, r3, #18
 8002e70:	4013      	ands	r3, r2
 8002e72:	d11f      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e08b      	b.n	8002f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e80:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d113      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e07f      	b.n	8002f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e98:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d108      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e074      	b.n	8002f90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea6:	4b3e      	ldr	r3, [pc, #248]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	2202      	movs	r2, #2
 8002eac:	4013      	ands	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e06d      	b.n	8002f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb4:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2207      	movs	r2, #7
 8002eba:	4393      	bics	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec8:	f7fe fad2 	bl	8001470 <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed0:	e009      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed2:	f7fe facd 	bl	8001470 <HAL_GetTick>
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <HAL_RCC_ClockConfig+0x1f4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e054      	b.n	8002f90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2238      	movs	r2, #56	; 0x38
 8002eec:	401a      	ands	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d1ec      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2207      	movs	r2, #7
 8002efe:	4013      	ands	r3, r2
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d21e      	bcs.n	8002f44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	4393      	bics	r3, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f18:	f7fe faaa 	bl	8001470 <HAL_GetTick>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f20:	e009      	b.n	8002f36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f22:	f7fe faa5 	bl	8001470 <HAL_GetTick>
 8002f26:	0002      	movs	r2, r0
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <HAL_RCC_ClockConfig+0x1f4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e02c      	b.n	8002f90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f36:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2207      	movs	r2, #7
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1ee      	bne.n	8002f22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d009      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <HAL_RCC_ClockConfig+0x200>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f62:	f000 f829 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8002f66:	0001      	movs	r1, r0
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	220f      	movs	r2, #15
 8002f70:	401a      	ands	r2, r3
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_RCC_ClockConfig+0x204>)
 8002f74:	0092      	lsls	r2, r2, #2
 8002f76:	58d3      	ldr	r3, [r2, r3]
 8002f78:	221f      	movs	r2, #31
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	000a      	movs	r2, r1
 8002f7e:	40da      	lsrs	r2, r3
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_ClockConfig+0x208>)
 8002f82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x20c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7fe fa15 	bl	80013b8 <HAL_InitTick>
 8002f8e:	0003      	movs	r3, r0
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b004      	add	sp, #16
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40022000 	.word	0x40022000
 8002f9c:	00001388 	.word	0x00001388
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	fffff0ff 	.word	0xfffff0ff
 8002fa8:	ffff8fff 	.word	0xffff8fff
 8002fac:	08006054 	.word	0x08006054
 8002fb0:	20000330 	.word	0x20000330
 8002fb4:	20000334 	.word	0x20000334

08002fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fbe:	4b3c      	ldr	r3, [pc, #240]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2238      	movs	r2, #56	; 0x38
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d10f      	bne.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002fc8:	4b39      	ldr	r3, [pc, #228]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0adb      	lsrs	r3, r3, #11
 8002fce:	2207      	movs	r2, #7
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	0013      	movs	r3, r2
 8002fd8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002fda:	6839      	ldr	r1, [r7, #0]
 8002fdc:	4835      	ldr	r0, [pc, #212]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fde:	f7fd f899 	bl	8000114 <__udivsi3>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	e05d      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2238      	movs	r2, #56	; 0x38
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d102      	bne.n	8002ffa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ff4:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	e054      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ffa:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2238      	movs	r2, #56	; 0x38
 8003000:	4013      	ands	r3, r2
 8003002:	2b10      	cmp	r3, #16
 8003004:	d138      	bne.n	8003078 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003006:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2203      	movs	r2, #3
 800300c:	4013      	ands	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003010:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	2207      	movs	r2, #7
 8003018:	4013      	ands	r3, r2
 800301a:	3301      	adds	r3, #1
 800301c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d10d      	bne.n	8003040 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	4824      	ldr	r0, [pc, #144]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003028:	f7fd f874 	bl	8000114 <__udivsi3>
 800302c:	0003      	movs	r3, r0
 800302e:	0019      	movs	r1, r3
 8003030:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	227f      	movs	r2, #127	; 0x7f
 8003038:	4013      	ands	r3, r2
 800303a:	434b      	muls	r3, r1
 800303c:	617b      	str	r3, [r7, #20]
        break;
 800303e:	e00d      	b.n	800305c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	481c      	ldr	r0, [pc, #112]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003044:	f7fd f866 	bl	8000114 <__udivsi3>
 8003048:	0003      	movs	r3, r0
 800304a:	0019      	movs	r1, r3
 800304c:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	227f      	movs	r2, #127	; 0x7f
 8003054:	4013      	ands	r3, r2
 8003056:	434b      	muls	r3, r1
 8003058:	617b      	str	r3, [r7, #20]
        break;
 800305a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800305c:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0f5b      	lsrs	r3, r3, #29
 8003062:	2207      	movs	r2, #7
 8003064:	4013      	ands	r3, r2
 8003066:	3301      	adds	r3, #1
 8003068:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	6978      	ldr	r0, [r7, #20]
 800306e:	f7fd f851 	bl	8000114 <__udivsi3>
 8003072:	0003      	movs	r3, r0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	e015      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2238      	movs	r2, #56	; 0x38
 800307e:	4013      	ands	r3, r2
 8003080:	2b20      	cmp	r3, #32
 8003082:	d103      	bne.n	800308c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2238      	movs	r2, #56	; 0x38
 8003092:	4013      	ands	r3, r2
 8003094:	2b18      	cmp	r3, #24
 8003096:	d103      	bne.n	80030a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003098:	23fa      	movs	r3, #250	; 0xfa
 800309a:	01db      	lsls	r3, r3, #7
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	e001      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030a4:	693b      	ldr	r3, [r7, #16]
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b006      	add	sp, #24
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	40021000 	.word	0x40021000
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200

080030bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b02      	ldr	r3, [pc, #8]	; (80030cc <HAL_RCC_GetHCLKFreq+0x10>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	20000330 	.word	0x20000330

080030d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d0:	b5b0      	push	{r4, r5, r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030d4:	f7ff fff2 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030d8:	0004      	movs	r4, r0
 80030da:	f7ff fb49 	bl	8002770 <LL_RCC_GetAPB1Prescaler>
 80030de:	0003      	movs	r3, r0
 80030e0:	0b1a      	lsrs	r2, r3, #12
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030e4:	0092      	lsls	r2, r2, #2
 80030e6:	58d3      	ldr	r3, [r2, r3]
 80030e8:	221f      	movs	r2, #31
 80030ea:	4013      	ands	r3, r2
 80030ec:	40dc      	lsrs	r4, r3
 80030ee:	0023      	movs	r3, r4
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bdb0      	pop	{r4, r5, r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	08006094 	.word	0x08006094

080030fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e04a      	b.n	80031a4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	223d      	movs	r2, #61	; 0x3d
 8003112:	5c9b      	ldrb	r3, [r3, r2]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	223c      	movs	r2, #60	; 0x3c
 800311e:	2100      	movs	r1, #0
 8003120:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	0018      	movs	r0, r3
 8003126:	f7fe f80b 	bl	8001140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	223d      	movs	r2, #61	; 0x3d
 800312e:	2102      	movs	r1, #2
 8003130:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	0019      	movs	r1, r3
 800313c:	0010      	movs	r0, r2
 800313e:	f000 fab3 	bl	80036a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2248      	movs	r2, #72	; 0x48
 8003146:	2101      	movs	r1, #1
 8003148:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	223e      	movs	r2, #62	; 0x3e
 800314e:	2101      	movs	r1, #1
 8003150:	5499      	strb	r1, [r3, r2]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	223f      	movs	r2, #63	; 0x3f
 8003156:	2101      	movs	r1, #1
 8003158:	5499      	strb	r1, [r3, r2]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2240      	movs	r2, #64	; 0x40
 800315e:	2101      	movs	r1, #1
 8003160:	5499      	strb	r1, [r3, r2]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2241      	movs	r2, #65	; 0x41
 8003166:	2101      	movs	r1, #1
 8003168:	5499      	strb	r1, [r3, r2]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2242      	movs	r2, #66	; 0x42
 800316e:	2101      	movs	r1, #1
 8003170:	5499      	strb	r1, [r3, r2]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2243      	movs	r2, #67	; 0x43
 8003176:	2101      	movs	r1, #1
 8003178:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2244      	movs	r2, #68	; 0x44
 800317e:	2101      	movs	r1, #1
 8003180:	5499      	strb	r1, [r3, r2]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2245      	movs	r2, #69	; 0x45
 8003186:	2101      	movs	r1, #1
 8003188:	5499      	strb	r1, [r3, r2]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2246      	movs	r2, #70	; 0x46
 800318e:	2101      	movs	r1, #1
 8003190:	5499      	strb	r1, [r3, r2]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2247      	movs	r2, #71	; 0x47
 8003196:	2101      	movs	r1, #1
 8003198:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	223d      	movs	r2, #61	; 0x3d
 800319e:	2101      	movs	r1, #1
 80031a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	0018      	movs	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b002      	add	sp, #8
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	223d      	movs	r2, #61	; 0x3d
 80031b8:	5c9b      	ldrb	r3, [r3, r2]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d001      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e03c      	b.n	800323e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	223d      	movs	r2, #61	; 0x3d
 80031c8:	2102      	movs	r1, #2
 80031ca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2101      	movs	r1, #1
 80031d8:	430a      	orrs	r2, r1
 80031da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a19      	ldr	r2, [pc, #100]	; (8003248 <HAL_TIM_Base_Start_IT+0x9c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d009      	beq.n	80031fa <HAL_TIM_Base_Start_IT+0x4e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a18      	ldr	r2, [pc, #96]	; (800324c <HAL_TIM_Base_Start_IT+0xa0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_TIM_Base_Start_IT+0x4e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a16      	ldr	r2, [pc, #88]	; (8003250 <HAL_TIM_Base_Start_IT+0xa4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d116      	bne.n	8003228 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a14      	ldr	r2, [pc, #80]	; (8003254 <HAL_TIM_Base_Start_IT+0xa8>)
 8003202:	4013      	ands	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b06      	cmp	r3, #6
 800320a:	d016      	beq.n	800323a <HAL_TIM_Base_Start_IT+0x8e>
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	025b      	lsls	r3, r3, #9
 8003212:	429a      	cmp	r2, r3
 8003214:	d011      	beq.n	800323a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2101      	movs	r1, #1
 8003222:	430a      	orrs	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003226:	e008      	b.n	800323a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2101      	movs	r1, #1
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e000      	b.n	800323c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	0018      	movs	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	b004      	add	sp, #16
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40000400 	.word	0x40000400
 8003250:	40014000 	.word	0x40014000
 8003254:	00010007 	.word	0x00010007

08003258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2202      	movs	r2, #2
 8003268:	4013      	ands	r3, r2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d124      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2202      	movs	r2, #2
 8003276:	4013      	ands	r3, r2
 8003278:	2b02      	cmp	r3, #2
 800327a:	d11d      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2203      	movs	r2, #3
 8003282:	4252      	negs	r2, r2
 8003284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2203      	movs	r2, #3
 8003294:	4013      	ands	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	0018      	movs	r0, r3
 800329c:	f000 f9ec 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 80032a0:	e007      	b.n	80032b2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f000 f9df 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f000 f9eb 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2204      	movs	r2, #4
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d125      	bne.n	8003312 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2204      	movs	r2, #4
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d11e      	bne.n	8003312 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2205      	movs	r2, #5
 80032da:	4252      	negs	r2, r2
 80032dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	23c0      	movs	r3, #192	; 0xc0
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4013      	ands	r3, r2
 80032f0:	d004      	beq.n	80032fc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 f9bf 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 80032fa:	e007      	b.n	800330c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 f9b2 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	0018      	movs	r0, r3
 8003308:	f000 f9be 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2208      	movs	r2, #8
 800331a:	4013      	ands	r3, r2
 800331c:	2b08      	cmp	r3, #8
 800331e:	d124      	bne.n	800336a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2208      	movs	r2, #8
 8003328:	4013      	ands	r3, r2
 800332a:	2b08      	cmp	r3, #8
 800332c:	d11d      	bne.n	800336a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2209      	movs	r2, #9
 8003334:	4252      	negs	r2, r2
 8003336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2204      	movs	r2, #4
 800333c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	2203      	movs	r2, #3
 8003346:	4013      	ands	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 f993 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 8003352:	e007      	b.n	8003364 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	0018      	movs	r0, r3
 8003358:	f000 f986 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	0018      	movs	r0, r3
 8003360:	f000 f992 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2210      	movs	r2, #16
 8003372:	4013      	ands	r3, r2
 8003374:	2b10      	cmp	r3, #16
 8003376:	d125      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2210      	movs	r2, #16
 8003380:	4013      	ands	r3, r2
 8003382:	2b10      	cmp	r3, #16
 8003384:	d11e      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2211      	movs	r2, #17
 800338c:	4252      	negs	r2, r2
 800338e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2208      	movs	r2, #8
 8003394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	23c0      	movs	r3, #192	; 0xc0
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4013      	ands	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 f966 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e007      	b.n	80033be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 f959 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 f965 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2201      	movs	r2, #1
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10f      	bne.n	80033f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	4013      	ands	r3, r2
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d108      	bne.n	80033f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2202      	movs	r2, #2
 80033e6:	4252      	negs	r2, r2
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fd f8db 	bl	80005a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	2280      	movs	r2, #128	; 0x80
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b80      	cmp	r3, #128	; 0x80
 80033fe:	d10f      	bne.n	8003420 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	4013      	ands	r3, r2
 800340a:	2b80      	cmp	r3, #128	; 0x80
 800340c:	d108      	bne.n	8003420 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2281      	movs	r2, #129	; 0x81
 8003414:	4252      	negs	r2, r2
 8003416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	0018      	movs	r0, r3
 800341c:	f000 fac6 	bl	80039ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	401a      	ands	r2, r3
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	429a      	cmp	r2, r3
 8003432:	d10e      	bne.n	8003452 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	4013      	ands	r3, r2
 800343e:	2b80      	cmp	r3, #128	; 0x80
 8003440:	d107      	bne.n	8003452 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <HAL_TIM_IRQHandler+0x260>)
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f000 fab5 	bl	80039bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2240      	movs	r2, #64	; 0x40
 800345a:	4013      	ands	r3, r2
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d10f      	bne.n	8003480 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2240      	movs	r2, #64	; 0x40
 8003468:	4013      	ands	r3, r2
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d108      	bne.n	8003480 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2241      	movs	r2, #65	; 0x41
 8003474:	4252      	negs	r2, r2
 8003476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	0018      	movs	r0, r3
 800347c:	f000 f90c 	bl	8003698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2220      	movs	r2, #32
 8003488:	4013      	ands	r3, r2
 800348a:	2b20      	cmp	r3, #32
 800348c:	d10f      	bne.n	80034ae <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	4013      	ands	r3, r2
 8003498:	2b20      	cmp	r3, #32
 800349a:	d108      	bne.n	80034ae <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2221      	movs	r2, #33	; 0x21
 80034a2:	4252      	negs	r2, r2
 80034a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 fa77 	bl	800399c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b002      	add	sp, #8
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	fffffeff 	.word	0xfffffeff

080034bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	230f      	movs	r3, #15
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	223c      	movs	r2, #60	; 0x3c
 80034d2:	5c9b      	ldrb	r3, [r3, r2]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_TIM_ConfigClockSource+0x20>
 80034d8:	2302      	movs	r3, #2
 80034da:	e0bc      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x19a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	223c      	movs	r2, #60	; 0x3c
 80034e0:	2101      	movs	r1, #1
 80034e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	223d      	movs	r2, #61	; 0x3d
 80034e8:	2102      	movs	r1, #2
 80034ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4a5a      	ldr	r2, [pc, #360]	; (8003660 <HAL_TIM_ConfigClockSource+0x1a4>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4a59      	ldr	r2, [pc, #356]	; (8003664 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003500:	4013      	ands	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	0192      	lsls	r2, r2, #6
 8003514:	4293      	cmp	r3, r2
 8003516:	d040      	beq.n	800359a <HAL_TIM_ConfigClockSource+0xde>
 8003518:	2280      	movs	r2, #128	; 0x80
 800351a:	0192      	lsls	r2, r2, #6
 800351c:	4293      	cmp	r3, r2
 800351e:	d900      	bls.n	8003522 <HAL_TIM_ConfigClockSource+0x66>
 8003520:	e088      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x178>
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	0152      	lsls	r2, r2, #5
 8003526:	4293      	cmp	r3, r2
 8003528:	d100      	bne.n	800352c <HAL_TIM_ConfigClockSource+0x70>
 800352a:	e088      	b.n	800363e <HAL_TIM_ConfigClockSource+0x182>
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	0152      	lsls	r2, r2, #5
 8003530:	4293      	cmp	r3, r2
 8003532:	d900      	bls.n	8003536 <HAL_TIM_ConfigClockSource+0x7a>
 8003534:	e07e      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x178>
 8003536:	2b70      	cmp	r3, #112	; 0x70
 8003538:	d018      	beq.n	800356c <HAL_TIM_ConfigClockSource+0xb0>
 800353a:	d900      	bls.n	800353e <HAL_TIM_ConfigClockSource+0x82>
 800353c:	e07a      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x178>
 800353e:	2b60      	cmp	r3, #96	; 0x60
 8003540:	d04f      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x126>
 8003542:	d900      	bls.n	8003546 <HAL_TIM_ConfigClockSource+0x8a>
 8003544:	e076      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x178>
 8003546:	2b50      	cmp	r3, #80	; 0x50
 8003548:	d03b      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0x106>
 800354a:	d900      	bls.n	800354e <HAL_TIM_ConfigClockSource+0x92>
 800354c:	e072      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x178>
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d057      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0x146>
 8003552:	d900      	bls.n	8003556 <HAL_TIM_ConfigClockSource+0x9a>
 8003554:	e06e      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x178>
 8003556:	2b30      	cmp	r3, #48	; 0x30
 8003558:	d063      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0x166>
 800355a:	d86b      	bhi.n	8003634 <HAL_TIM_ConfigClockSource+0x178>
 800355c:	2b20      	cmp	r3, #32
 800355e:	d060      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0x166>
 8003560:	d868      	bhi.n	8003634 <HAL_TIM_ConfigClockSource+0x178>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d05d      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0x166>
 8003566:	2b10      	cmp	r3, #16
 8003568:	d05b      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0x166>
 800356a:	e063      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f000 f986 	bl	800388c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2277      	movs	r2, #119	; 0x77
 800358c:	4313      	orrs	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]
      break;
 8003598:	e052      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6899      	ldr	r1, [r3, #8]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f000 f96f 	bl	800388c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2180      	movs	r1, #128	; 0x80
 80035ba:	01c9      	lsls	r1, r1, #7
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
      break;
 80035c0:	e03e      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	001a      	movs	r2, r3
 80035d0:	f000 f8e0 	bl	8003794 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2150      	movs	r1, #80	; 0x50
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f93a 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 80035e0:	e02e      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	6859      	ldr	r1, [r3, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	001a      	movs	r2, r3
 80035f0:	f000 f8fe 	bl	80037f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2160      	movs	r1, #96	; 0x60
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f92a 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 8003600:	e01e      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	001a      	movs	r2, r3
 8003610:	f000 f8c0 	bl	8003794 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2140      	movs	r1, #64	; 0x40
 800361a:	0018      	movs	r0, r3
 800361c:	f000 f91a 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 8003620:	e00e      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0019      	movs	r1, r3
 800362c:	0010      	movs	r0, r2
 800362e:	f000 f911 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 8003632:	e005      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003634:	230f      	movs	r3, #15
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
      break;
 800363c:	e000      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800363e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	223d      	movs	r2, #61	; 0x3d
 8003644:	2101      	movs	r1, #1
 8003646:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	223c      	movs	r2, #60	; 0x3c
 800364c:	2100      	movs	r1, #0
 800364e:	5499      	strb	r1, [r3, r2]

  return status;
 8003650:	230f      	movs	r3, #15
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	781b      	ldrb	r3, [r3, #0]
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b004      	add	sp, #16
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	ffceff88 	.word	0xffceff88
 8003664:	ffff00ff 	.word	0xffff00ff

08003668 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b002      	add	sp, #8
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b002      	add	sp, #8
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a2f      	ldr	r2, [pc, #188]	; (8003778 <TIM_Base_SetConfig+0xd0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_Base_SetConfig+0x20>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a2e      	ldr	r2, [pc, #184]	; (800377c <TIM_Base_SetConfig+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d108      	bne.n	80036da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2270      	movs	r2, #112	; 0x70
 80036cc:	4393      	bics	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a26      	ldr	r2, [pc, #152]	; (8003778 <TIM_Base_SetConfig+0xd0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <TIM_Base_SetConfig+0x62>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a25      	ldr	r2, [pc, #148]	; (800377c <TIM_Base_SetConfig+0xd4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00f      	beq.n	800370a <TIM_Base_SetConfig+0x62>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a24      	ldr	r2, [pc, #144]	; (8003780 <TIM_Base_SetConfig+0xd8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00b      	beq.n	800370a <TIM_Base_SetConfig+0x62>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a23      	ldr	r2, [pc, #140]	; (8003784 <TIM_Base_SetConfig+0xdc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <TIM_Base_SetConfig+0x62>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a22      	ldr	r2, [pc, #136]	; (8003788 <TIM_Base_SetConfig+0xe0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d003      	beq.n	800370a <TIM_Base_SetConfig+0x62>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a21      	ldr	r2, [pc, #132]	; (800378c <TIM_Base_SetConfig+0xe4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d108      	bne.n	800371c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a20      	ldr	r2, [pc, #128]	; (8003790 <TIM_Base_SetConfig+0xe8>)
 800370e:	4013      	ands	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2280      	movs	r2, #128	; 0x80
 8003720:	4393      	bics	r3, r2
 8003722:	001a      	movs	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a0c      	ldr	r2, [pc, #48]	; (8003778 <TIM_Base_SetConfig+0xd0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00b      	beq.n	8003762 <TIM_Base_SetConfig+0xba>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <TIM_Base_SetConfig+0xdc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <TIM_Base_SetConfig+0xba>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <TIM_Base_SetConfig+0xe0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d003      	beq.n	8003762 <TIM_Base_SetConfig+0xba>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a0b      	ldr	r2, [pc, #44]	; (800378c <TIM_Base_SetConfig+0xe4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d103      	bne.n	800376a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	615a      	str	r2, [r3, #20]
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b004      	add	sp, #16
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40000400 	.word	0x40000400
 8003780:	40002000 	.word	0x40002000
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800
 8003790:	fffffcff 	.word	0xfffffcff

08003794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4393      	bics	r3, r2
 80037ae:	001a      	movs	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	22f0      	movs	r2, #240	; 0xf0
 80037be:	4393      	bics	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	220a      	movs	r2, #10
 80037d0:	4393      	bics	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b006      	add	sp, #24
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	2210      	movs	r2, #16
 8003802:	4393      	bics	r3, r2
 8003804:	001a      	movs	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <TIM_TI2_ConfigInputStage+0x60>)
 800381a:	4013      	ands	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	031b      	lsls	r3, r3, #12
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	22a0      	movs	r2, #160	; 0xa0
 800382c:	4393      	bics	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	46bd      	mov	sp, r7
 800384a:	b006      	add	sp, #24
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	ffff0fff 	.word	0xffff0fff

08003854 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a08      	ldr	r2, [pc, #32]	; (8003888 <TIM_ITRx_SetConfig+0x34>)
 8003868:	4013      	ands	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	2207      	movs	r2, #7
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	609a      	str	r2, [r3, #8]
}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b004      	add	sp, #16
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	ffcfff8f 	.word	0xffcfff8f

0800388c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <TIM_ETR_SetConfig+0x3c>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	021a      	lsls	r2, r3, #8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b006      	add	sp, #24
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	ffff00ff 	.word	0xffff00ff

080038cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	223c      	movs	r2, #60	; 0x3c
 80038da:	5c9b      	ldrb	r3, [r3, r2]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e04f      	b.n	8003984 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	223c      	movs	r2, #60	; 0x3c
 80038e8:	2101      	movs	r1, #1
 80038ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	223d      	movs	r2, #61	; 0x3d
 80038f0:	2102      	movs	r1, #2
 80038f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a20      	ldr	r2, [pc, #128]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d108      	bne.n	8003920 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003912:	4013      	ands	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2270      	movs	r2, #112	; 0x70
 8003924:	4393      	bics	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a13      	ldr	r2, [pc, #76]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d009      	beq.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a12      	ldr	r2, [pc, #72]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a11      	ldr	r2, [pc, #68]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d10c      	bne.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	4393      	bics	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	4313      	orrs	r3, r2
 8003968:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	223d      	movs	r2, #61	; 0x3d
 8003976:	2101      	movs	r1, #1
 8003978:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	223c      	movs	r2, #60	; 0x3c
 800397e:	2100      	movs	r1, #0
 8003980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b004      	add	sp, #16
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40012c00 	.word	0x40012c00
 8003990:	ff0fffff 	.word	0xff0fffff
 8003994:	40000400 	.word	0x40000400
 8003998:	40014000 	.word	0x40014000

0800399c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a4:	46c0      	nop			; (mov r8, r8)
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b002      	add	sp, #8
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b002      	add	sp, #8
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e046      	b.n	8003a6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2288      	movs	r2, #136	; 0x88
 80039e2:	589b      	ldr	r3, [r3, r2]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2284      	movs	r2, #132	; 0x84
 80039ec:	2100      	movs	r1, #0
 80039ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7fd fbca 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2288      	movs	r2, #136	; 0x88
 80039fc:	2124      	movs	r1, #36	; 0x24
 80039fe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 fc66 	bl	80042e4 <UART_SetConfig>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e024      	b.n	8003a6c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 fdfd 	bl	800462c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	490d      	ldr	r1, [pc, #52]	; (8003a74 <HAL_UART_Init+0xa8>)
 8003a3e:	400a      	ands	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	212a      	movs	r1, #42	; 0x2a
 8003a4e:	438a      	bics	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 fe95 	bl	8004794 <UART_CheckIdleState>
 8003a6a:	0003      	movs	r3, r0
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	ffffb7ff 	.word	0xffffb7ff

08003a78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	1dbb      	adds	r3, r7, #6
 8003a86:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2288      	movs	r2, #136	; 0x88
 8003a8c:	589b      	ldr	r3, [r3, r2]
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d000      	beq.n	8003a94 <HAL_UART_Transmit+0x1c>
 8003a92:	e088      	b.n	8003ba6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_UART_Transmit+0x2a>
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e080      	b.n	8003ba8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	015b      	lsls	r3, r3, #5
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d109      	bne.n	8003ac6 <HAL_UART_Transmit+0x4e>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2201      	movs	r2, #1
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d001      	beq.n	8003ac6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e070      	b.n	8003ba8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2290      	movs	r2, #144	; 0x90
 8003aca:	2100      	movs	r1, #0
 8003acc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2288      	movs	r2, #136	; 0x88
 8003ad2:	2121      	movs	r1, #33	; 0x21
 8003ad4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad6:	f7fd fccb 	bl	8001470 <HAL_GetTick>
 8003ada:	0003      	movs	r3, r0
 8003adc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1dba      	adds	r2, r7, #6
 8003ae2:	2154      	movs	r1, #84	; 0x54
 8003ae4:	8812      	ldrh	r2, [r2, #0]
 8003ae6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1dba      	adds	r2, r7, #6
 8003aec:	2156      	movs	r1, #86	; 0x56
 8003aee:	8812      	ldrh	r2, [r2, #0]
 8003af0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	015b      	lsls	r3, r3, #5
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d108      	bne.n	8003b10 <HAL_UART_Transmit+0x98>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d104      	bne.n	8003b10 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e003      	b.n	8003b18 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b18:	e02c      	b.n	8003b74 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	0013      	movs	r3, r2
 8003b24:	2200      	movs	r2, #0
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	f000 fe82 	bl	8004830 <UART_WaitOnFlagUntilTimeout>
 8003b2c:	1e03      	subs	r3, r0, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e039      	b.n	8003ba8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	001a      	movs	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	05d2      	lsls	r2, r2, #23
 8003b46:	0dd2      	lsrs	r2, r2, #23
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e007      	b.n	8003b62 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2256      	movs	r2, #86	; 0x56
 8003b66:	5a9b      	ldrh	r3, [r3, r2]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b299      	uxth	r1, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2256      	movs	r2, #86	; 0x56
 8003b72:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2256      	movs	r2, #86	; 0x56
 8003b78:	5a9b      	ldrh	r3, [r3, r2]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1cc      	bne.n	8003b1a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	0013      	movs	r3, r2
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2140      	movs	r1, #64	; 0x40
 8003b8e:	f000 fe4f 	bl	8004830 <UART_WaitOnFlagUntilTimeout>
 8003b92:	1e03      	subs	r3, r0, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e006      	b.n	8003ba8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2288      	movs	r2, #136	; 0x88
 8003b9e:	2120      	movs	r1, #32
 8003ba0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
  }
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b008      	add	sp, #32
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	1dbb      	adds	r3, r7, #6
 8003bbc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	228c      	movs	r2, #140	; 0x8c
 8003bc2:	589b      	ldr	r3, [r3, r2]
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d145      	bne.n	8003c54 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_UART_Receive_IT+0x26>
 8003bce:	1dbb      	adds	r3, r7, #6
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e03d      	b.n	8003c56 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	015b      	lsls	r3, r3, #5
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d109      	bne.n	8003bfa <HAL_UART_Receive_IT+0x4a>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d105      	bne.n	8003bfa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d001      	beq.n	8003bfa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e02d      	b.n	8003c56 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	041b      	lsls	r3, r3, #16
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d019      	beq.n	8003c42 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c12:	613b      	str	r3, [r7, #16]
  return(result);
 8003c14:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	2301      	movs	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f383 8810 	msr	PRIMASK, r3
}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2180      	movs	r1, #128	; 0x80
 8003c30:	04c9      	lsls	r1, r1, #19
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f383 8810 	msr	PRIMASK, r3
}
 8003c40:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c42:	1dbb      	adds	r3, r7, #6
 8003c44:	881a      	ldrh	r2, [r3, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f000 feb8 	bl	80049c0 <UART_Start_Receive_IT>
 8003c50:	0003      	movs	r3, r0
 8003c52:	e000      	b.n	8003c56 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b008      	add	sp, #32
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c60:	b5b0      	push	{r4, r5, r7, lr}
 8003c62:	b0aa      	sub	sp, #168	; 0xa8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	22a4      	movs	r2, #164	; 0xa4
 8003c70:	18b9      	adds	r1, r7, r2
 8003c72:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	20a0      	movs	r0, #160	; 0xa0
 8003c7c:	1839      	adds	r1, r7, r0
 8003c7e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	249c      	movs	r4, #156	; 0x9c
 8003c88:	1939      	adds	r1, r7, r4
 8003c8a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c8c:	0011      	movs	r1, r2
 8003c8e:	18bb      	adds	r3, r7, r2
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4aa2      	ldr	r2, [pc, #648]	; (8003f1c <HAL_UART_IRQHandler+0x2bc>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	2298      	movs	r2, #152	; 0x98
 8003c98:	18bd      	adds	r5, r7, r2
 8003c9a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003c9c:	18bb      	adds	r3, r7, r2
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d11a      	bne.n	8003cda <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	4013      	ands	r3, r2
 8003cac:	d015      	beq.n	8003cda <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cae:	183b      	adds	r3, r7, r0
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d105      	bne.n	8003cc4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cb8:	193b      	adds	r3, r7, r4
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	055b      	lsls	r3, r3, #21
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d00a      	beq.n	8003cda <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d100      	bne.n	8003cce <HAL_UART_IRQHandler+0x6e>
 8003ccc:	e2dc      	b.n	8004288 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	0010      	movs	r0, r2
 8003cd6:	4798      	blx	r3
      }
      return;
 8003cd8:	e2d6      	b.n	8004288 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003cda:	2398      	movs	r3, #152	; 0x98
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d100      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x86>
 8003ce4:	e122      	b.n	8003f2c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003ce6:	239c      	movs	r3, #156	; 0x9c
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a8c      	ldr	r2, [pc, #560]	; (8003f20 <HAL_UART_IRQHandler+0x2c0>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d106      	bne.n	8003d00 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003cf2:	23a0      	movs	r3, #160	; 0xa0
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a8a      	ldr	r2, [pc, #552]	; (8003f24 <HAL_UART_IRQHandler+0x2c4>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d100      	bne.n	8003d00 <HAL_UART_IRQHandler+0xa0>
 8003cfe:	e115      	b.n	8003f2c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d00:	23a4      	movs	r3, #164	; 0xa4
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2201      	movs	r2, #1
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d012      	beq.n	8003d32 <HAL_UART_IRQHandler+0xd2>
 8003d0c:	23a0      	movs	r3, #160	; 0xa0
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4013      	ands	r3, r2
 8003d18:	d00b      	beq.n	8003d32 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2290      	movs	r2, #144	; 0x90
 8003d26:	589b      	ldr	r3, [r3, r2]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2190      	movs	r1, #144	; 0x90
 8003d30:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d32:	23a4      	movs	r3, #164	; 0xa4
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d011      	beq.n	8003d62 <HAL_UART_IRQHandler+0x102>
 8003d3e:	239c      	movs	r3, #156	; 0x9c
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2201      	movs	r2, #1
 8003d46:	4013      	ands	r3, r2
 8003d48:	d00b      	beq.n	8003d62 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2290      	movs	r2, #144	; 0x90
 8003d56:	589b      	ldr	r3, [r3, r2]
 8003d58:	2204      	movs	r2, #4
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2190      	movs	r1, #144	; 0x90
 8003d60:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d62:	23a4      	movs	r3, #164	; 0xa4
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2204      	movs	r2, #4
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d011      	beq.n	8003d92 <HAL_UART_IRQHandler+0x132>
 8003d6e:	239c      	movs	r3, #156	; 0x9c
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	4013      	ands	r3, r2
 8003d78:	d00b      	beq.n	8003d92 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2204      	movs	r2, #4
 8003d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2290      	movs	r2, #144	; 0x90
 8003d86:	589b      	ldr	r3, [r3, r2]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2190      	movs	r1, #144	; 0x90
 8003d90:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d92:	23a4      	movs	r3, #164	; 0xa4
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d017      	beq.n	8003dce <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d9e:	23a0      	movs	r3, #160	; 0xa0
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2220      	movs	r2, #32
 8003da6:	4013      	ands	r3, r2
 8003da8:	d105      	bne.n	8003db6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003daa:	239c      	movs	r3, #156	; 0x9c
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a5b      	ldr	r2, [pc, #364]	; (8003f20 <HAL_UART_IRQHandler+0x2c0>)
 8003db2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003db4:	d00b      	beq.n	8003dce <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2208      	movs	r2, #8
 8003dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2290      	movs	r2, #144	; 0x90
 8003dc2:	589b      	ldr	r3, [r3, r2]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2190      	movs	r1, #144	; 0x90
 8003dcc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dce:	23a4      	movs	r3, #164	; 0xa4
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d013      	beq.n	8003e04 <HAL_UART_IRQHandler+0x1a4>
 8003ddc:	23a0      	movs	r3, #160	; 0xa0
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	04db      	lsls	r3, r3, #19
 8003de6:	4013      	ands	r3, r2
 8003de8:	d00c      	beq.n	8003e04 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2280      	movs	r2, #128	; 0x80
 8003df0:	0112      	lsls	r2, r2, #4
 8003df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2290      	movs	r2, #144	; 0x90
 8003df8:	589b      	ldr	r3, [r3, r2]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2190      	movs	r1, #144	; 0x90
 8003e02:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2290      	movs	r2, #144	; 0x90
 8003e08:	589b      	ldr	r3, [r3, r2]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d100      	bne.n	8003e10 <HAL_UART_IRQHandler+0x1b0>
 8003e0e:	e23d      	b.n	800428c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e10:	23a4      	movs	r3, #164	; 0xa4
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2220      	movs	r2, #32
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d015      	beq.n	8003e48 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e1c:	23a0      	movs	r3, #160	; 0xa0
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2220      	movs	r2, #32
 8003e24:	4013      	ands	r3, r2
 8003e26:	d106      	bne.n	8003e36 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e28:	239c      	movs	r3, #156	; 0x9c
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	055b      	lsls	r3, r3, #21
 8003e32:	4013      	ands	r3, r2
 8003e34:	d008      	beq.n	8003e48 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	0010      	movs	r0, r2
 8003e46:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2290      	movs	r2, #144	; 0x90
 8003e4c:	589b      	ldr	r3, [r3, r2]
 8003e4e:	2194      	movs	r1, #148	; 0x94
 8003e50:	187a      	adds	r2, r7, r1
 8003e52:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d004      	beq.n	8003e6c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2228      	movs	r2, #40	; 0x28
 8003e68:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e6a:	d04c      	beq.n	8003f06 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 feca 	bl	8004c08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2240      	movs	r2, #64	; 0x40
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d13c      	bne.n	8003efc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e82:	f3ef 8310 	mrs	r3, PRIMASK
 8003e86:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8a:	2090      	movs	r0, #144	; 0x90
 8003e8c:	183a      	adds	r2, r7, r0
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	2301      	movs	r3, #1
 8003e92:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e96:	f383 8810 	msr	PRIMASK, r3
}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2140      	movs	r1, #64	; 0x40
 8003ea8:	438a      	bics	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	183b      	adds	r3, r7, r0
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb4:	f383 8810 	msr	PRIMASK, r3
}
 8003eb8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	589b      	ldr	r3, [r3, r2]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d016      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2280      	movs	r2, #128	; 0x80
 8003ec8:	589b      	ldr	r3, [r3, r2]
 8003eca:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <HAL_UART_IRQHandler+0x2c8>)
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	589b      	ldr	r3, [r3, r2]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f7fe f91d 	bl	8002114 <HAL_DMA_Abort_IT>
 8003eda:	1e03      	subs	r3, r0, #0
 8003edc:	d01c      	beq.n	8003f18 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2280      	movs	r2, #128	; 0x80
 8003ee2:	589b      	ldr	r3, [r3, r2]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	5852      	ldr	r2, [r2, r1]
 8003eec:	0010      	movs	r0, r2
 8003eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	e012      	b.n	8003f18 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f000 f9e1 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efa:	e00d      	b.n	8003f18 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 f9dc 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	e008      	b.n	8003f18 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 f9d7 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2290      	movs	r2, #144	; 0x90
 8003f12:	2100      	movs	r1, #0
 8003f14:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003f16:	e1b9      	b.n	800428c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	46c0      	nop			; (mov r8, r8)
    return;
 8003f1a:	e1b7      	b.n	800428c <HAL_UART_IRQHandler+0x62c>
 8003f1c:	0000080f 	.word	0x0000080f
 8003f20:	10000001 	.word	0x10000001
 8003f24:	04000120 	.word	0x04000120
 8003f28:	08004cd5 	.word	0x08004cd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d000      	beq.n	8003f36 <HAL_UART_IRQHandler+0x2d6>
 8003f34:	e13e      	b.n	80041b4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f36:	23a4      	movs	r3, #164	; 0xa4
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d100      	bne.n	8003f44 <HAL_UART_IRQHandler+0x2e4>
 8003f42:	e137      	b.n	80041b4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f44:	23a0      	movs	r3, #160	; 0xa0
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d100      	bne.n	8003f52 <HAL_UART_IRQHandler+0x2f2>
 8003f50:	e130      	b.n	80041b4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2210      	movs	r2, #16
 8003f58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2240      	movs	r2, #64	; 0x40
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b40      	cmp	r3, #64	; 0x40
 8003f66:	d000      	beq.n	8003f6a <HAL_UART_IRQHandler+0x30a>
 8003f68:	e0a4      	b.n	80040b4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2280      	movs	r2, #128	; 0x80
 8003f6e:	589b      	ldr	r3, [r3, r2]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	217e      	movs	r1, #126	; 0x7e
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d100      	bne.n	8003f84 <HAL_UART_IRQHandler+0x324>
 8003f82:	e185      	b.n	8004290 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	225c      	movs	r2, #92	; 0x5c
 8003f88:	5a9b      	ldrh	r3, [r3, r2]
 8003f8a:	187a      	adds	r2, r7, r1
 8003f8c:	8812      	ldrh	r2, [r2, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d300      	bcc.n	8003f94 <HAL_UART_IRQHandler+0x334>
 8003f92:	e17d      	b.n	8004290 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	187a      	adds	r2, r7, r1
 8003f98:	215e      	movs	r1, #94	; 0x5e
 8003f9a:	8812      	ldrh	r2, [r2, #0]
 8003f9c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2280      	movs	r2, #128	; 0x80
 8003fa2:	589b      	ldr	r3, [r3, r2]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	4013      	ands	r3, r2
 8003fac:	d170      	bne.n	8004090 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fae:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fb8:	2301      	movs	r3, #1
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	49b4      	ldr	r1, [pc, #720]	; (80042a0 <HAL_UART_IRQHandler+0x640>)
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	f383 8810 	msr	PRIMASK, r3
}
 8003fde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	677b      	str	r3, [r7, #116]	; 0x74
 8003fea:	2301      	movs	r3, #1
 8003fec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff0:	f383 8810 	msr	PRIMASK, r3
}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2101      	movs	r1, #1
 8004002:	438a      	bics	r2, r1
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004008:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400c:	f383 8810 	msr	PRIMASK, r3
}
 8004010:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004012:	f3ef 8310 	mrs	r3, PRIMASK
 8004016:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004018:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401a:	673b      	str	r3, [r7, #112]	; 0x70
 800401c:	2301      	movs	r3, #1
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004022:	f383 8810 	msr	PRIMASK, r3
}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2140      	movs	r1, #64	; 0x40
 8004034:	438a      	bics	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800403a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403e:	f383 8810 	msr	PRIMASK, r3
}
 8004042:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	228c      	movs	r2, #140	; 0x8c
 8004048:	2120      	movs	r1, #32
 800404a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004052:	f3ef 8310 	mrs	r3, PRIMASK
 8004056:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004058:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800405c:	2301      	movs	r3, #1
 800405e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2110      	movs	r1, #16
 8004074:	438a      	bics	r2, r1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407e:	f383 8810 	msr	PRIMASK, r3
}
 8004082:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	589b      	ldr	r3, [r3, r2]
 800408a:	0018      	movs	r0, r3
 800408c:	f7fd ffe0 	bl	8002050 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	225c      	movs	r2, #92	; 0x5c
 800409a:	5a9a      	ldrh	r2, [r3, r2]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	215e      	movs	r1, #94	; 0x5e
 80040a0:	5a5b      	ldrh	r3, [r3, r1]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	0011      	movs	r1, r2
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 f90d 	bl	80042cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040b2:	e0ed      	b.n	8004290 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	225c      	movs	r2, #92	; 0x5c
 80040b8:	5a99      	ldrh	r1, [r3, r2]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	225e      	movs	r2, #94	; 0x5e
 80040be:	5a9b      	ldrh	r3, [r3, r2]
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	208e      	movs	r0, #142	; 0x8e
 80040c4:	183b      	adds	r3, r7, r0
 80040c6:	1a8a      	subs	r2, r1, r2
 80040c8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	225e      	movs	r2, #94	; 0x5e
 80040ce:	5a9b      	ldrh	r3, [r3, r2]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d100      	bne.n	80040d8 <HAL_UART_IRQHandler+0x478>
 80040d6:	e0dd      	b.n	8004294 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80040d8:	183b      	adds	r3, r7, r0
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d100      	bne.n	80040e2 <HAL_UART_IRQHandler+0x482>
 80040e0:	e0d8      	b.n	8004294 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e2:	f3ef 8310 	mrs	r3, PRIMASK
 80040e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80040e8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040ea:	2488      	movs	r4, #136	; 0x88
 80040ec:	193a      	adds	r2, r7, r4
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	2301      	movs	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f383 8810 	msr	PRIMASK, r3
}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4967      	ldr	r1, [pc, #412]	; (80042a4 <HAL_UART_IRQHandler+0x644>)
 8004108:	400a      	ands	r2, r1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	193b      	adds	r3, r7, r4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411a:	f3ef 8310 	mrs	r3, PRIMASK
 800411e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004120:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004122:	2484      	movs	r4, #132	; 0x84
 8004124:	193a      	adds	r2, r7, r4
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	2301      	movs	r3, #1
 800412a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f383 8810 	msr	PRIMASK, r3
}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	495a      	ldr	r1, [pc, #360]	; (80042a8 <HAL_UART_IRQHandler+0x648>)
 8004140:	400a      	ands	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	193b      	adds	r3, r7, r4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	f383 8810 	msr	PRIMASK, r3
}
 8004150:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	228c      	movs	r2, #140	; 0x8c
 8004156:	2120      	movs	r1, #32
 8004158:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004166:	f3ef 8310 	mrs	r3, PRIMASK
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416e:	2480      	movs	r4, #128	; 0x80
 8004170:	193a      	adds	r2, r7, r4
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	2301      	movs	r3, #1
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	f383 8810 	msr	PRIMASK, r3
}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2110      	movs	r1, #16
 800418c:	438a      	bics	r2, r1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	193b      	adds	r3, r7, r4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	f383 8810 	msr	PRIMASK, r3
}
 800419c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041a4:	183b      	adds	r3, r7, r0
 80041a6:	881a      	ldrh	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0011      	movs	r1, r2
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 f88d 	bl	80042cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041b2:	e06f      	b.n	8004294 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041b4:	23a4      	movs	r3, #164	; 0xa4
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	035b      	lsls	r3, r3, #13
 80041be:	4013      	ands	r3, r2
 80041c0:	d010      	beq.n	80041e4 <HAL_UART_IRQHandler+0x584>
 80041c2:	239c      	movs	r3, #156	; 0x9c
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	03db      	lsls	r3, r3, #15
 80041cc:	4013      	ands	r3, r2
 80041ce:	d009      	beq.n	80041e4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2280      	movs	r2, #128	; 0x80
 80041d6:	0352      	lsls	r2, r2, #13
 80041d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	0018      	movs	r0, r3
 80041de:	f001 fa1d 	bl	800561c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041e2:	e05a      	b.n	800429a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80041e4:	23a4      	movs	r3, #164	; 0xa4
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	4013      	ands	r3, r2
 80041ee:	d016      	beq.n	800421e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80041f0:	23a0      	movs	r3, #160	; 0xa0
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2280      	movs	r2, #128	; 0x80
 80041f8:	4013      	ands	r3, r2
 80041fa:	d106      	bne.n	800420a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80041fc:	239c      	movs	r3, #156	; 0x9c
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	4013      	ands	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800420e:	2b00      	cmp	r3, #0
 8004210:	d042      	beq.n	8004298 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	0010      	movs	r0, r2
 800421a:	4798      	blx	r3
    }
    return;
 800421c:	e03c      	b.n	8004298 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800421e:	23a4      	movs	r3, #164	; 0xa4
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2240      	movs	r2, #64	; 0x40
 8004226:	4013      	ands	r3, r2
 8004228:	d00a      	beq.n	8004240 <HAL_UART_IRQHandler+0x5e0>
 800422a:	23a0      	movs	r3, #160	; 0xa0
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2240      	movs	r2, #64	; 0x40
 8004232:	4013      	ands	r3, r2
 8004234:	d004      	beq.n	8004240 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0018      	movs	r0, r3
 800423a:	f000 fd62 	bl	8004d02 <UART_EndTransmit_IT>
    return;
 800423e:	e02c      	b.n	800429a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004240:	23a4      	movs	r3, #164	; 0xa4
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	4013      	ands	r3, r2
 800424c:	d00b      	beq.n	8004266 <HAL_UART_IRQHandler+0x606>
 800424e:	23a0      	movs	r3, #160	; 0xa0
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	05db      	lsls	r3, r3, #23
 8004258:	4013      	ands	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	0018      	movs	r0, r3
 8004260:	f001 f9ec 	bl	800563c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004264:	e019      	b.n	800429a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004266:	23a4      	movs	r3, #164	; 0xa4
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	045b      	lsls	r3, r3, #17
 8004270:	4013      	ands	r3, r2
 8004272:	d012      	beq.n	800429a <HAL_UART_IRQHandler+0x63a>
 8004274:	23a0      	movs	r3, #160	; 0xa0
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	da0d      	bge.n	800429a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	0018      	movs	r0, r3
 8004282:	f001 f9d3 	bl	800562c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004286:	e008      	b.n	800429a <HAL_UART_IRQHandler+0x63a>
      return;
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	e006      	b.n	800429a <HAL_UART_IRQHandler+0x63a>
    return;
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	e004      	b.n	800429a <HAL_UART_IRQHandler+0x63a>
      return;
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	e002      	b.n	800429a <HAL_UART_IRQHandler+0x63a>
      return;
 8004294:	46c0      	nop			; (mov r8, r8)
 8004296:	e000      	b.n	800429a <HAL_UART_IRQHandler+0x63a>
    return;
 8004298:	46c0      	nop			; (mov r8, r8)
  }
}
 800429a:	46bd      	mov	sp, r7
 800429c:	b02a      	add	sp, #168	; 0xa8
 800429e:	bdb0      	pop	{r4, r5, r7, pc}
 80042a0:	fffffeff 	.word	0xfffffeff
 80042a4:	fffffedf 	.word	0xfffffedf
 80042a8:	effffffe 	.word	0xeffffffe

080042ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042b4:	46c0      	nop			; (mov r8, r8)
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b002      	add	sp, #8
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b002      	add	sp, #8
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	000a      	movs	r2, r1
 80042d6:	1cbb      	adds	r3, r7, #2
 80042d8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b002      	add	sp, #8
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ec:	231a      	movs	r3, #26
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	4313      	orrs	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4abc      	ldr	r2, [pc, #752]	; (8004604 <UART_SetConfig+0x320>)
 8004314:	4013      	ands	r3, r2
 8004316:	0019      	movs	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	430a      	orrs	r2, r1
 8004320:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4ab7      	ldr	r2, [pc, #732]	; (8004608 <UART_SetConfig+0x324>)
 800432a:	4013      	ands	r3, r2
 800432c:	0019      	movs	r1, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	4313      	orrs	r3, r2
 8004348:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4aae      	ldr	r2, [pc, #696]	; (800460c <UART_SetConfig+0x328>)
 8004352:	4013      	ands	r3, r2
 8004354:	0019      	movs	r1, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	430a      	orrs	r2, r1
 800435e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	220f      	movs	r2, #15
 8004368:	4393      	bics	r3, r2
 800436a:	0019      	movs	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4aa4      	ldr	r2, [pc, #656]	; (8004610 <UART_SetConfig+0x32c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d127      	bne.n	80043d2 <UART_SetConfig+0xee>
 8004382:	4ba4      	ldr	r3, [pc, #656]	; (8004614 <UART_SetConfig+0x330>)
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	2203      	movs	r2, #3
 8004388:	4013      	ands	r3, r2
 800438a:	2b03      	cmp	r3, #3
 800438c:	d017      	beq.n	80043be <UART_SetConfig+0xda>
 800438e:	d81b      	bhi.n	80043c8 <UART_SetConfig+0xe4>
 8004390:	2b02      	cmp	r3, #2
 8004392:	d00a      	beq.n	80043aa <UART_SetConfig+0xc6>
 8004394:	d818      	bhi.n	80043c8 <UART_SetConfig+0xe4>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <UART_SetConfig+0xbc>
 800439a:	2b01      	cmp	r3, #1
 800439c:	d00a      	beq.n	80043b4 <UART_SetConfig+0xd0>
 800439e:	e013      	b.n	80043c8 <UART_SetConfig+0xe4>
 80043a0:	231b      	movs	r3, #27
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e058      	b.n	800445c <UART_SetConfig+0x178>
 80043aa:	231b      	movs	r3, #27
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	2202      	movs	r2, #2
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	e053      	b.n	800445c <UART_SetConfig+0x178>
 80043b4:	231b      	movs	r3, #27
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	2204      	movs	r2, #4
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	e04e      	b.n	800445c <UART_SetConfig+0x178>
 80043be:	231b      	movs	r3, #27
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	2208      	movs	r2, #8
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e049      	b.n	800445c <UART_SetConfig+0x178>
 80043c8:	231b      	movs	r3, #27
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	2210      	movs	r2, #16
 80043ce:	701a      	strb	r2, [r3, #0]
 80043d0:	e044      	b.n	800445c <UART_SetConfig+0x178>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a90      	ldr	r2, [pc, #576]	; (8004618 <UART_SetConfig+0x334>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d127      	bne.n	800442c <UART_SetConfig+0x148>
 80043dc:	4b8d      	ldr	r3, [pc, #564]	; (8004614 <UART_SetConfig+0x330>)
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	220c      	movs	r2, #12
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d017      	beq.n	8004418 <UART_SetConfig+0x134>
 80043e8:	d81b      	bhi.n	8004422 <UART_SetConfig+0x13e>
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d00a      	beq.n	8004404 <UART_SetConfig+0x120>
 80043ee:	d818      	bhi.n	8004422 <UART_SetConfig+0x13e>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <UART_SetConfig+0x116>
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d00a      	beq.n	800440e <UART_SetConfig+0x12a>
 80043f8:	e013      	b.n	8004422 <UART_SetConfig+0x13e>
 80043fa:	231b      	movs	r3, #27
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	e02b      	b.n	800445c <UART_SetConfig+0x178>
 8004404:	231b      	movs	r3, #27
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	2202      	movs	r2, #2
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	e026      	b.n	800445c <UART_SetConfig+0x178>
 800440e:	231b      	movs	r3, #27
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	2204      	movs	r2, #4
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e021      	b.n	800445c <UART_SetConfig+0x178>
 8004418:	231b      	movs	r3, #27
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	2208      	movs	r2, #8
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e01c      	b.n	800445c <UART_SetConfig+0x178>
 8004422:	231b      	movs	r3, #27
 8004424:	18fb      	adds	r3, r7, r3
 8004426:	2210      	movs	r2, #16
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	e017      	b.n	800445c <UART_SetConfig+0x178>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a7a      	ldr	r2, [pc, #488]	; (800461c <UART_SetConfig+0x338>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d104      	bne.n	8004440 <UART_SetConfig+0x15c>
 8004436:	231b      	movs	r3, #27
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e00d      	b.n	800445c <UART_SetConfig+0x178>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a76      	ldr	r2, [pc, #472]	; (8004620 <UART_SetConfig+0x33c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d104      	bne.n	8004454 <UART_SetConfig+0x170>
 800444a:	231b      	movs	r3, #27
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	e003      	b.n	800445c <UART_SetConfig+0x178>
 8004454:	231b      	movs	r3, #27
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	2210      	movs	r2, #16
 800445a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	2380      	movs	r3, #128	; 0x80
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	429a      	cmp	r2, r3
 8004466:	d000      	beq.n	800446a <UART_SetConfig+0x186>
 8004468:	e065      	b.n	8004536 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800446a:	231b      	movs	r3, #27
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d015      	beq.n	80044a0 <UART_SetConfig+0x1bc>
 8004474:	dc18      	bgt.n	80044a8 <UART_SetConfig+0x1c4>
 8004476:	2b04      	cmp	r3, #4
 8004478:	d00d      	beq.n	8004496 <UART_SetConfig+0x1b2>
 800447a:	dc15      	bgt.n	80044a8 <UART_SetConfig+0x1c4>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <UART_SetConfig+0x1a2>
 8004480:	2b02      	cmp	r3, #2
 8004482:	d005      	beq.n	8004490 <UART_SetConfig+0x1ac>
 8004484:	e010      	b.n	80044a8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004486:	f7fe fe23 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 800448a:	0003      	movs	r3, r0
 800448c:	617b      	str	r3, [r7, #20]
        break;
 800448e:	e012      	b.n	80044b6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004490:	4b64      	ldr	r3, [pc, #400]	; (8004624 <UART_SetConfig+0x340>)
 8004492:	617b      	str	r3, [r7, #20]
        break;
 8004494:	e00f      	b.n	80044b6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004496:	f7fe fd8f 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 800449a:	0003      	movs	r3, r0
 800449c:	617b      	str	r3, [r7, #20]
        break;
 800449e:	e00a      	b.n	80044b6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	617b      	str	r3, [r7, #20]
        break;
 80044a6:	e006      	b.n	80044b6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044ac:	231a      	movs	r3, #26
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2201      	movs	r2, #1
 80044b2:	701a      	strb	r2, [r3, #0]
        break;
 80044b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d100      	bne.n	80044be <UART_SetConfig+0x1da>
 80044bc:	e08d      	b.n	80045da <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c2:	4b59      	ldr	r3, [pc, #356]	; (8004628 <UART_SetConfig+0x344>)
 80044c4:	0052      	lsls	r2, r2, #1
 80044c6:	5ad3      	ldrh	r3, [r2, r3]
 80044c8:	0019      	movs	r1, r3
 80044ca:	6978      	ldr	r0, [r7, #20]
 80044cc:	f7fb fe22 	bl	8000114 <__udivsi3>
 80044d0:	0003      	movs	r3, r0
 80044d2:	005a      	lsls	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	18d2      	adds	r2, r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	0019      	movs	r1, r3
 80044e2:	0010      	movs	r0, r2
 80044e4:	f7fb fe16 	bl	8000114 <__udivsi3>
 80044e8:	0003      	movs	r3, r0
 80044ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b0f      	cmp	r3, #15
 80044f0:	d91c      	bls.n	800452c <UART_SetConfig+0x248>
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	025b      	lsls	r3, r3, #9
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d217      	bcs.n	800452c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	200e      	movs	r0, #14
 8004502:	183b      	adds	r3, r7, r0
 8004504:	210f      	movs	r1, #15
 8004506:	438a      	bics	r2, r1
 8004508:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	2207      	movs	r2, #7
 8004512:	4013      	ands	r3, r2
 8004514:	b299      	uxth	r1, r3
 8004516:	183b      	adds	r3, r7, r0
 8004518:	183a      	adds	r2, r7, r0
 800451a:	8812      	ldrh	r2, [r2, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	183a      	adds	r2, r7, r0
 8004526:	8812      	ldrh	r2, [r2, #0]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	e056      	b.n	80045da <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800452c:	231a      	movs	r3, #26
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	2201      	movs	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e051      	b.n	80045da <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004536:	231b      	movs	r3, #27
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b08      	cmp	r3, #8
 800453e:	d015      	beq.n	800456c <UART_SetConfig+0x288>
 8004540:	dc18      	bgt.n	8004574 <UART_SetConfig+0x290>
 8004542:	2b04      	cmp	r3, #4
 8004544:	d00d      	beq.n	8004562 <UART_SetConfig+0x27e>
 8004546:	dc15      	bgt.n	8004574 <UART_SetConfig+0x290>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <UART_SetConfig+0x26e>
 800454c:	2b02      	cmp	r3, #2
 800454e:	d005      	beq.n	800455c <UART_SetConfig+0x278>
 8004550:	e010      	b.n	8004574 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004552:	f7fe fdbd 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8004556:	0003      	movs	r3, r0
 8004558:	617b      	str	r3, [r7, #20]
        break;
 800455a:	e012      	b.n	8004582 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800455c:	4b31      	ldr	r3, [pc, #196]	; (8004624 <UART_SetConfig+0x340>)
 800455e:	617b      	str	r3, [r7, #20]
        break;
 8004560:	e00f      	b.n	8004582 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004562:	f7fe fd29 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8004566:	0003      	movs	r3, r0
 8004568:	617b      	str	r3, [r7, #20]
        break;
 800456a:	e00a      	b.n	8004582 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	617b      	str	r3, [r7, #20]
        break;
 8004572:	e006      	b.n	8004582 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004578:	231a      	movs	r3, #26
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
        break;
 8004580:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d028      	beq.n	80045da <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800458c:	4b26      	ldr	r3, [pc, #152]	; (8004628 <UART_SetConfig+0x344>)
 800458e:	0052      	lsls	r2, r2, #1
 8004590:	5ad3      	ldrh	r3, [r2, r3]
 8004592:	0019      	movs	r1, r3
 8004594:	6978      	ldr	r0, [r7, #20]
 8004596:	f7fb fdbd 	bl	8000114 <__udivsi3>
 800459a:	0003      	movs	r3, r0
 800459c:	001a      	movs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	18d2      	adds	r2, r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	0019      	movs	r1, r3
 80045ac:	0010      	movs	r0, r2
 80045ae:	f7fb fdb1 	bl	8000114 <__udivsi3>
 80045b2:	0003      	movs	r3, r0
 80045b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b0f      	cmp	r3, #15
 80045ba:	d90a      	bls.n	80045d2 <UART_SetConfig+0x2ee>
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	025b      	lsls	r3, r3, #9
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d205      	bcs.n	80045d2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60da      	str	r2, [r3, #12]
 80045d0:	e003      	b.n	80045da <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80045d2:	231a      	movs	r3, #26
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	2201      	movs	r2, #1
 80045d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	226a      	movs	r2, #106	; 0x6a
 80045de:	2101      	movs	r1, #1
 80045e0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2268      	movs	r2, #104	; 0x68
 80045e6:	2101      	movs	r1, #1
 80045e8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80045f6:	231a      	movs	r3, #26
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	781b      	ldrb	r3, [r3, #0]
}
 80045fc:	0018      	movs	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	b008      	add	sp, #32
 8004602:	bd80      	pop	{r7, pc}
 8004604:	cfff69f3 	.word	0xcfff69f3
 8004608:	ffffcfff 	.word	0xffffcfff
 800460c:	11fff4ff 	.word	0x11fff4ff
 8004610:	40013800 	.word	0x40013800
 8004614:	40021000 	.word	0x40021000
 8004618:	40004400 	.word	0x40004400
 800461c:	40004800 	.word	0x40004800
 8004620:	40004c00 	.word	0x40004c00
 8004624:	00f42400 	.word	0x00f42400
 8004628:	080060b4 	.word	0x080060b4

0800462c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	2201      	movs	r2, #1
 800463a:	4013      	ands	r3, r2
 800463c:	d00b      	beq.n	8004656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a4a      	ldr	r2, [pc, #296]	; (8004770 <UART_AdvFeatureConfig+0x144>)
 8004646:	4013      	ands	r3, r2
 8004648:	0019      	movs	r1, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	2202      	movs	r2, #2
 800465c:	4013      	ands	r3, r2
 800465e:	d00b      	beq.n	8004678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4a43      	ldr	r2, [pc, #268]	; (8004774 <UART_AdvFeatureConfig+0x148>)
 8004668:	4013      	ands	r3, r2
 800466a:	0019      	movs	r1, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	2204      	movs	r2, #4
 800467e:	4013      	ands	r3, r2
 8004680:	d00b      	beq.n	800469a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4a3b      	ldr	r2, [pc, #236]	; (8004778 <UART_AdvFeatureConfig+0x14c>)
 800468a:	4013      	ands	r3, r2
 800468c:	0019      	movs	r1, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	2208      	movs	r2, #8
 80046a0:	4013      	ands	r3, r2
 80046a2:	d00b      	beq.n	80046bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4a34      	ldr	r2, [pc, #208]	; (800477c <UART_AdvFeatureConfig+0x150>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	0019      	movs	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	2210      	movs	r2, #16
 80046c2:	4013      	ands	r3, r2
 80046c4:	d00b      	beq.n	80046de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a2c      	ldr	r2, [pc, #176]	; (8004780 <UART_AdvFeatureConfig+0x154>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	0019      	movs	r1, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	2220      	movs	r2, #32
 80046e4:	4013      	ands	r3, r2
 80046e6:	d00b      	beq.n	8004700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	4a25      	ldr	r2, [pc, #148]	; (8004784 <UART_AdvFeatureConfig+0x158>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	0019      	movs	r1, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	2240      	movs	r2, #64	; 0x40
 8004706:	4013      	ands	r3, r2
 8004708:	d01d      	beq.n	8004746 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <UART_AdvFeatureConfig+0x15c>)
 8004712:	4013      	ands	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	035b      	lsls	r3, r3, #13
 800472a:	429a      	cmp	r2, r3
 800472c:	d10b      	bne.n	8004746 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4a15      	ldr	r2, [pc, #84]	; (800478c <UART_AdvFeatureConfig+0x160>)
 8004736:	4013      	ands	r3, r2
 8004738:	0019      	movs	r1, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474a:	2280      	movs	r2, #128	; 0x80
 800474c:	4013      	ands	r3, r2
 800474e:	d00b      	beq.n	8004768 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4a0e      	ldr	r2, [pc, #56]	; (8004790 <UART_AdvFeatureConfig+0x164>)
 8004758:	4013      	ands	r3, r2
 800475a:	0019      	movs	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
  }
}
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	b002      	add	sp, #8
 800476e:	bd80      	pop	{r7, pc}
 8004770:	fffdffff 	.word	0xfffdffff
 8004774:	fffeffff 	.word	0xfffeffff
 8004778:	fffbffff 	.word	0xfffbffff
 800477c:	ffff7fff 	.word	0xffff7fff
 8004780:	ffffefff 	.word	0xffffefff
 8004784:	ffffdfff 	.word	0xffffdfff
 8004788:	ffefffff 	.word	0xffefffff
 800478c:	ff9fffff 	.word	0xff9fffff
 8004790:	fff7ffff 	.word	0xfff7ffff

08004794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af02      	add	r7, sp, #8
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2290      	movs	r2, #144	; 0x90
 80047a0:	2100      	movs	r1, #0
 80047a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047a4:	f7fc fe64 	bl	8001470 <HAL_GetTick>
 80047a8:	0003      	movs	r3, r0
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2208      	movs	r2, #8
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d10c      	bne.n	80047d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2280      	movs	r2, #128	; 0x80
 80047be:	0391      	lsls	r1, r2, #14
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4a1a      	ldr	r2, [pc, #104]	; (800482c <UART_CheckIdleState+0x98>)
 80047c4:	9200      	str	r2, [sp, #0]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f000 f832 	bl	8004830 <UART_WaitOnFlagUntilTimeout>
 80047cc:	1e03      	subs	r3, r0, #0
 80047ce:	d001      	beq.n	80047d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e026      	b.n	8004822 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2204      	movs	r2, #4
 80047dc:	4013      	ands	r3, r2
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d10c      	bne.n	80047fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2280      	movs	r2, #128	; 0x80
 80047e6:	03d1      	lsls	r1, r2, #15
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	4a10      	ldr	r2, [pc, #64]	; (800482c <UART_CheckIdleState+0x98>)
 80047ec:	9200      	str	r2, [sp, #0]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f000 f81e 	bl	8004830 <UART_WaitOnFlagUntilTimeout>
 80047f4:	1e03      	subs	r3, r0, #0
 80047f6:	d001      	beq.n	80047fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e012      	b.n	8004822 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2288      	movs	r2, #136	; 0x88
 8004800:	2120      	movs	r1, #32
 8004802:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	228c      	movs	r2, #140	; 0x8c
 8004808:	2120      	movs	r1, #32
 800480a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2284      	movs	r2, #132	; 0x84
 800481c:	2100      	movs	r1, #0
 800481e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b004      	add	sp, #16
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	01ffffff 	.word	0x01ffffff

08004830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b094      	sub	sp, #80	; 0x50
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	1dfb      	adds	r3, r7, #7
 800483e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004840:	e0a7      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004844:	3301      	adds	r3, #1
 8004846:	d100      	bne.n	800484a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004848:	e0a3      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484a:	f7fc fe11 	bl	8001470 <HAL_GetTick>
 800484e:	0002      	movs	r2, r0
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004856:	429a      	cmp	r2, r3
 8004858:	d302      	bcc.n	8004860 <UART_WaitOnFlagUntilTimeout+0x30>
 800485a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800485c:	2b00      	cmp	r3, #0
 800485e:	d13f      	bne.n	80048e0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004860:	f3ef 8310 	mrs	r3, PRIMASK
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004868:	647b      	str	r3, [r7, #68]	; 0x44
 800486a:	2301      	movs	r3, #1
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	f383 8810 	msr	PRIMASK, r3
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	494e      	ldr	r1, [pc, #312]	; (80049bc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004882:	400a      	ands	r2, r1
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004888:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	f383 8810 	msr	PRIMASK, r3
}
 8004890:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004892:	f3ef 8310 	mrs	r3, PRIMASK
 8004896:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489a:	643b      	str	r3, [r7, #64]	; 0x40
 800489c:	2301      	movs	r3, #1
 800489e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	f383 8810 	msr	PRIMASK, r3
}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2101      	movs	r1, #1
 80048b4:	438a      	bics	r2, r1
 80048b6:	609a      	str	r2, [r3, #8]
 80048b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048be:	f383 8810 	msr	PRIMASK, r3
}
 80048c2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2288      	movs	r2, #136	; 0x88
 80048c8:	2120      	movs	r1, #32
 80048ca:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	228c      	movs	r2, #140	; 0x8c
 80048d0:	2120      	movs	r1, #32
 80048d2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2284      	movs	r2, #132	; 0x84
 80048d8:	2100      	movs	r1, #0
 80048da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e069      	b.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2204      	movs	r2, #4
 80048e8:	4013      	ands	r3, r2
 80048ea:	d052      	beq.n	8004992 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69da      	ldr	r2, [r3, #28]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	401a      	ands	r2, r3
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d148      	bne.n	8004992 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2280      	movs	r2, #128	; 0x80
 8004906:	0112      	lsls	r2, r2, #4
 8004908:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490a:	f3ef 8310 	mrs	r3, PRIMASK
 800490e:	613b      	str	r3, [r7, #16]
  return(result);
 8004910:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004914:	2301      	movs	r3, #1
 8004916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f383 8810 	msr	PRIMASK, r3
}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4924      	ldr	r1, [pc, #144]	; (80049bc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800492c:	400a      	ands	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004932:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	f383 8810 	msr	PRIMASK, r3
}
 800493a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493c:	f3ef 8310 	mrs	r3, PRIMASK
 8004940:	61fb      	str	r3, [r7, #28]
  return(result);
 8004942:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004944:	64bb      	str	r3, [r7, #72]	; 0x48
 8004946:	2301      	movs	r3, #1
 8004948:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	f383 8810 	msr	PRIMASK, r3
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2101      	movs	r1, #1
 800495e:	438a      	bics	r2, r1
 8004960:	609a      	str	r2, [r3, #8]
 8004962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	f383 8810 	msr	PRIMASK, r3
}
 800496c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2288      	movs	r2, #136	; 0x88
 8004972:	2120      	movs	r1, #32
 8004974:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	228c      	movs	r2, #140	; 0x8c
 800497a:	2120      	movs	r1, #32
 800497c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2290      	movs	r2, #144	; 0x90
 8004982:	2120      	movs	r1, #32
 8004984:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2284      	movs	r2, #132	; 0x84
 800498a:	2100      	movs	r1, #0
 800498c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e010      	b.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	4013      	ands	r3, r2
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	425a      	negs	r2, r3
 80049a2:	4153      	adcs	r3, r2
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	001a      	movs	r2, r3
 80049a8:	1dfb      	adds	r3, r7, #7
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d100      	bne.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x182>
 80049b0:	e747      	b.n	8004842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b014      	add	sp, #80	; 0x50
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	fffffe5f 	.word	0xfffffe5f

080049c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b098      	sub	sp, #96	; 0x60
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	1dbb      	adds	r3, r7, #6
 80049cc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1dba      	adds	r2, r7, #6
 80049d8:	215c      	movs	r1, #92	; 0x5c
 80049da:	8812      	ldrh	r2, [r2, #0]
 80049dc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1dba      	adds	r2, r7, #6
 80049e2:	215e      	movs	r1, #94	; 0x5e
 80049e4:	8812      	ldrh	r2, [r2, #0]
 80049e6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	015b      	lsls	r3, r3, #5
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d10d      	bne.n	8004a16 <UART_Start_Receive_IT+0x56>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d104      	bne.n	8004a0c <UART_Start_Receive_IT+0x4c>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2260      	movs	r2, #96	; 0x60
 8004a06:	497b      	ldr	r1, [pc, #492]	; (8004bf4 <UART_Start_Receive_IT+0x234>)
 8004a08:	5299      	strh	r1, [r3, r2]
 8004a0a:	e02e      	b.n	8004a6a <UART_Start_Receive_IT+0xaa>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2260      	movs	r2, #96	; 0x60
 8004a10:	21ff      	movs	r1, #255	; 0xff
 8004a12:	5299      	strh	r1, [r3, r2]
 8004a14:	e029      	b.n	8004a6a <UART_Start_Receive_IT+0xaa>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10d      	bne.n	8004a3a <UART_Start_Receive_IT+0x7a>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <UART_Start_Receive_IT+0x70>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2260      	movs	r2, #96	; 0x60
 8004a2a:	21ff      	movs	r1, #255	; 0xff
 8004a2c:	5299      	strh	r1, [r3, r2]
 8004a2e:	e01c      	b.n	8004a6a <UART_Start_Receive_IT+0xaa>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2260      	movs	r2, #96	; 0x60
 8004a34:	217f      	movs	r1, #127	; 0x7f
 8004a36:	5299      	strh	r1, [r3, r2]
 8004a38:	e017      	b.n	8004a6a <UART_Start_Receive_IT+0xaa>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	2380      	movs	r3, #128	; 0x80
 8004a40:	055b      	lsls	r3, r3, #21
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d10d      	bne.n	8004a62 <UART_Start_Receive_IT+0xa2>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d104      	bne.n	8004a58 <UART_Start_Receive_IT+0x98>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2260      	movs	r2, #96	; 0x60
 8004a52:	217f      	movs	r1, #127	; 0x7f
 8004a54:	5299      	strh	r1, [r3, r2]
 8004a56:	e008      	b.n	8004a6a <UART_Start_Receive_IT+0xaa>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2260      	movs	r2, #96	; 0x60
 8004a5c:	213f      	movs	r1, #63	; 0x3f
 8004a5e:	5299      	strh	r1, [r3, r2]
 8004a60:	e003      	b.n	8004a6a <UART_Start_Receive_IT+0xaa>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2260      	movs	r2, #96	; 0x60
 8004a66:	2100      	movs	r1, #0
 8004a68:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2290      	movs	r2, #144	; 0x90
 8004a6e:	2100      	movs	r1, #0
 8004a70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	228c      	movs	r2, #140	; 0x8c
 8004a76:	2122      	movs	r1, #34	; 0x22
 8004a78:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8004a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a84:	2301      	movs	r3, #1
 8004a86:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8a:	f383 8810 	msr	PRIMASK, r3
}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa6:	f383 8810 	msr	PRIMASK, r3
}
 8004aaa:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	059b      	lsls	r3, r3, #22
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d150      	bne.n	8004b5a <UART_Start_Receive_IT+0x19a>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2268      	movs	r2, #104	; 0x68
 8004abc:	5a9b      	ldrh	r3, [r3, r2]
 8004abe:	1dba      	adds	r2, r7, #6
 8004ac0:	8812      	ldrh	r2, [r2, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d349      	bcc.n	8004b5a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	015b      	lsls	r3, r3, #5
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d107      	bne.n	8004ae2 <UART_Start_Receive_IT+0x122>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a46      	ldr	r2, [pc, #280]	; (8004bf8 <UART_Start_Receive_IT+0x238>)
 8004ade:	675a      	str	r2, [r3, #116]	; 0x74
 8004ae0:	e002      	b.n	8004ae8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a45      	ldr	r2, [pc, #276]	; (8004bfc <UART_Start_Receive_IT+0x23c>)
 8004ae6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d019      	beq.n	8004b24 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af0:	f3ef 8310 	mrs	r3, PRIMASK
 8004af4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004afa:	2301      	movs	r3, #1
 8004afc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	f383 8810 	msr	PRIMASK, r3
}
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2180      	movs	r1, #128	; 0x80
 8004b12:	0049      	lsls	r1, r1, #1
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1e:	f383 8810 	msr	PRIMASK, r3
}
 8004b22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b24:	f3ef 8310 	mrs	r3, PRIMASK
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8004b2e:	2301      	movs	r3, #1
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	f383 8810 	msr	PRIMASK, r3
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2180      	movs	r1, #128	; 0x80
 8004b46:	0549      	lsls	r1, r1, #21
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	f383 8810 	msr	PRIMASK, r3
}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	e047      	b.n	8004bea <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	2380      	movs	r3, #128	; 0x80
 8004b60:	015b      	lsls	r3, r3, #5
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d107      	bne.n	8004b76 <UART_Start_Receive_IT+0x1b6>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d103      	bne.n	8004b76 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a23      	ldr	r2, [pc, #140]	; (8004c00 <UART_Start_Receive_IT+0x240>)
 8004b72:	675a      	str	r2, [r3, #116]	; 0x74
 8004b74:	e002      	b.n	8004b7c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4a22      	ldr	r2, [pc, #136]	; (8004c04 <UART_Start_Receive_IT+0x244>)
 8004b7a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d019      	beq.n	8004bb8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b84:	f3ef 8310 	mrs	r3, PRIMASK
 8004b88:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b8a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b8e:	2301      	movs	r3, #1
 8004b90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f383 8810 	msr	PRIMASK, r3
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2190      	movs	r1, #144	; 0x90
 8004ba6:	0049      	lsls	r1, r1, #1
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	f383 8810 	msr	PRIMASK, r3
}
 8004bb6:	e018      	b.n	8004bea <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bbc:	613b      	str	r3, [r7, #16]
  return(result);
 8004bbe:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bc0:	653b      	str	r3, [r7, #80]	; 0x50
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f383 8810 	msr	PRIMASK, r3
}
 8004bcc:	46c0      	nop			; (mov r8, r8)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2120      	movs	r1, #32
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f383 8810 	msr	PRIMASK, r3
}
 8004be8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	0018      	movs	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b018      	add	sp, #96	; 0x60
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	000001ff 	.word	0x000001ff
 8004bf8:	08005331 	.word	0x08005331
 8004bfc:	08005045 	.word	0x08005045
 8004c00:	08004ed1 	.word	0x08004ed1
 8004c04:	08004d5d 	.word	0x08004d5d

08004c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08e      	sub	sp, #56	; 0x38
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c10:	f3ef 8310 	mrs	r3, PRIMASK
 8004c14:	617b      	str	r3, [r7, #20]
  return(result);
 8004c16:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f383 8810 	msr	PRIMASK, r3
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4926      	ldr	r1, [pc, #152]	; (8004ccc <UART_EndRxTransfer+0xc4>)
 8004c32:	400a      	ands	r2, r1
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f383 8810 	msr	PRIMASK, r3
}
 8004c40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c42:	f3ef 8310 	mrs	r3, PRIMASK
 8004c46:	623b      	str	r3, [r7, #32]
  return(result);
 8004c48:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c4a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	f383 8810 	msr	PRIMASK, r3
}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	491b      	ldr	r1, [pc, #108]	; (8004cd0 <UART_EndRxTransfer+0xc8>)
 8004c64:	400a      	ands	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	f383 8810 	msr	PRIMASK, r3
}
 8004c72:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d118      	bne.n	8004cae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c80:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c82:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c86:	2301      	movs	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f383 8810 	msr	PRIMASK, r3
}
 8004c90:	46c0      	nop			; (mov r8, r8)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2110      	movs	r1, #16
 8004c9e:	438a      	bics	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f383 8810 	msr	PRIMASK, r3
}
 8004cac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	228c      	movs	r2, #140	; 0x8c
 8004cb2:	2120      	movs	r1, #32
 8004cb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b00e      	add	sp, #56	; 0x38
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	fffffedf 	.word	0xfffffedf
 8004cd0:	effffffe 	.word	0xeffffffe

08004cd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	225e      	movs	r2, #94	; 0x5e
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2256      	movs	r2, #86	; 0x56
 8004cee:	2100      	movs	r1, #0
 8004cf0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7ff fae1 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b004      	add	sp, #16
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b086      	sub	sp, #24
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d10:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	2301      	movs	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f383 8810 	msr	PRIMASK, r3
}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2140      	movs	r1, #64	; 0x40
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f383 8810 	msr	PRIMASK, r3
}
 8004d3a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2288      	movs	r2, #136	; 0x88
 8004d40:	2120      	movs	r1, #32
 8004d42:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7ff faad 	bl	80042ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b006      	add	sp, #24
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b090      	sub	sp, #64	; 0x40
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d64:	203e      	movs	r0, #62	; 0x3e
 8004d66:	183b      	adds	r3, r7, r0
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	2160      	movs	r1, #96	; 0x60
 8004d6c:	5a52      	ldrh	r2, [r2, r1]
 8004d6e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	228c      	movs	r2, #140	; 0x8c
 8004d74:	589b      	ldr	r3, [r3, r2]
 8004d76:	2b22      	cmp	r3, #34	; 0x22
 8004d78:	d000      	beq.n	8004d7c <UART_RxISR_8BIT+0x20>
 8004d7a:	e09a      	b.n	8004eb2 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d82:	213c      	movs	r1, #60	; 0x3c
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d88:	187b      	adds	r3, r7, r1
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	183b      	adds	r3, r7, r0
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b2d9      	uxtb	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	400a      	ands	r2, r1
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	225e      	movs	r2, #94	; 0x5e
 8004dac:	5a9b      	ldrh	r3, [r3, r2]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b299      	uxth	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	225e      	movs	r2, #94	; 0x5e
 8004db8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	225e      	movs	r2, #94	; 0x5e
 8004dbe:	5a9b      	ldrh	r3, [r3, r2]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d000      	beq.n	8004dc8 <UART_RxISR_8BIT+0x6c>
 8004dc6:	e07c      	b.n	8004ec2 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dcc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dce:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f383 8810 	msr	PRIMASK, r3
}
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4938      	ldr	r1, [pc, #224]	; (8004ecc <UART_RxISR_8BIT+0x170>)
 8004dea:	400a      	ands	r2, r1
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	f383 8810 	msr	PRIMASK, r3
}
 8004df8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e02:	637b      	str	r3, [r7, #52]	; 0x34
 8004e04:	2301      	movs	r3, #1
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	f383 8810 	msr	PRIMASK, r3
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	438a      	bics	r2, r1
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	f383 8810 	msr	PRIMASK, r3
}
 8004e2a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	228c      	movs	r2, #140	; 0x8c
 8004e30:	2120      	movs	r1, #32
 8004e32:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d12f      	bne.n	8004ea8 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e52:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e54:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e56:	633b      	str	r3, [r7, #48]	; 0x30
 8004e58:	2301      	movs	r3, #1
 8004e5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f383 8810 	msr	PRIMASK, r3
}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2110      	movs	r1, #16
 8004e70:	438a      	bics	r2, r1
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f383 8810 	msr	PRIMASK, r3
}
 8004e7e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2210      	movs	r2, #16
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d103      	bne.n	8004e96 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2210      	movs	r2, #16
 8004e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	225c      	movs	r2, #92	; 0x5c
 8004e9a:	5a9a      	ldrh	r2, [r3, r2]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	0011      	movs	r1, r2
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7ff fa13 	bl	80042cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ea6:	e00c      	b.n	8004ec2 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f7fb fca8 	bl	8000800 <HAL_UART_RxCpltCallback>
}
 8004eb0:	e007      	b.n	8004ec2 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699a      	ldr	r2, [r3, #24]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2108      	movs	r1, #8
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	619a      	str	r2, [r3, #24]
}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b010      	add	sp, #64	; 0x40
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	fffffedf 	.word	0xfffffedf

08004ed0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b090      	sub	sp, #64	; 0x40
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ed8:	203e      	movs	r0, #62	; 0x3e
 8004eda:	183b      	adds	r3, r7, r0
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	2160      	movs	r1, #96	; 0x60
 8004ee0:	5a52      	ldrh	r2, [r2, r1]
 8004ee2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	228c      	movs	r2, #140	; 0x8c
 8004ee8:	589b      	ldr	r3, [r3, r2]
 8004eea:	2b22      	cmp	r3, #34	; 0x22
 8004eec:	d000      	beq.n	8004ef0 <UART_RxISR_16BIT+0x20>
 8004eee:	e09a      	b.n	8005026 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ef6:	213c      	movs	r1, #60	; 0x3c
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f02:	187b      	adds	r3, r7, r1
 8004f04:	183a      	adds	r2, r7, r0
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	8812      	ldrh	r2, [r2, #0]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	225e      	movs	r2, #94	; 0x5e
 8004f20:	5a9b      	ldrh	r3, [r3, r2]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b299      	uxth	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	225e      	movs	r2, #94	; 0x5e
 8004f2c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	225e      	movs	r2, #94	; 0x5e
 8004f32:	5a9b      	ldrh	r3, [r3, r2]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d000      	beq.n	8004f3c <UART_RxISR_16BIT+0x6c>
 8004f3a:	e07c      	b.n	8005036 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f40:	617b      	str	r3, [r7, #20]
  return(result);
 8004f42:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
 8004f46:	2301      	movs	r3, #1
 8004f48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f383 8810 	msr	PRIMASK, r3
}
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4938      	ldr	r1, [pc, #224]	; (8005040 <UART_RxISR_16BIT+0x170>)
 8004f5e:	400a      	ands	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f383 8810 	msr	PRIMASK, r3
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f72:	623b      	str	r3, [r7, #32]
  return(result);
 8004f74:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f76:	633b      	str	r3, [r7, #48]	; 0x30
 8004f78:	2301      	movs	r3, #1
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	f383 8810 	msr	PRIMASK, r3
}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2101      	movs	r1, #1
 8004f90:	438a      	bics	r2, r1
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	f383 8810 	msr	PRIMASK, r3
}
 8004f9e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	228c      	movs	r2, #140	; 0x8c
 8004fa4:	2120      	movs	r1, #32
 8004fa6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d12f      	bne.n	800501c <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fc8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fcc:	2301      	movs	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f383 8810 	msr	PRIMASK, r3
}
 8004fd6:	46c0      	nop			; (mov r8, r8)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2110      	movs	r1, #16
 8004fe4:	438a      	bics	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f383 8810 	msr	PRIMASK, r3
}
 8004ff2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	2210      	movs	r2, #16
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d103      	bne.n	800500a <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2210      	movs	r2, #16
 8005008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	225c      	movs	r2, #92	; 0x5c
 800500e:	5a9a      	ldrh	r2, [r3, r2]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	0011      	movs	r1, r2
 8005014:	0018      	movs	r0, r3
 8005016:	f7ff f959 	bl	80042cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800501a:	e00c      	b.n	8005036 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	0018      	movs	r0, r3
 8005020:	f7fb fbee 	bl	8000800 <HAL_UART_RxCpltCallback>
}
 8005024:	e007      	b.n	8005036 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2108      	movs	r1, #8
 8005032:	430a      	orrs	r2, r1
 8005034:	619a      	str	r2, [r3, #24]
}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	46bd      	mov	sp, r7
 800503a:	b010      	add	sp, #64	; 0x40
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	fffffedf 	.word	0xfffffedf

08005044 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b09c      	sub	sp, #112	; 0x70
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800504c:	236a      	movs	r3, #106	; 0x6a
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	2160      	movs	r1, #96	; 0x60
 8005054:	5a52      	ldrh	r2, [r2, r1]
 8005056:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	228c      	movs	r2, #140	; 0x8c
 8005074:	589b      	ldr	r3, [r3, r2]
 8005076:	2b22      	cmp	r3, #34	; 0x22
 8005078:	d000      	beq.n	800507c <UART_RxISR_8BIT_FIFOEN+0x38>
 800507a:	e144      	b.n	8005306 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800507c:	235e      	movs	r3, #94	; 0x5e
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	2168      	movs	r1, #104	; 0x68
 8005084:	5a52      	ldrh	r2, [r2, r1]
 8005086:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005088:	e0eb      	b.n	8005262 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005090:	215c      	movs	r1, #92	; 0x5c
 8005092:	187b      	adds	r3, r7, r1
 8005094:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005096:	187b      	adds	r3, r7, r1
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b2da      	uxtb	r2, r3
 800509c:	236a      	movs	r3, #106	; 0x6a
 800509e:	18fb      	adds	r3, r7, r3
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b2d9      	uxtb	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	400a      	ands	r2, r1
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	225e      	movs	r2, #94	; 0x5e
 80050bc:	5a9b      	ldrh	r3, [r3, r2]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b299      	uxth	r1, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	225e      	movs	r2, #94	; 0x5e
 80050c8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d4:	2207      	movs	r2, #7
 80050d6:	4013      	ands	r3, r2
 80050d8:	d049      	beq.n	800516e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050dc:	2201      	movs	r2, #1
 80050de:	4013      	ands	r3, r2
 80050e0:	d010      	beq.n	8005104 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80050e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	4013      	ands	r3, r2
 80050ea:	d00b      	beq.n	8005104 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2290      	movs	r2, #144	; 0x90
 80050f8:	589b      	ldr	r3, [r3, r2]
 80050fa:	2201      	movs	r2, #1
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2190      	movs	r1, #144	; 0x90
 8005102:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005106:	2202      	movs	r2, #2
 8005108:	4013      	ands	r3, r2
 800510a:	d00f      	beq.n	800512c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800510c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800510e:	2201      	movs	r2, #1
 8005110:	4013      	ands	r3, r2
 8005112:	d00b      	beq.n	800512c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2202      	movs	r2, #2
 800511a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2290      	movs	r2, #144	; 0x90
 8005120:	589b      	ldr	r3, [r3, r2]
 8005122:	2204      	movs	r2, #4
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2190      	movs	r1, #144	; 0x90
 800512a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800512c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512e:	2204      	movs	r2, #4
 8005130:	4013      	ands	r3, r2
 8005132:	d00f      	beq.n	8005154 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005136:	2201      	movs	r2, #1
 8005138:	4013      	ands	r3, r2
 800513a:	d00b      	beq.n	8005154 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2204      	movs	r2, #4
 8005142:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2290      	movs	r2, #144	; 0x90
 8005148:	589b      	ldr	r3, [r3, r2]
 800514a:	2202      	movs	r2, #2
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2190      	movs	r1, #144	; 0x90
 8005152:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2290      	movs	r2, #144	; 0x90
 8005158:	589b      	ldr	r3, [r3, r2]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	0018      	movs	r0, r3
 8005162:	f7ff f8ab 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2290      	movs	r2, #144	; 0x90
 800516a:	2100      	movs	r1, #0
 800516c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	225e      	movs	r2, #94	; 0x5e
 8005172:	5a9b      	ldrh	r3, [r3, r2]
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d173      	bne.n	8005262 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800517a:	f3ef 8310 	mrs	r3, PRIMASK
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005182:	65bb      	str	r3, [r7, #88]	; 0x58
 8005184:	2301      	movs	r3, #1
 8005186:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	f383 8810 	msr	PRIMASK, r3
}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4961      	ldr	r1, [pc, #388]	; (8005320 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800519c:	400a      	ands	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051a2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a6:	f383 8810 	msr	PRIMASK, r3
}
 80051aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ac:	f3ef 8310 	mrs	r3, PRIMASK
 80051b0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051b4:	657b      	str	r3, [r7, #84]	; 0x54
 80051b6:	2301      	movs	r3, #1
 80051b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051bc:	f383 8810 	msr	PRIMASK, r3
}
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4955      	ldr	r1, [pc, #340]	; (8005324 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80051ce:	400a      	ands	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]
 80051d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051d4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d8:	f383 8810 	msr	PRIMASK, r3
}
 80051dc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	228c      	movs	r2, #140	; 0x8c
 80051e2:	2120      	movs	r1, #32
 80051e4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d12f      	bne.n	800525a <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005200:	f3ef 8310 	mrs	r3, PRIMASK
 8005204:	623b      	str	r3, [r7, #32]
  return(result);
 8005206:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005208:	653b      	str	r3, [r7, #80]	; 0x50
 800520a:	2301      	movs	r3, #1
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	f383 8810 	msr	PRIMASK, r3
}
 8005214:	46c0      	nop			; (mov r8, r8)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2110      	movs	r1, #16
 8005222:	438a      	bics	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	f383 8810 	msr	PRIMASK, r3
}
 8005230:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	2210      	movs	r2, #16
 800523a:	4013      	ands	r3, r2
 800523c:	2b10      	cmp	r3, #16
 800523e:	d103      	bne.n	8005248 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2210      	movs	r2, #16
 8005246:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	225c      	movs	r2, #92	; 0x5c
 800524c:	5a9a      	ldrh	r2, [r3, r2]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	0011      	movs	r1, r2
 8005252:	0018      	movs	r0, r3
 8005254:	f7ff f83a 	bl	80042cc <HAL_UARTEx_RxEventCallback>
 8005258:	e003      	b.n	8005262 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	0018      	movs	r0, r3
 800525e:	f7fb facf 	bl	8000800 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005262:	235e      	movs	r3, #94	; 0x5e
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <UART_RxISR_8BIT_FIFOEN+0x232>
 800526c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526e:	2220      	movs	r2, #32
 8005270:	4013      	ands	r3, r2
 8005272:	d000      	beq.n	8005276 <UART_RxISR_8BIT_FIFOEN+0x232>
 8005274:	e709      	b.n	800508a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005276:	204e      	movs	r0, #78	; 0x4e
 8005278:	183b      	adds	r3, r7, r0
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	215e      	movs	r1, #94	; 0x5e
 800527e:	5a52      	ldrh	r2, [r2, r1]
 8005280:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005282:	0001      	movs	r1, r0
 8005284:	187b      	adds	r3, r7, r1
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d044      	beq.n	8005316 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2268      	movs	r2, #104	; 0x68
 8005290:	5a9b      	ldrh	r3, [r3, r2]
 8005292:	187a      	adds	r2, r7, r1
 8005294:	8812      	ldrh	r2, [r2, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d23d      	bcs.n	8005316 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529a:	f3ef 8310 	mrs	r3, PRIMASK
 800529e:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052a4:	2301      	movs	r3, #1
 80052a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f383 8810 	msr	PRIMASK, r3
}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	491b      	ldr	r1, [pc, #108]	; (8005328 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80052bc:	400a      	ands	r2, r1
 80052be:	609a      	str	r2, [r3, #8]
 80052c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f383 8810 	msr	PRIMASK, r3
}
 80052ca:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a17      	ldr	r2, [pc, #92]	; (800532c <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80052d0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d2:	f3ef 8310 	mrs	r3, PRIMASK
 80052d6:	617b      	str	r3, [r7, #20]
  return(result);
 80052d8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80052da:	647b      	str	r3, [r7, #68]	; 0x44
 80052dc:	2301      	movs	r3, #1
 80052de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f383 8810 	msr	PRIMASK, r3
}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2120      	movs	r1, #32
 80052f4:	430a      	orrs	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f383 8810 	msr	PRIMASK, r3
}
 8005302:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005304:	e007      	b.n	8005316 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2108      	movs	r1, #8
 8005312:	430a      	orrs	r2, r1
 8005314:	619a      	str	r2, [r3, #24]
}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	46bd      	mov	sp, r7
 800531a:	b01c      	add	sp, #112	; 0x70
 800531c:	bd80      	pop	{r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	fffffeff 	.word	0xfffffeff
 8005324:	effffffe 	.word	0xeffffffe
 8005328:	efffffff 	.word	0xefffffff
 800532c:	08004d5d 	.word	0x08004d5d

08005330 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b09e      	sub	sp, #120	; 0x78
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005338:	2372      	movs	r3, #114	; 0x72
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	2160      	movs	r1, #96	; 0x60
 8005340:	5a52      	ldrh	r2, [r2, r1]
 8005342:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	228c      	movs	r2, #140	; 0x8c
 8005360:	589b      	ldr	r3, [r3, r2]
 8005362:	2b22      	cmp	r3, #34	; 0x22
 8005364:	d000      	beq.n	8005368 <UART_RxISR_16BIT_FIFOEN+0x38>
 8005366:	e144      	b.n	80055f2 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005368:	2366      	movs	r3, #102	; 0x66
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	2168      	movs	r1, #104	; 0x68
 8005370:	5a52      	ldrh	r2, [r2, r1]
 8005372:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005374:	e0eb      	b.n	800554e <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800537c:	2164      	movs	r1, #100	; 0x64
 800537e:	187b      	adds	r3, r7, r1
 8005380:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005388:	187b      	adds	r3, r7, r1
 800538a:	2272      	movs	r2, #114	; 0x72
 800538c:	18ba      	adds	r2, r7, r2
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	8812      	ldrh	r2, [r2, #0]
 8005392:	4013      	ands	r3, r2
 8005394:	b29a      	uxth	r2, r3
 8005396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005398:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	1c9a      	adds	r2, r3, #2
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	225e      	movs	r2, #94	; 0x5e
 80053a8:	5a9b      	ldrh	r3, [r3, r2]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b299      	uxth	r1, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	225e      	movs	r2, #94	; 0x5e
 80053b4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80053be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c0:	2207      	movs	r2, #7
 80053c2:	4013      	ands	r3, r2
 80053c4:	d049      	beq.n	800545a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c8:	2201      	movs	r2, #1
 80053ca:	4013      	ands	r3, r2
 80053cc:	d010      	beq.n	80053f0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80053ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053d0:	2380      	movs	r3, #128	; 0x80
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	4013      	ands	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2201      	movs	r2, #1
 80053de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2290      	movs	r2, #144	; 0x90
 80053e4:	589b      	ldr	r3, [r3, r2]
 80053e6:	2201      	movs	r2, #1
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2190      	movs	r1, #144	; 0x90
 80053ee:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f2:	2202      	movs	r2, #2
 80053f4:	4013      	ands	r3, r2
 80053f6:	d00f      	beq.n	8005418 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80053f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053fa:	2201      	movs	r2, #1
 80053fc:	4013      	ands	r3, r2
 80053fe:	d00b      	beq.n	8005418 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2202      	movs	r2, #2
 8005406:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2290      	movs	r2, #144	; 0x90
 800540c:	589b      	ldr	r3, [r3, r2]
 800540e:	2204      	movs	r2, #4
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2190      	movs	r1, #144	; 0x90
 8005416:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800541a:	2204      	movs	r2, #4
 800541c:	4013      	ands	r3, r2
 800541e:	d00f      	beq.n	8005440 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005422:	2201      	movs	r2, #1
 8005424:	4013      	ands	r3, r2
 8005426:	d00b      	beq.n	8005440 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2204      	movs	r2, #4
 800542e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2290      	movs	r2, #144	; 0x90
 8005434:	589b      	ldr	r3, [r3, r2]
 8005436:	2202      	movs	r2, #2
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2190      	movs	r1, #144	; 0x90
 800543e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2290      	movs	r2, #144	; 0x90
 8005444:	589b      	ldr	r3, [r3, r2]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	0018      	movs	r0, r3
 800544e:	f7fe ff35 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2290      	movs	r2, #144	; 0x90
 8005456:	2100      	movs	r1, #0
 8005458:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	225e      	movs	r2, #94	; 0x5e
 800545e:	5a9b      	ldrh	r3, [r3, r2]
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d173      	bne.n	800554e <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005466:	f3ef 8310 	mrs	r3, PRIMASK
 800546a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800546e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005470:	2301      	movs	r3, #1
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005476:	f383 8810 	msr	PRIMASK, r3
}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4961      	ldr	r1, [pc, #388]	; (800560c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8005488:	400a      	ands	r2, r1
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800548e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	f383 8810 	msr	PRIMASK, r3
}
 8005496:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005498:	f3ef 8310 	mrs	r3, PRIMASK
 800549c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800549e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054a2:	2301      	movs	r3, #1
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a8:	f383 8810 	msr	PRIMASK, r3
}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4955      	ldr	r1, [pc, #340]	; (8005610 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80054ba:	400a      	ands	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]
 80054be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054c0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c4:	f383 8810 	msr	PRIMASK, r3
}
 80054c8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	228c      	movs	r2, #140	; 0x8c
 80054ce:	2120      	movs	r1, #32
 80054d0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d12f      	bne.n	8005546 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ec:	f3ef 8310 	mrs	r3, PRIMASK
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f4:	657b      	str	r3, [r7, #84]	; 0x54
 80054f6:	2301      	movs	r3, #1
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	f383 8810 	msr	PRIMASK, r3
}
 8005500:	46c0      	nop			; (mov r8, r8)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2110      	movs	r1, #16
 800550e:	438a      	bics	r2, r1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005514:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005518:	f383 8810 	msr	PRIMASK, r3
}
 800551c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	2210      	movs	r2, #16
 8005526:	4013      	ands	r3, r2
 8005528:	2b10      	cmp	r3, #16
 800552a:	d103      	bne.n	8005534 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2210      	movs	r2, #16
 8005532:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	225c      	movs	r2, #92	; 0x5c
 8005538:	5a9a      	ldrh	r2, [r3, r2]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0011      	movs	r1, r2
 800553e:	0018      	movs	r0, r3
 8005540:	f7fe fec4 	bl	80042cc <HAL_UARTEx_RxEventCallback>
 8005544:	e003      	b.n	800554e <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	0018      	movs	r0, r3
 800554a:	f7fb f959 	bl	8000800 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800554e:	2366      	movs	r3, #102	; 0x66
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d004      	beq.n	8005562 <UART_RxISR_16BIT_FIFOEN+0x232>
 8005558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800555a:	2220      	movs	r2, #32
 800555c:	4013      	ands	r3, r2
 800555e:	d000      	beq.n	8005562 <UART_RxISR_16BIT_FIFOEN+0x232>
 8005560:	e709      	b.n	8005376 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005562:	2052      	movs	r0, #82	; 0x52
 8005564:	183b      	adds	r3, r7, r0
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	215e      	movs	r1, #94	; 0x5e
 800556a:	5a52      	ldrh	r2, [r2, r1]
 800556c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800556e:	0001      	movs	r1, r0
 8005570:	187b      	adds	r3, r7, r1
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d044      	beq.n	8005602 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2268      	movs	r2, #104	; 0x68
 800557c:	5a9b      	ldrh	r3, [r3, r2]
 800557e:	187a      	adds	r2, r7, r1
 8005580:	8812      	ldrh	r2, [r2, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d23d      	bcs.n	8005602 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005586:	f3ef 8310 	mrs	r3, PRIMASK
 800558a:	60fb      	str	r3, [r7, #12]
  return(result);
 800558c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800558e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005590:	2301      	movs	r3, #1
 8005592:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f383 8810 	msr	PRIMASK, r3
}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	491b      	ldr	r1, [pc, #108]	; (8005614 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80055a8:	400a      	ands	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]
 80055ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f383 8810 	msr	PRIMASK, r3
}
 80055b6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a17      	ldr	r2, [pc, #92]	; (8005618 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80055bc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055be:	f3ef 8310 	mrs	r3, PRIMASK
 80055c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80055c4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055c8:	2301      	movs	r3, #1
 80055ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f383 8810 	msr	PRIMASK, r3
}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2120      	movs	r1, #32
 80055e0:	430a      	orrs	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	f383 8810 	msr	PRIMASK, r3
}
 80055ee:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055f0:	e007      	b.n	8005602 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699a      	ldr	r2, [r3, #24]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2108      	movs	r1, #8
 80055fe:	430a      	orrs	r2, r1
 8005600:	619a      	str	r2, [r3, #24]
}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	b01e      	add	sp, #120	; 0x78
 8005608:	bd80      	pop	{r7, pc}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	fffffeff 	.word	0xfffffeff
 8005610:	effffffe 	.word	0xeffffffe
 8005614:	efffffff 	.word	0xefffffff
 8005618:	08004ed1 	.word	0x08004ed1

0800561c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005624:	46c0      	nop			; (mov r8, r8)
 8005626:	46bd      	mov	sp, r7
 8005628:	b002      	add	sp, #8
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005634:	46c0      	nop			; (mov r8, r8)
 8005636:	46bd      	mov	sp, r7
 8005638:	b002      	add	sp, #8
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005644:	46c0      	nop			; (mov r8, r8)
 8005646:	46bd      	mov	sp, r7
 8005648:	b002      	add	sp, #8
 800564a:	bd80      	pop	{r7, pc}

0800564c <__errno>:
 800564c:	4b01      	ldr	r3, [pc, #4]	; (8005654 <__errno+0x8>)
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	4770      	bx	lr
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	2000033c 	.word	0x2000033c

08005658 <__libc_init_array>:
 8005658:	b570      	push	{r4, r5, r6, lr}
 800565a:	2600      	movs	r6, #0
 800565c:	4d0c      	ldr	r5, [pc, #48]	; (8005690 <__libc_init_array+0x38>)
 800565e:	4c0d      	ldr	r4, [pc, #52]	; (8005694 <__libc_init_array+0x3c>)
 8005660:	1b64      	subs	r4, r4, r5
 8005662:	10a4      	asrs	r4, r4, #2
 8005664:	42a6      	cmp	r6, r4
 8005666:	d109      	bne.n	800567c <__libc_init_array+0x24>
 8005668:	2600      	movs	r6, #0
 800566a:	f000 fc8b 	bl	8005f84 <_init>
 800566e:	4d0a      	ldr	r5, [pc, #40]	; (8005698 <__libc_init_array+0x40>)
 8005670:	4c0a      	ldr	r4, [pc, #40]	; (800569c <__libc_init_array+0x44>)
 8005672:	1b64      	subs	r4, r4, r5
 8005674:	10a4      	asrs	r4, r4, #2
 8005676:	42a6      	cmp	r6, r4
 8005678:	d105      	bne.n	8005686 <__libc_init_array+0x2e>
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	00b3      	lsls	r3, r6, #2
 800567e:	58eb      	ldr	r3, [r5, r3]
 8005680:	4798      	blx	r3
 8005682:	3601      	adds	r6, #1
 8005684:	e7ee      	b.n	8005664 <__libc_init_array+0xc>
 8005686:	00b3      	lsls	r3, r6, #2
 8005688:	58eb      	ldr	r3, [r5, r3]
 800568a:	4798      	blx	r3
 800568c:	3601      	adds	r6, #1
 800568e:	e7f2      	b.n	8005676 <__libc_init_array+0x1e>
 8005690:	08006100 	.word	0x08006100
 8005694:	08006100 	.word	0x08006100
 8005698:	08006100 	.word	0x08006100
 800569c:	08006104 	.word	0x08006104

080056a0 <memcpy>:
 80056a0:	2300      	movs	r3, #0
 80056a2:	b510      	push	{r4, lr}
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d100      	bne.n	80056aa <memcpy+0xa>
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	5ccc      	ldrb	r4, [r1, r3]
 80056ac:	54c4      	strb	r4, [r0, r3]
 80056ae:	3301      	adds	r3, #1
 80056b0:	e7f8      	b.n	80056a4 <memcpy+0x4>

080056b2 <memset>:
 80056b2:	0003      	movs	r3, r0
 80056b4:	1882      	adds	r2, r0, r2
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d100      	bne.n	80056bc <memset+0xa>
 80056ba:	4770      	bx	lr
 80056bc:	7019      	strb	r1, [r3, #0]
 80056be:	3301      	adds	r3, #1
 80056c0:	e7f9      	b.n	80056b6 <memset+0x4>
	...

080056c4 <siprintf>:
 80056c4:	b40e      	push	{r1, r2, r3}
 80056c6:	b500      	push	{lr}
 80056c8:	490b      	ldr	r1, [pc, #44]	; (80056f8 <siprintf+0x34>)
 80056ca:	b09c      	sub	sp, #112	; 0x70
 80056cc:	ab1d      	add	r3, sp, #116	; 0x74
 80056ce:	9002      	str	r0, [sp, #8]
 80056d0:	9006      	str	r0, [sp, #24]
 80056d2:	9107      	str	r1, [sp, #28]
 80056d4:	9104      	str	r1, [sp, #16]
 80056d6:	4809      	ldr	r0, [pc, #36]	; (80056fc <siprintf+0x38>)
 80056d8:	4909      	ldr	r1, [pc, #36]	; (8005700 <siprintf+0x3c>)
 80056da:	cb04      	ldmia	r3!, {r2}
 80056dc:	9105      	str	r1, [sp, #20]
 80056de:	6800      	ldr	r0, [r0, #0]
 80056e0:	a902      	add	r1, sp, #8
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	f000 f870 	bl	80057c8 <_svfiprintf_r>
 80056e8:	2300      	movs	r3, #0
 80056ea:	9a02      	ldr	r2, [sp, #8]
 80056ec:	7013      	strb	r3, [r2, #0]
 80056ee:	b01c      	add	sp, #112	; 0x70
 80056f0:	bc08      	pop	{r3}
 80056f2:	b003      	add	sp, #12
 80056f4:	4718      	bx	r3
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	7fffffff 	.word	0x7fffffff
 80056fc:	2000033c 	.word	0x2000033c
 8005700:	ffff0208 	.word	0xffff0208

08005704 <__ssputs_r>:
 8005704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005706:	688e      	ldr	r6, [r1, #8]
 8005708:	b085      	sub	sp, #20
 800570a:	0007      	movs	r7, r0
 800570c:	000c      	movs	r4, r1
 800570e:	9203      	str	r2, [sp, #12]
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	429e      	cmp	r6, r3
 8005714:	d83c      	bhi.n	8005790 <__ssputs_r+0x8c>
 8005716:	2390      	movs	r3, #144	; 0x90
 8005718:	898a      	ldrh	r2, [r1, #12]
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	421a      	tst	r2, r3
 800571e:	d034      	beq.n	800578a <__ssputs_r+0x86>
 8005720:	6909      	ldr	r1, [r1, #16]
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	6960      	ldr	r0, [r4, #20]
 8005726:	1a5b      	subs	r3, r3, r1
 8005728:	9302      	str	r3, [sp, #8]
 800572a:	2303      	movs	r3, #3
 800572c:	4343      	muls	r3, r0
 800572e:	0fdd      	lsrs	r5, r3, #31
 8005730:	18ed      	adds	r5, r5, r3
 8005732:	9b01      	ldr	r3, [sp, #4]
 8005734:	9802      	ldr	r0, [sp, #8]
 8005736:	3301      	adds	r3, #1
 8005738:	181b      	adds	r3, r3, r0
 800573a:	106d      	asrs	r5, r5, #1
 800573c:	42ab      	cmp	r3, r5
 800573e:	d900      	bls.n	8005742 <__ssputs_r+0x3e>
 8005740:	001d      	movs	r5, r3
 8005742:	0553      	lsls	r3, r2, #21
 8005744:	d532      	bpl.n	80057ac <__ssputs_r+0xa8>
 8005746:	0029      	movs	r1, r5
 8005748:	0038      	movs	r0, r7
 800574a:	f000 fb49 	bl	8005de0 <_malloc_r>
 800574e:	1e06      	subs	r6, r0, #0
 8005750:	d109      	bne.n	8005766 <__ssputs_r+0x62>
 8005752:	230c      	movs	r3, #12
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	2340      	movs	r3, #64	; 0x40
 8005758:	2001      	movs	r0, #1
 800575a:	89a2      	ldrh	r2, [r4, #12]
 800575c:	4240      	negs	r0, r0
 800575e:	4313      	orrs	r3, r2
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	b005      	add	sp, #20
 8005764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005766:	9a02      	ldr	r2, [sp, #8]
 8005768:	6921      	ldr	r1, [r4, #16]
 800576a:	f7ff ff99 	bl	80056a0 <memcpy>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <__ssputs_r+0xc0>)
 8005772:	401a      	ands	r2, r3
 8005774:	2380      	movs	r3, #128	; 0x80
 8005776:	4313      	orrs	r3, r2
 8005778:	81a3      	strh	r3, [r4, #12]
 800577a:	9b02      	ldr	r3, [sp, #8]
 800577c:	6126      	str	r6, [r4, #16]
 800577e:	18f6      	adds	r6, r6, r3
 8005780:	6026      	str	r6, [r4, #0]
 8005782:	6165      	str	r5, [r4, #20]
 8005784:	9e01      	ldr	r6, [sp, #4]
 8005786:	1aed      	subs	r5, r5, r3
 8005788:	60a5      	str	r5, [r4, #8]
 800578a:	9b01      	ldr	r3, [sp, #4]
 800578c:	429e      	cmp	r6, r3
 800578e:	d900      	bls.n	8005792 <__ssputs_r+0x8e>
 8005790:	9e01      	ldr	r6, [sp, #4]
 8005792:	0032      	movs	r2, r6
 8005794:	9903      	ldr	r1, [sp, #12]
 8005796:	6820      	ldr	r0, [r4, #0]
 8005798:	f000 faa3 	bl	8005ce2 <memmove>
 800579c:	68a3      	ldr	r3, [r4, #8]
 800579e:	2000      	movs	r0, #0
 80057a0:	1b9b      	subs	r3, r3, r6
 80057a2:	60a3      	str	r3, [r4, #8]
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	199e      	adds	r6, r3, r6
 80057a8:	6026      	str	r6, [r4, #0]
 80057aa:	e7da      	b.n	8005762 <__ssputs_r+0x5e>
 80057ac:	002a      	movs	r2, r5
 80057ae:	0038      	movs	r0, r7
 80057b0:	f000 fb8c 	bl	8005ecc <_realloc_r>
 80057b4:	1e06      	subs	r6, r0, #0
 80057b6:	d1e0      	bne.n	800577a <__ssputs_r+0x76>
 80057b8:	0038      	movs	r0, r7
 80057ba:	6921      	ldr	r1, [r4, #16]
 80057bc:	f000 faa4 	bl	8005d08 <_free_r>
 80057c0:	e7c7      	b.n	8005752 <__ssputs_r+0x4e>
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	fffffb7f 	.word	0xfffffb7f

080057c8 <_svfiprintf_r>:
 80057c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ca:	b0a1      	sub	sp, #132	; 0x84
 80057cc:	9003      	str	r0, [sp, #12]
 80057ce:	001d      	movs	r5, r3
 80057d0:	898b      	ldrh	r3, [r1, #12]
 80057d2:	000f      	movs	r7, r1
 80057d4:	0016      	movs	r6, r2
 80057d6:	061b      	lsls	r3, r3, #24
 80057d8:	d511      	bpl.n	80057fe <_svfiprintf_r+0x36>
 80057da:	690b      	ldr	r3, [r1, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10e      	bne.n	80057fe <_svfiprintf_r+0x36>
 80057e0:	2140      	movs	r1, #64	; 0x40
 80057e2:	f000 fafd 	bl	8005de0 <_malloc_r>
 80057e6:	6038      	str	r0, [r7, #0]
 80057e8:	6138      	str	r0, [r7, #16]
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d105      	bne.n	80057fa <_svfiprintf_r+0x32>
 80057ee:	230c      	movs	r3, #12
 80057f0:	9a03      	ldr	r2, [sp, #12]
 80057f2:	3801      	subs	r0, #1
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	b021      	add	sp, #132	; 0x84
 80057f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057fa:	2340      	movs	r3, #64	; 0x40
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	2300      	movs	r3, #0
 8005800:	ac08      	add	r4, sp, #32
 8005802:	6163      	str	r3, [r4, #20]
 8005804:	3320      	adds	r3, #32
 8005806:	7663      	strb	r3, [r4, #25]
 8005808:	3310      	adds	r3, #16
 800580a:	76a3      	strb	r3, [r4, #26]
 800580c:	9507      	str	r5, [sp, #28]
 800580e:	0035      	movs	r5, r6
 8005810:	782b      	ldrb	r3, [r5, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <_svfiprintf_r+0x52>
 8005816:	2b25      	cmp	r3, #37	; 0x25
 8005818:	d147      	bne.n	80058aa <_svfiprintf_r+0xe2>
 800581a:	1bab      	subs	r3, r5, r6
 800581c:	9305      	str	r3, [sp, #20]
 800581e:	42b5      	cmp	r5, r6
 8005820:	d00c      	beq.n	800583c <_svfiprintf_r+0x74>
 8005822:	0032      	movs	r2, r6
 8005824:	0039      	movs	r1, r7
 8005826:	9803      	ldr	r0, [sp, #12]
 8005828:	f7ff ff6c 	bl	8005704 <__ssputs_r>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d100      	bne.n	8005832 <_svfiprintf_r+0x6a>
 8005830:	e0ae      	b.n	8005990 <_svfiprintf_r+0x1c8>
 8005832:	6962      	ldr	r2, [r4, #20]
 8005834:	9b05      	ldr	r3, [sp, #20]
 8005836:	4694      	mov	ip, r2
 8005838:	4463      	add	r3, ip
 800583a:	6163      	str	r3, [r4, #20]
 800583c:	782b      	ldrb	r3, [r5, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d100      	bne.n	8005844 <_svfiprintf_r+0x7c>
 8005842:	e0a5      	b.n	8005990 <_svfiprintf_r+0x1c8>
 8005844:	2201      	movs	r2, #1
 8005846:	2300      	movs	r3, #0
 8005848:	4252      	negs	r2, r2
 800584a:	6062      	str	r2, [r4, #4]
 800584c:	a904      	add	r1, sp, #16
 800584e:	3254      	adds	r2, #84	; 0x54
 8005850:	1852      	adds	r2, r2, r1
 8005852:	1c6e      	adds	r6, r5, #1
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	60e3      	str	r3, [r4, #12]
 8005858:	60a3      	str	r3, [r4, #8]
 800585a:	7013      	strb	r3, [r2, #0]
 800585c:	65a3      	str	r3, [r4, #88]	; 0x58
 800585e:	2205      	movs	r2, #5
 8005860:	7831      	ldrb	r1, [r6, #0]
 8005862:	4854      	ldr	r0, [pc, #336]	; (80059b4 <_svfiprintf_r+0x1ec>)
 8005864:	f000 fa32 	bl	8005ccc <memchr>
 8005868:	1c75      	adds	r5, r6, #1
 800586a:	2800      	cmp	r0, #0
 800586c:	d11f      	bne.n	80058ae <_svfiprintf_r+0xe6>
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	06d3      	lsls	r3, r2, #27
 8005872:	d504      	bpl.n	800587e <_svfiprintf_r+0xb6>
 8005874:	2353      	movs	r3, #83	; 0x53
 8005876:	a904      	add	r1, sp, #16
 8005878:	185b      	adds	r3, r3, r1
 800587a:	2120      	movs	r1, #32
 800587c:	7019      	strb	r1, [r3, #0]
 800587e:	0713      	lsls	r3, r2, #28
 8005880:	d504      	bpl.n	800588c <_svfiprintf_r+0xc4>
 8005882:	2353      	movs	r3, #83	; 0x53
 8005884:	a904      	add	r1, sp, #16
 8005886:	185b      	adds	r3, r3, r1
 8005888:	212b      	movs	r1, #43	; 0x2b
 800588a:	7019      	strb	r1, [r3, #0]
 800588c:	7833      	ldrb	r3, [r6, #0]
 800588e:	2b2a      	cmp	r3, #42	; 0x2a
 8005890:	d016      	beq.n	80058c0 <_svfiprintf_r+0xf8>
 8005892:	0035      	movs	r5, r6
 8005894:	2100      	movs	r1, #0
 8005896:	200a      	movs	r0, #10
 8005898:	68e3      	ldr	r3, [r4, #12]
 800589a:	782a      	ldrb	r2, [r5, #0]
 800589c:	1c6e      	adds	r6, r5, #1
 800589e:	3a30      	subs	r2, #48	; 0x30
 80058a0:	2a09      	cmp	r2, #9
 80058a2:	d94e      	bls.n	8005942 <_svfiprintf_r+0x17a>
 80058a4:	2900      	cmp	r1, #0
 80058a6:	d111      	bne.n	80058cc <_svfiprintf_r+0x104>
 80058a8:	e017      	b.n	80058da <_svfiprintf_r+0x112>
 80058aa:	3501      	adds	r5, #1
 80058ac:	e7b0      	b.n	8005810 <_svfiprintf_r+0x48>
 80058ae:	4b41      	ldr	r3, [pc, #260]	; (80059b4 <_svfiprintf_r+0x1ec>)
 80058b0:	6822      	ldr	r2, [r4, #0]
 80058b2:	1ac0      	subs	r0, r0, r3
 80058b4:	2301      	movs	r3, #1
 80058b6:	4083      	lsls	r3, r0
 80058b8:	4313      	orrs	r3, r2
 80058ba:	002e      	movs	r6, r5
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	e7ce      	b.n	800585e <_svfiprintf_r+0x96>
 80058c0:	9b07      	ldr	r3, [sp, #28]
 80058c2:	1d19      	adds	r1, r3, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	9107      	str	r1, [sp, #28]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	db01      	blt.n	80058d0 <_svfiprintf_r+0x108>
 80058cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80058ce:	e004      	b.n	80058da <_svfiprintf_r+0x112>
 80058d0:	425b      	negs	r3, r3
 80058d2:	60e3      	str	r3, [r4, #12]
 80058d4:	2302      	movs	r3, #2
 80058d6:	4313      	orrs	r3, r2
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	782b      	ldrb	r3, [r5, #0]
 80058dc:	2b2e      	cmp	r3, #46	; 0x2e
 80058de:	d10a      	bne.n	80058f6 <_svfiprintf_r+0x12e>
 80058e0:	786b      	ldrb	r3, [r5, #1]
 80058e2:	2b2a      	cmp	r3, #42	; 0x2a
 80058e4:	d135      	bne.n	8005952 <_svfiprintf_r+0x18a>
 80058e6:	9b07      	ldr	r3, [sp, #28]
 80058e8:	3502      	adds	r5, #2
 80058ea:	1d1a      	adds	r2, r3, #4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	9207      	str	r2, [sp, #28]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	db2b      	blt.n	800594c <_svfiprintf_r+0x184>
 80058f4:	9309      	str	r3, [sp, #36]	; 0x24
 80058f6:	4e30      	ldr	r6, [pc, #192]	; (80059b8 <_svfiprintf_r+0x1f0>)
 80058f8:	2203      	movs	r2, #3
 80058fa:	0030      	movs	r0, r6
 80058fc:	7829      	ldrb	r1, [r5, #0]
 80058fe:	f000 f9e5 	bl	8005ccc <memchr>
 8005902:	2800      	cmp	r0, #0
 8005904:	d006      	beq.n	8005914 <_svfiprintf_r+0x14c>
 8005906:	2340      	movs	r3, #64	; 0x40
 8005908:	1b80      	subs	r0, r0, r6
 800590a:	4083      	lsls	r3, r0
 800590c:	6822      	ldr	r2, [r4, #0]
 800590e:	3501      	adds	r5, #1
 8005910:	4313      	orrs	r3, r2
 8005912:	6023      	str	r3, [r4, #0]
 8005914:	7829      	ldrb	r1, [r5, #0]
 8005916:	2206      	movs	r2, #6
 8005918:	4828      	ldr	r0, [pc, #160]	; (80059bc <_svfiprintf_r+0x1f4>)
 800591a:	1c6e      	adds	r6, r5, #1
 800591c:	7621      	strb	r1, [r4, #24]
 800591e:	f000 f9d5 	bl	8005ccc <memchr>
 8005922:	2800      	cmp	r0, #0
 8005924:	d03c      	beq.n	80059a0 <_svfiprintf_r+0x1d8>
 8005926:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <_svfiprintf_r+0x1f8>)
 8005928:	2b00      	cmp	r3, #0
 800592a:	d125      	bne.n	8005978 <_svfiprintf_r+0x1b0>
 800592c:	2207      	movs	r2, #7
 800592e:	9b07      	ldr	r3, [sp, #28]
 8005930:	3307      	adds	r3, #7
 8005932:	4393      	bics	r3, r2
 8005934:	3308      	adds	r3, #8
 8005936:	9307      	str	r3, [sp, #28]
 8005938:	6963      	ldr	r3, [r4, #20]
 800593a:	9a04      	ldr	r2, [sp, #16]
 800593c:	189b      	adds	r3, r3, r2
 800593e:	6163      	str	r3, [r4, #20]
 8005940:	e765      	b.n	800580e <_svfiprintf_r+0x46>
 8005942:	4343      	muls	r3, r0
 8005944:	0035      	movs	r5, r6
 8005946:	2101      	movs	r1, #1
 8005948:	189b      	adds	r3, r3, r2
 800594a:	e7a6      	b.n	800589a <_svfiprintf_r+0xd2>
 800594c:	2301      	movs	r3, #1
 800594e:	425b      	negs	r3, r3
 8005950:	e7d0      	b.n	80058f4 <_svfiprintf_r+0x12c>
 8005952:	2300      	movs	r3, #0
 8005954:	200a      	movs	r0, #10
 8005956:	001a      	movs	r2, r3
 8005958:	3501      	adds	r5, #1
 800595a:	6063      	str	r3, [r4, #4]
 800595c:	7829      	ldrb	r1, [r5, #0]
 800595e:	1c6e      	adds	r6, r5, #1
 8005960:	3930      	subs	r1, #48	; 0x30
 8005962:	2909      	cmp	r1, #9
 8005964:	d903      	bls.n	800596e <_svfiprintf_r+0x1a6>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0c5      	beq.n	80058f6 <_svfiprintf_r+0x12e>
 800596a:	9209      	str	r2, [sp, #36]	; 0x24
 800596c:	e7c3      	b.n	80058f6 <_svfiprintf_r+0x12e>
 800596e:	4342      	muls	r2, r0
 8005970:	0035      	movs	r5, r6
 8005972:	2301      	movs	r3, #1
 8005974:	1852      	adds	r2, r2, r1
 8005976:	e7f1      	b.n	800595c <_svfiprintf_r+0x194>
 8005978:	ab07      	add	r3, sp, #28
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	003a      	movs	r2, r7
 800597e:	0021      	movs	r1, r4
 8005980:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <_svfiprintf_r+0x1fc>)
 8005982:	9803      	ldr	r0, [sp, #12]
 8005984:	e000      	b.n	8005988 <_svfiprintf_r+0x1c0>
 8005986:	bf00      	nop
 8005988:	9004      	str	r0, [sp, #16]
 800598a:	9b04      	ldr	r3, [sp, #16]
 800598c:	3301      	adds	r3, #1
 800598e:	d1d3      	bne.n	8005938 <_svfiprintf_r+0x170>
 8005990:	89bb      	ldrh	r3, [r7, #12]
 8005992:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005994:	065b      	lsls	r3, r3, #25
 8005996:	d400      	bmi.n	800599a <_svfiprintf_r+0x1d2>
 8005998:	e72d      	b.n	80057f6 <_svfiprintf_r+0x2e>
 800599a:	2001      	movs	r0, #1
 800599c:	4240      	negs	r0, r0
 800599e:	e72a      	b.n	80057f6 <_svfiprintf_r+0x2e>
 80059a0:	ab07      	add	r3, sp, #28
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	003a      	movs	r2, r7
 80059a6:	0021      	movs	r1, r4
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <_svfiprintf_r+0x1fc>)
 80059aa:	9803      	ldr	r0, [sp, #12]
 80059ac:	f000 f87c 	bl	8005aa8 <_printf_i>
 80059b0:	e7ea      	b.n	8005988 <_svfiprintf_r+0x1c0>
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	080060cc 	.word	0x080060cc
 80059b8:	080060d2 	.word	0x080060d2
 80059bc:	080060d6 	.word	0x080060d6
 80059c0:	00000000 	.word	0x00000000
 80059c4:	08005705 	.word	0x08005705

080059c8 <_printf_common>:
 80059c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ca:	0015      	movs	r5, r2
 80059cc:	9301      	str	r3, [sp, #4]
 80059ce:	688a      	ldr	r2, [r1, #8]
 80059d0:	690b      	ldr	r3, [r1, #16]
 80059d2:	000c      	movs	r4, r1
 80059d4:	9000      	str	r0, [sp, #0]
 80059d6:	4293      	cmp	r3, r2
 80059d8:	da00      	bge.n	80059dc <_printf_common+0x14>
 80059da:	0013      	movs	r3, r2
 80059dc:	0022      	movs	r2, r4
 80059de:	602b      	str	r3, [r5, #0]
 80059e0:	3243      	adds	r2, #67	; 0x43
 80059e2:	7812      	ldrb	r2, [r2, #0]
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	d001      	beq.n	80059ec <_printf_common+0x24>
 80059e8:	3301      	adds	r3, #1
 80059ea:	602b      	str	r3, [r5, #0]
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	069b      	lsls	r3, r3, #26
 80059f0:	d502      	bpl.n	80059f8 <_printf_common+0x30>
 80059f2:	682b      	ldr	r3, [r5, #0]
 80059f4:	3302      	adds	r3, #2
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	2306      	movs	r3, #6
 80059fc:	0017      	movs	r7, r2
 80059fe:	401f      	ands	r7, r3
 8005a00:	421a      	tst	r2, r3
 8005a02:	d027      	beq.n	8005a54 <_printf_common+0x8c>
 8005a04:	0023      	movs	r3, r4
 8005a06:	3343      	adds	r3, #67	; 0x43
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	1e5a      	subs	r2, r3, #1
 8005a0c:	4193      	sbcs	r3, r2
 8005a0e:	6822      	ldr	r2, [r4, #0]
 8005a10:	0692      	lsls	r2, r2, #26
 8005a12:	d430      	bmi.n	8005a76 <_printf_common+0xae>
 8005a14:	0022      	movs	r2, r4
 8005a16:	9901      	ldr	r1, [sp, #4]
 8005a18:	9800      	ldr	r0, [sp, #0]
 8005a1a:	9e08      	ldr	r6, [sp, #32]
 8005a1c:	3243      	adds	r2, #67	; 0x43
 8005a1e:	47b0      	blx	r6
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d025      	beq.n	8005a70 <_printf_common+0xa8>
 8005a24:	2306      	movs	r3, #6
 8005a26:	6820      	ldr	r0, [r4, #0]
 8005a28:	682a      	ldr	r2, [r5, #0]
 8005a2a:	68e1      	ldr	r1, [r4, #12]
 8005a2c:	2500      	movs	r5, #0
 8005a2e:	4003      	ands	r3, r0
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d103      	bne.n	8005a3c <_printf_common+0x74>
 8005a34:	1a8d      	subs	r5, r1, r2
 8005a36:	43eb      	mvns	r3, r5
 8005a38:	17db      	asrs	r3, r3, #31
 8005a3a:	401d      	ands	r5, r3
 8005a3c:	68a3      	ldr	r3, [r4, #8]
 8005a3e:	6922      	ldr	r2, [r4, #16]
 8005a40:	4293      	cmp	r3, r2
 8005a42:	dd01      	ble.n	8005a48 <_printf_common+0x80>
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	18ed      	adds	r5, r5, r3
 8005a48:	2700      	movs	r7, #0
 8005a4a:	42bd      	cmp	r5, r7
 8005a4c:	d120      	bne.n	8005a90 <_printf_common+0xc8>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e010      	b.n	8005a74 <_printf_common+0xac>
 8005a52:	3701      	adds	r7, #1
 8005a54:	68e3      	ldr	r3, [r4, #12]
 8005a56:	682a      	ldr	r2, [r5, #0]
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	42bb      	cmp	r3, r7
 8005a5c:	ddd2      	ble.n	8005a04 <_printf_common+0x3c>
 8005a5e:	0022      	movs	r2, r4
 8005a60:	2301      	movs	r3, #1
 8005a62:	9901      	ldr	r1, [sp, #4]
 8005a64:	9800      	ldr	r0, [sp, #0]
 8005a66:	9e08      	ldr	r6, [sp, #32]
 8005a68:	3219      	adds	r2, #25
 8005a6a:	47b0      	blx	r6
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d1f0      	bne.n	8005a52 <_printf_common+0x8a>
 8005a70:	2001      	movs	r0, #1
 8005a72:	4240      	negs	r0, r0
 8005a74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a76:	2030      	movs	r0, #48	; 0x30
 8005a78:	18e1      	adds	r1, r4, r3
 8005a7a:	3143      	adds	r1, #67	; 0x43
 8005a7c:	7008      	strb	r0, [r1, #0]
 8005a7e:	0021      	movs	r1, r4
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	3145      	adds	r1, #69	; 0x45
 8005a84:	7809      	ldrb	r1, [r1, #0]
 8005a86:	18a2      	adds	r2, r4, r2
 8005a88:	3243      	adds	r2, #67	; 0x43
 8005a8a:	3302      	adds	r3, #2
 8005a8c:	7011      	strb	r1, [r2, #0]
 8005a8e:	e7c1      	b.n	8005a14 <_printf_common+0x4c>
 8005a90:	0022      	movs	r2, r4
 8005a92:	2301      	movs	r3, #1
 8005a94:	9901      	ldr	r1, [sp, #4]
 8005a96:	9800      	ldr	r0, [sp, #0]
 8005a98:	9e08      	ldr	r6, [sp, #32]
 8005a9a:	321a      	adds	r2, #26
 8005a9c:	47b0      	blx	r6
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	d0e6      	beq.n	8005a70 <_printf_common+0xa8>
 8005aa2:	3701      	adds	r7, #1
 8005aa4:	e7d1      	b.n	8005a4a <_printf_common+0x82>
	...

08005aa8 <_printf_i>:
 8005aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aaa:	b08b      	sub	sp, #44	; 0x2c
 8005aac:	9206      	str	r2, [sp, #24]
 8005aae:	000a      	movs	r2, r1
 8005ab0:	3243      	adds	r2, #67	; 0x43
 8005ab2:	9307      	str	r3, [sp, #28]
 8005ab4:	9005      	str	r0, [sp, #20]
 8005ab6:	9204      	str	r2, [sp, #16]
 8005ab8:	7e0a      	ldrb	r2, [r1, #24]
 8005aba:	000c      	movs	r4, r1
 8005abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005abe:	2a78      	cmp	r2, #120	; 0x78
 8005ac0:	d807      	bhi.n	8005ad2 <_printf_i+0x2a>
 8005ac2:	2a62      	cmp	r2, #98	; 0x62
 8005ac4:	d809      	bhi.n	8005ada <_printf_i+0x32>
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	d100      	bne.n	8005acc <_printf_i+0x24>
 8005aca:	e0c1      	b.n	8005c50 <_printf_i+0x1a8>
 8005acc:	2a58      	cmp	r2, #88	; 0x58
 8005ace:	d100      	bne.n	8005ad2 <_printf_i+0x2a>
 8005ad0:	e08c      	b.n	8005bec <_printf_i+0x144>
 8005ad2:	0026      	movs	r6, r4
 8005ad4:	3642      	adds	r6, #66	; 0x42
 8005ad6:	7032      	strb	r2, [r6, #0]
 8005ad8:	e022      	b.n	8005b20 <_printf_i+0x78>
 8005ada:	0010      	movs	r0, r2
 8005adc:	3863      	subs	r0, #99	; 0x63
 8005ade:	2815      	cmp	r0, #21
 8005ae0:	d8f7      	bhi.n	8005ad2 <_printf_i+0x2a>
 8005ae2:	f7fa fb0d 	bl	8000100 <__gnu_thumb1_case_shi>
 8005ae6:	0016      	.short	0x0016
 8005ae8:	fff6001f 	.word	0xfff6001f
 8005aec:	fff6fff6 	.word	0xfff6fff6
 8005af0:	001ffff6 	.word	0x001ffff6
 8005af4:	fff6fff6 	.word	0xfff6fff6
 8005af8:	fff6fff6 	.word	0xfff6fff6
 8005afc:	003600a8 	.word	0x003600a8
 8005b00:	fff6009a 	.word	0xfff6009a
 8005b04:	00b9fff6 	.word	0x00b9fff6
 8005b08:	0036fff6 	.word	0x0036fff6
 8005b0c:	fff6fff6 	.word	0xfff6fff6
 8005b10:	009e      	.short	0x009e
 8005b12:	0026      	movs	r6, r4
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	3642      	adds	r6, #66	; 0x42
 8005b18:	1d11      	adds	r1, r2, #4
 8005b1a:	6019      	str	r1, [r3, #0]
 8005b1c:	6813      	ldr	r3, [r2, #0]
 8005b1e:	7033      	strb	r3, [r6, #0]
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0a7      	b.n	8005c74 <_printf_i+0x1cc>
 8005b24:	6808      	ldr	r0, [r1, #0]
 8005b26:	6819      	ldr	r1, [r3, #0]
 8005b28:	1d0a      	adds	r2, r1, #4
 8005b2a:	0605      	lsls	r5, r0, #24
 8005b2c:	d50b      	bpl.n	8005b46 <_printf_i+0x9e>
 8005b2e:	680d      	ldr	r5, [r1, #0]
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	2d00      	cmp	r5, #0
 8005b34:	da03      	bge.n	8005b3e <_printf_i+0x96>
 8005b36:	232d      	movs	r3, #45	; 0x2d
 8005b38:	9a04      	ldr	r2, [sp, #16]
 8005b3a:	426d      	negs	r5, r5
 8005b3c:	7013      	strb	r3, [r2, #0]
 8005b3e:	4b61      	ldr	r3, [pc, #388]	; (8005cc4 <_printf_i+0x21c>)
 8005b40:	270a      	movs	r7, #10
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	e01b      	b.n	8005b7e <_printf_i+0xd6>
 8005b46:	680d      	ldr	r5, [r1, #0]
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	0641      	lsls	r1, r0, #25
 8005b4c:	d5f1      	bpl.n	8005b32 <_printf_i+0x8a>
 8005b4e:	b22d      	sxth	r5, r5
 8005b50:	e7ef      	b.n	8005b32 <_printf_i+0x8a>
 8005b52:	680d      	ldr	r5, [r1, #0]
 8005b54:	6819      	ldr	r1, [r3, #0]
 8005b56:	1d08      	adds	r0, r1, #4
 8005b58:	6018      	str	r0, [r3, #0]
 8005b5a:	062e      	lsls	r6, r5, #24
 8005b5c:	d501      	bpl.n	8005b62 <_printf_i+0xba>
 8005b5e:	680d      	ldr	r5, [r1, #0]
 8005b60:	e003      	b.n	8005b6a <_printf_i+0xc2>
 8005b62:	066d      	lsls	r5, r5, #25
 8005b64:	d5fb      	bpl.n	8005b5e <_printf_i+0xb6>
 8005b66:	680d      	ldr	r5, [r1, #0]
 8005b68:	b2ad      	uxth	r5, r5
 8005b6a:	4b56      	ldr	r3, [pc, #344]	; (8005cc4 <_printf_i+0x21c>)
 8005b6c:	2708      	movs	r7, #8
 8005b6e:	9303      	str	r3, [sp, #12]
 8005b70:	2a6f      	cmp	r2, #111	; 0x6f
 8005b72:	d000      	beq.n	8005b76 <_printf_i+0xce>
 8005b74:	3702      	adds	r7, #2
 8005b76:	0023      	movs	r3, r4
 8005b78:	2200      	movs	r2, #0
 8005b7a:	3343      	adds	r3, #67	; 0x43
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	6863      	ldr	r3, [r4, #4]
 8005b80:	60a3      	str	r3, [r4, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	db03      	blt.n	8005b8e <_printf_i+0xe6>
 8005b86:	2204      	movs	r2, #4
 8005b88:	6821      	ldr	r1, [r4, #0]
 8005b8a:	4391      	bics	r1, r2
 8005b8c:	6021      	str	r1, [r4, #0]
 8005b8e:	2d00      	cmp	r5, #0
 8005b90:	d102      	bne.n	8005b98 <_printf_i+0xf0>
 8005b92:	9e04      	ldr	r6, [sp, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00c      	beq.n	8005bb2 <_printf_i+0x10a>
 8005b98:	9e04      	ldr	r6, [sp, #16]
 8005b9a:	0028      	movs	r0, r5
 8005b9c:	0039      	movs	r1, r7
 8005b9e:	f7fa fb3f 	bl	8000220 <__aeabi_uidivmod>
 8005ba2:	9b03      	ldr	r3, [sp, #12]
 8005ba4:	3e01      	subs	r6, #1
 8005ba6:	5c5b      	ldrb	r3, [r3, r1]
 8005ba8:	7033      	strb	r3, [r6, #0]
 8005baa:	002b      	movs	r3, r5
 8005bac:	0005      	movs	r5, r0
 8005bae:	429f      	cmp	r7, r3
 8005bb0:	d9f3      	bls.n	8005b9a <_printf_i+0xf2>
 8005bb2:	2f08      	cmp	r7, #8
 8005bb4:	d109      	bne.n	8005bca <_printf_i+0x122>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	07db      	lsls	r3, r3, #31
 8005bba:	d506      	bpl.n	8005bca <_printf_i+0x122>
 8005bbc:	6863      	ldr	r3, [r4, #4]
 8005bbe:	6922      	ldr	r2, [r4, #16]
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	dc02      	bgt.n	8005bca <_printf_i+0x122>
 8005bc4:	2330      	movs	r3, #48	; 0x30
 8005bc6:	3e01      	subs	r6, #1
 8005bc8:	7033      	strb	r3, [r6, #0]
 8005bca:	9b04      	ldr	r3, [sp, #16]
 8005bcc:	1b9b      	subs	r3, r3, r6
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	9b07      	ldr	r3, [sp, #28]
 8005bd2:	0021      	movs	r1, r4
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	9805      	ldr	r0, [sp, #20]
 8005bd8:	9b06      	ldr	r3, [sp, #24]
 8005bda:	aa09      	add	r2, sp, #36	; 0x24
 8005bdc:	f7ff fef4 	bl	80059c8 <_printf_common>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d14c      	bne.n	8005c7e <_printf_i+0x1d6>
 8005be4:	2001      	movs	r0, #1
 8005be6:	4240      	negs	r0, r0
 8005be8:	b00b      	add	sp, #44	; 0x2c
 8005bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bec:	3145      	adds	r1, #69	; 0x45
 8005bee:	700a      	strb	r2, [r1, #0]
 8005bf0:	4a34      	ldr	r2, [pc, #208]	; (8005cc4 <_printf_i+0x21c>)
 8005bf2:	9203      	str	r2, [sp, #12]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	6821      	ldr	r1, [r4, #0]
 8005bf8:	ca20      	ldmia	r2!, {r5}
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	0608      	lsls	r0, r1, #24
 8005bfe:	d516      	bpl.n	8005c2e <_printf_i+0x186>
 8005c00:	07cb      	lsls	r3, r1, #31
 8005c02:	d502      	bpl.n	8005c0a <_printf_i+0x162>
 8005c04:	2320      	movs	r3, #32
 8005c06:	4319      	orrs	r1, r3
 8005c08:	6021      	str	r1, [r4, #0]
 8005c0a:	2710      	movs	r7, #16
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	d1b2      	bne.n	8005b76 <_printf_i+0xce>
 8005c10:	2320      	movs	r3, #32
 8005c12:	6822      	ldr	r2, [r4, #0]
 8005c14:	439a      	bics	r2, r3
 8005c16:	6022      	str	r2, [r4, #0]
 8005c18:	e7ad      	b.n	8005b76 <_printf_i+0xce>
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	6809      	ldr	r1, [r1, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	6022      	str	r2, [r4, #0]
 8005c22:	0022      	movs	r2, r4
 8005c24:	2178      	movs	r1, #120	; 0x78
 8005c26:	3245      	adds	r2, #69	; 0x45
 8005c28:	7011      	strb	r1, [r2, #0]
 8005c2a:	4a27      	ldr	r2, [pc, #156]	; (8005cc8 <_printf_i+0x220>)
 8005c2c:	e7e1      	b.n	8005bf2 <_printf_i+0x14a>
 8005c2e:	0648      	lsls	r0, r1, #25
 8005c30:	d5e6      	bpl.n	8005c00 <_printf_i+0x158>
 8005c32:	b2ad      	uxth	r5, r5
 8005c34:	e7e4      	b.n	8005c00 <_printf_i+0x158>
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	680d      	ldr	r5, [r1, #0]
 8005c3a:	1d10      	adds	r0, r2, #4
 8005c3c:	6949      	ldr	r1, [r1, #20]
 8005c3e:	6018      	str	r0, [r3, #0]
 8005c40:	6813      	ldr	r3, [r2, #0]
 8005c42:	062e      	lsls	r6, r5, #24
 8005c44:	d501      	bpl.n	8005c4a <_printf_i+0x1a2>
 8005c46:	6019      	str	r1, [r3, #0]
 8005c48:	e002      	b.n	8005c50 <_printf_i+0x1a8>
 8005c4a:	066d      	lsls	r5, r5, #25
 8005c4c:	d5fb      	bpl.n	8005c46 <_printf_i+0x19e>
 8005c4e:	8019      	strh	r1, [r3, #0]
 8005c50:	2300      	movs	r3, #0
 8005c52:	9e04      	ldr	r6, [sp, #16]
 8005c54:	6123      	str	r3, [r4, #16]
 8005c56:	e7bb      	b.n	8005bd0 <_printf_i+0x128>
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	1d11      	adds	r1, r2, #4
 8005c5c:	6019      	str	r1, [r3, #0]
 8005c5e:	6816      	ldr	r6, [r2, #0]
 8005c60:	2100      	movs	r1, #0
 8005c62:	0030      	movs	r0, r6
 8005c64:	6862      	ldr	r2, [r4, #4]
 8005c66:	f000 f831 	bl	8005ccc <memchr>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d001      	beq.n	8005c72 <_printf_i+0x1ca>
 8005c6e:	1b80      	subs	r0, r0, r6
 8005c70:	6060      	str	r0, [r4, #4]
 8005c72:	6863      	ldr	r3, [r4, #4]
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9a04      	ldr	r2, [sp, #16]
 8005c7a:	7013      	strb	r3, [r2, #0]
 8005c7c:	e7a8      	b.n	8005bd0 <_printf_i+0x128>
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	0032      	movs	r2, r6
 8005c82:	9906      	ldr	r1, [sp, #24]
 8005c84:	9805      	ldr	r0, [sp, #20]
 8005c86:	9d07      	ldr	r5, [sp, #28]
 8005c88:	47a8      	blx	r5
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d0aa      	beq.n	8005be4 <_printf_i+0x13c>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	079b      	lsls	r3, r3, #30
 8005c92:	d415      	bmi.n	8005cc0 <_printf_i+0x218>
 8005c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c96:	68e0      	ldr	r0, [r4, #12]
 8005c98:	4298      	cmp	r0, r3
 8005c9a:	daa5      	bge.n	8005be8 <_printf_i+0x140>
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	e7a3      	b.n	8005be8 <_printf_i+0x140>
 8005ca0:	0022      	movs	r2, r4
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	9906      	ldr	r1, [sp, #24]
 8005ca6:	9805      	ldr	r0, [sp, #20]
 8005ca8:	9e07      	ldr	r6, [sp, #28]
 8005caa:	3219      	adds	r2, #25
 8005cac:	47b0      	blx	r6
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d098      	beq.n	8005be4 <_printf_i+0x13c>
 8005cb2:	3501      	adds	r5, #1
 8005cb4:	68e3      	ldr	r3, [r4, #12]
 8005cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	42ab      	cmp	r3, r5
 8005cbc:	dcf0      	bgt.n	8005ca0 <_printf_i+0x1f8>
 8005cbe:	e7e9      	b.n	8005c94 <_printf_i+0x1ec>
 8005cc0:	2500      	movs	r5, #0
 8005cc2:	e7f7      	b.n	8005cb4 <_printf_i+0x20c>
 8005cc4:	080060dd 	.word	0x080060dd
 8005cc8:	080060ee 	.word	0x080060ee

08005ccc <memchr>:
 8005ccc:	b2c9      	uxtb	r1, r1
 8005cce:	1882      	adds	r2, r0, r2
 8005cd0:	4290      	cmp	r0, r2
 8005cd2:	d101      	bne.n	8005cd8 <memchr+0xc>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	4770      	bx	lr
 8005cd8:	7803      	ldrb	r3, [r0, #0]
 8005cda:	428b      	cmp	r3, r1
 8005cdc:	d0fb      	beq.n	8005cd6 <memchr+0xa>
 8005cde:	3001      	adds	r0, #1
 8005ce0:	e7f6      	b.n	8005cd0 <memchr+0x4>

08005ce2 <memmove>:
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	4288      	cmp	r0, r1
 8005ce6:	d902      	bls.n	8005cee <memmove+0xc>
 8005ce8:	188b      	adds	r3, r1, r2
 8005cea:	4298      	cmp	r0, r3
 8005cec:	d303      	bcc.n	8005cf6 <memmove+0x14>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e007      	b.n	8005d02 <memmove+0x20>
 8005cf2:	5c8b      	ldrb	r3, [r1, r2]
 8005cf4:	5483      	strb	r3, [r0, r2]
 8005cf6:	3a01      	subs	r2, #1
 8005cf8:	d2fb      	bcs.n	8005cf2 <memmove+0x10>
 8005cfa:	bd10      	pop	{r4, pc}
 8005cfc:	5ccc      	ldrb	r4, [r1, r3]
 8005cfe:	54c4      	strb	r4, [r0, r3]
 8005d00:	3301      	adds	r3, #1
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d1fa      	bne.n	8005cfc <memmove+0x1a>
 8005d06:	e7f8      	b.n	8005cfa <memmove+0x18>

08005d08 <_free_r>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	0005      	movs	r5, r0
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d010      	beq.n	8005d32 <_free_r+0x2a>
 8005d10:	1f0c      	subs	r4, r1, #4
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da00      	bge.n	8005d1a <_free_r+0x12>
 8005d18:	18e4      	adds	r4, r4, r3
 8005d1a:	0028      	movs	r0, r5
 8005d1c:	f000 f918 	bl	8005f50 <__malloc_lock>
 8005d20:	4a1d      	ldr	r2, [pc, #116]	; (8005d98 <_free_r+0x90>)
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <_free_r+0x2c>
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	6014      	str	r4, [r2, #0]
 8005d2c:	0028      	movs	r0, r5
 8005d2e:	f000 f917 	bl	8005f60 <__malloc_unlock>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d908      	bls.n	8005d4a <_free_r+0x42>
 8005d38:	6821      	ldr	r1, [r4, #0]
 8005d3a:	1860      	adds	r0, r4, r1
 8005d3c:	4283      	cmp	r3, r0
 8005d3e:	d1f3      	bne.n	8005d28 <_free_r+0x20>
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	1841      	adds	r1, r0, r1
 8005d46:	6021      	str	r1, [r4, #0]
 8005d48:	e7ee      	b.n	8005d28 <_free_r+0x20>
 8005d4a:	001a      	movs	r2, r3
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <_free_r+0x4e>
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	d9f9      	bls.n	8005d4a <_free_r+0x42>
 8005d56:	6811      	ldr	r1, [r2, #0]
 8005d58:	1850      	adds	r0, r2, r1
 8005d5a:	42a0      	cmp	r0, r4
 8005d5c:	d10b      	bne.n	8005d76 <_free_r+0x6e>
 8005d5e:	6820      	ldr	r0, [r4, #0]
 8005d60:	1809      	adds	r1, r1, r0
 8005d62:	1850      	adds	r0, r2, r1
 8005d64:	6011      	str	r1, [r2, #0]
 8005d66:	4283      	cmp	r3, r0
 8005d68:	d1e0      	bne.n	8005d2c <_free_r+0x24>
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	1841      	adds	r1, r0, r1
 8005d70:	6011      	str	r1, [r2, #0]
 8005d72:	6053      	str	r3, [r2, #4]
 8005d74:	e7da      	b.n	8005d2c <_free_r+0x24>
 8005d76:	42a0      	cmp	r0, r4
 8005d78:	d902      	bls.n	8005d80 <_free_r+0x78>
 8005d7a:	230c      	movs	r3, #12
 8005d7c:	602b      	str	r3, [r5, #0]
 8005d7e:	e7d5      	b.n	8005d2c <_free_r+0x24>
 8005d80:	6821      	ldr	r1, [r4, #0]
 8005d82:	1860      	adds	r0, r4, r1
 8005d84:	4283      	cmp	r3, r0
 8005d86:	d103      	bne.n	8005d90 <_free_r+0x88>
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	1841      	adds	r1, r0, r1
 8005d8e:	6021      	str	r1, [r4, #0]
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	6054      	str	r4, [r2, #4]
 8005d94:	e7ca      	b.n	8005d2c <_free_r+0x24>
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	20002900 	.word	0x20002900

08005d9c <sbrk_aligned>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	4e0f      	ldr	r6, [pc, #60]	; (8005ddc <sbrk_aligned+0x40>)
 8005da0:	000d      	movs	r5, r1
 8005da2:	6831      	ldr	r1, [r6, #0]
 8005da4:	0004      	movs	r4, r0
 8005da6:	2900      	cmp	r1, #0
 8005da8:	d102      	bne.n	8005db0 <sbrk_aligned+0x14>
 8005daa:	f000 f8bf 	bl	8005f2c <_sbrk_r>
 8005dae:	6030      	str	r0, [r6, #0]
 8005db0:	0029      	movs	r1, r5
 8005db2:	0020      	movs	r0, r4
 8005db4:	f000 f8ba 	bl	8005f2c <_sbrk_r>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d00a      	beq.n	8005dd2 <sbrk_aligned+0x36>
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	1cc5      	adds	r5, r0, #3
 8005dc0:	439d      	bics	r5, r3
 8005dc2:	42a8      	cmp	r0, r5
 8005dc4:	d007      	beq.n	8005dd6 <sbrk_aligned+0x3a>
 8005dc6:	1a29      	subs	r1, r5, r0
 8005dc8:	0020      	movs	r0, r4
 8005dca:	f000 f8af 	bl	8005f2c <_sbrk_r>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	d101      	bne.n	8005dd6 <sbrk_aligned+0x3a>
 8005dd2:	2501      	movs	r5, #1
 8005dd4:	426d      	negs	r5, r5
 8005dd6:	0028      	movs	r0, r5
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	20002904 	.word	0x20002904

08005de0 <_malloc_r>:
 8005de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005de2:	2203      	movs	r2, #3
 8005de4:	1ccb      	adds	r3, r1, #3
 8005de6:	4393      	bics	r3, r2
 8005de8:	3308      	adds	r3, #8
 8005dea:	0006      	movs	r6, r0
 8005dec:	001f      	movs	r7, r3
 8005dee:	2b0c      	cmp	r3, #12
 8005df0:	d232      	bcs.n	8005e58 <_malloc_r+0x78>
 8005df2:	270c      	movs	r7, #12
 8005df4:	42b9      	cmp	r1, r7
 8005df6:	d831      	bhi.n	8005e5c <_malloc_r+0x7c>
 8005df8:	0030      	movs	r0, r6
 8005dfa:	f000 f8a9 	bl	8005f50 <__malloc_lock>
 8005dfe:	4d32      	ldr	r5, [pc, #200]	; (8005ec8 <_malloc_r+0xe8>)
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	001c      	movs	r4, r3
 8005e04:	2c00      	cmp	r4, #0
 8005e06:	d12e      	bne.n	8005e66 <_malloc_r+0x86>
 8005e08:	0039      	movs	r1, r7
 8005e0a:	0030      	movs	r0, r6
 8005e0c:	f7ff ffc6 	bl	8005d9c <sbrk_aligned>
 8005e10:	0004      	movs	r4, r0
 8005e12:	1c43      	adds	r3, r0, #1
 8005e14:	d11e      	bne.n	8005e54 <_malloc_r+0x74>
 8005e16:	682c      	ldr	r4, [r5, #0]
 8005e18:	0025      	movs	r5, r4
 8005e1a:	2d00      	cmp	r5, #0
 8005e1c:	d14a      	bne.n	8005eb4 <_malloc_r+0xd4>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	0029      	movs	r1, r5
 8005e22:	18e3      	adds	r3, r4, r3
 8005e24:	0030      	movs	r0, r6
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	f000 f880 	bl	8005f2c <_sbrk_r>
 8005e2c:	9b01      	ldr	r3, [sp, #4]
 8005e2e:	4283      	cmp	r3, r0
 8005e30:	d143      	bne.n	8005eba <_malloc_r+0xda>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	3703      	adds	r7, #3
 8005e36:	1aff      	subs	r7, r7, r3
 8005e38:	2303      	movs	r3, #3
 8005e3a:	439f      	bics	r7, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	2f0c      	cmp	r7, #12
 8005e40:	d200      	bcs.n	8005e44 <_malloc_r+0x64>
 8005e42:	270c      	movs	r7, #12
 8005e44:	0039      	movs	r1, r7
 8005e46:	0030      	movs	r0, r6
 8005e48:	f7ff ffa8 	bl	8005d9c <sbrk_aligned>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d034      	beq.n	8005eba <_malloc_r+0xda>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	19df      	adds	r7, r3, r7
 8005e54:	6027      	str	r7, [r4, #0]
 8005e56:	e013      	b.n	8005e80 <_malloc_r+0xa0>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dacb      	bge.n	8005df4 <_malloc_r+0x14>
 8005e5c:	230c      	movs	r3, #12
 8005e5e:	2500      	movs	r5, #0
 8005e60:	6033      	str	r3, [r6, #0]
 8005e62:	0028      	movs	r0, r5
 8005e64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	1bd1      	subs	r1, r2, r7
 8005e6a:	d420      	bmi.n	8005eae <_malloc_r+0xce>
 8005e6c:	290b      	cmp	r1, #11
 8005e6e:	d917      	bls.n	8005ea0 <_malloc_r+0xc0>
 8005e70:	19e2      	adds	r2, r4, r7
 8005e72:	6027      	str	r7, [r4, #0]
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	d111      	bne.n	8005e9c <_malloc_r+0xbc>
 8005e78:	602a      	str	r2, [r5, #0]
 8005e7a:	6863      	ldr	r3, [r4, #4]
 8005e7c:	6011      	str	r1, [r2, #0]
 8005e7e:	6053      	str	r3, [r2, #4]
 8005e80:	0030      	movs	r0, r6
 8005e82:	0025      	movs	r5, r4
 8005e84:	f000 f86c 	bl	8005f60 <__malloc_unlock>
 8005e88:	2207      	movs	r2, #7
 8005e8a:	350b      	adds	r5, #11
 8005e8c:	1d23      	adds	r3, r4, #4
 8005e8e:	4395      	bics	r5, r2
 8005e90:	1aea      	subs	r2, r5, r3
 8005e92:	429d      	cmp	r5, r3
 8005e94:	d0e5      	beq.n	8005e62 <_malloc_r+0x82>
 8005e96:	1b5b      	subs	r3, r3, r5
 8005e98:	50a3      	str	r3, [r4, r2]
 8005e9a:	e7e2      	b.n	8005e62 <_malloc_r+0x82>
 8005e9c:	605a      	str	r2, [r3, #4]
 8005e9e:	e7ec      	b.n	8005e7a <_malloc_r+0x9a>
 8005ea0:	6862      	ldr	r2, [r4, #4]
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	d101      	bne.n	8005eaa <_malloc_r+0xca>
 8005ea6:	602a      	str	r2, [r5, #0]
 8005ea8:	e7ea      	b.n	8005e80 <_malloc_r+0xa0>
 8005eaa:	605a      	str	r2, [r3, #4]
 8005eac:	e7e8      	b.n	8005e80 <_malloc_r+0xa0>
 8005eae:	0023      	movs	r3, r4
 8005eb0:	6864      	ldr	r4, [r4, #4]
 8005eb2:	e7a7      	b.n	8005e04 <_malloc_r+0x24>
 8005eb4:	002c      	movs	r4, r5
 8005eb6:	686d      	ldr	r5, [r5, #4]
 8005eb8:	e7af      	b.n	8005e1a <_malloc_r+0x3a>
 8005eba:	230c      	movs	r3, #12
 8005ebc:	0030      	movs	r0, r6
 8005ebe:	6033      	str	r3, [r6, #0]
 8005ec0:	f000 f84e 	bl	8005f60 <__malloc_unlock>
 8005ec4:	e7cd      	b.n	8005e62 <_malloc_r+0x82>
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	20002900 	.word	0x20002900

08005ecc <_realloc_r>:
 8005ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ece:	0007      	movs	r7, r0
 8005ed0:	000e      	movs	r6, r1
 8005ed2:	0014      	movs	r4, r2
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	d105      	bne.n	8005ee4 <_realloc_r+0x18>
 8005ed8:	0011      	movs	r1, r2
 8005eda:	f7ff ff81 	bl	8005de0 <_malloc_r>
 8005ede:	0005      	movs	r5, r0
 8005ee0:	0028      	movs	r0, r5
 8005ee2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ee4:	2a00      	cmp	r2, #0
 8005ee6:	d103      	bne.n	8005ef0 <_realloc_r+0x24>
 8005ee8:	f7ff ff0e 	bl	8005d08 <_free_r>
 8005eec:	0025      	movs	r5, r4
 8005eee:	e7f7      	b.n	8005ee0 <_realloc_r+0x14>
 8005ef0:	f000 f83e 	bl	8005f70 <_malloc_usable_size_r>
 8005ef4:	9001      	str	r0, [sp, #4]
 8005ef6:	4284      	cmp	r4, r0
 8005ef8:	d803      	bhi.n	8005f02 <_realloc_r+0x36>
 8005efa:	0035      	movs	r5, r6
 8005efc:	0843      	lsrs	r3, r0, #1
 8005efe:	42a3      	cmp	r3, r4
 8005f00:	d3ee      	bcc.n	8005ee0 <_realloc_r+0x14>
 8005f02:	0021      	movs	r1, r4
 8005f04:	0038      	movs	r0, r7
 8005f06:	f7ff ff6b 	bl	8005de0 <_malloc_r>
 8005f0a:	1e05      	subs	r5, r0, #0
 8005f0c:	d0e8      	beq.n	8005ee0 <_realloc_r+0x14>
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	0022      	movs	r2, r4
 8005f12:	429c      	cmp	r4, r3
 8005f14:	d900      	bls.n	8005f18 <_realloc_r+0x4c>
 8005f16:	001a      	movs	r2, r3
 8005f18:	0031      	movs	r1, r6
 8005f1a:	0028      	movs	r0, r5
 8005f1c:	f7ff fbc0 	bl	80056a0 <memcpy>
 8005f20:	0031      	movs	r1, r6
 8005f22:	0038      	movs	r0, r7
 8005f24:	f7ff fef0 	bl	8005d08 <_free_r>
 8005f28:	e7da      	b.n	8005ee0 <_realloc_r+0x14>
	...

08005f2c <_sbrk_r>:
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	b570      	push	{r4, r5, r6, lr}
 8005f30:	4d06      	ldr	r5, [pc, #24]	; (8005f4c <_sbrk_r+0x20>)
 8005f32:	0004      	movs	r4, r0
 8005f34:	0008      	movs	r0, r1
 8005f36:	602b      	str	r3, [r5, #0]
 8005f38:	f7fb f9b8 	bl	80012ac <_sbrk>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d103      	bne.n	8005f48 <_sbrk_r+0x1c>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d000      	beq.n	8005f48 <_sbrk_r+0x1c>
 8005f46:	6023      	str	r3, [r4, #0]
 8005f48:	bd70      	pop	{r4, r5, r6, pc}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	20002908 	.word	0x20002908

08005f50 <__malloc_lock>:
 8005f50:	b510      	push	{r4, lr}
 8005f52:	4802      	ldr	r0, [pc, #8]	; (8005f5c <__malloc_lock+0xc>)
 8005f54:	f000 f814 	bl	8005f80 <__retarget_lock_acquire_recursive>
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	2000290c 	.word	0x2000290c

08005f60 <__malloc_unlock>:
 8005f60:	b510      	push	{r4, lr}
 8005f62:	4802      	ldr	r0, [pc, #8]	; (8005f6c <__malloc_unlock+0xc>)
 8005f64:	f000 f80d 	bl	8005f82 <__retarget_lock_release_recursive>
 8005f68:	bd10      	pop	{r4, pc}
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	2000290c 	.word	0x2000290c

08005f70 <_malloc_usable_size_r>:
 8005f70:	1f0b      	subs	r3, r1, #4
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	1f18      	subs	r0, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	da01      	bge.n	8005f7e <_malloc_usable_size_r+0xe>
 8005f7a:	580b      	ldr	r3, [r1, r0]
 8005f7c:	18c0      	adds	r0, r0, r3
 8005f7e:	4770      	bx	lr

08005f80 <__retarget_lock_acquire_recursive>:
 8005f80:	4770      	bx	lr

08005f82 <__retarget_lock_release_recursive>:
 8005f82:	4770      	bx	lr

08005f84 <_init>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr

08005f90 <_fini>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr
