
HotWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080f0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008550  08008550  000203e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008550  08008550  000203e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008550  08008550  000203e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008550  08008550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008554  08008554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e8  20000000  08008558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026fc  200003e8  08008940  000203e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002ae4  08008940  00022ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000203e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015897  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003506  00000000  00000000  00035ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  000391b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  0003a510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a67  00000000  00000000  0003b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001922b  00000000  00000000  0005514f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099f6b  00000000  00000000  0006e37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001082e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c4  00000000  00000000  00108338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200003e8 	.word	0x200003e8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08008190 	.word	0x08008190

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200003ec 	.word	0x200003ec
 80000fc:	08008190 	.word	0x08008190

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cfrcmple>:
 800022c:	4684      	mov	ip, r0
 800022e:	0008      	movs	r0, r1
 8000230:	4661      	mov	r1, ip
 8000232:	e7ff      	b.n	8000234 <__aeabi_cfcmpeq>

08000234 <__aeabi_cfcmpeq>:
 8000234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000236:	f000 f89f 	bl	8000378 <__lesf2>
 800023a:	2800      	cmp	r0, #0
 800023c:	d401      	bmi.n	8000242 <__aeabi_cfcmpeq+0xe>
 800023e:	2100      	movs	r1, #0
 8000240:	42c8      	cmn	r0, r1
 8000242:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000244 <__aeabi_fcmpeq>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f82b 	bl	80002a0 <__eqsf2>
 800024a:	4240      	negs	r0, r0
 800024c:	3001      	adds	r0, #1
 800024e:	bd10      	pop	{r4, pc}

08000250 <__aeabi_fcmplt>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f891 	bl	8000378 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	db01      	blt.n	800025e <__aeabi_fcmplt+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmple>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f887 	bl	8000378 <__lesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dd01      	ble.n	8000272 <__aeabi_fcmple+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpgt>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f837 	bl	80002ec <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	dc01      	bgt.n	8000286 <__aeabi_fcmpgt+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_fcmpge>:
 800028c:	b510      	push	{r4, lr}
 800028e:	f000 f82d 	bl	80002ec <__gesf2>
 8000292:	2800      	cmp	r0, #0
 8000294:	da01      	bge.n	800029a <__aeabi_fcmpge+0xe>
 8000296:	2000      	movs	r0, #0
 8000298:	bd10      	pop	{r4, pc}
 800029a:	2001      	movs	r0, #1
 800029c:	bd10      	pop	{r4, pc}
 800029e:	46c0      	nop			; (mov r8, r8)

080002a0 <__eqsf2>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	0042      	lsls	r2, r0, #1
 80002a4:	0245      	lsls	r5, r0, #9
 80002a6:	024e      	lsls	r6, r1, #9
 80002a8:	004c      	lsls	r4, r1, #1
 80002aa:	0fc3      	lsrs	r3, r0, #31
 80002ac:	0a6d      	lsrs	r5, r5, #9
 80002ae:	2001      	movs	r0, #1
 80002b0:	0e12      	lsrs	r2, r2, #24
 80002b2:	0a76      	lsrs	r6, r6, #9
 80002b4:	0e24      	lsrs	r4, r4, #24
 80002b6:	0fc9      	lsrs	r1, r1, #31
 80002b8:	2aff      	cmp	r2, #255	; 0xff
 80002ba:	d006      	beq.n	80002ca <__eqsf2+0x2a>
 80002bc:	2cff      	cmp	r4, #255	; 0xff
 80002be:	d003      	beq.n	80002c8 <__eqsf2+0x28>
 80002c0:	42a2      	cmp	r2, r4
 80002c2:	d101      	bne.n	80002c8 <__eqsf2+0x28>
 80002c4:	42b5      	cmp	r5, r6
 80002c6:	d006      	beq.n	80002d6 <__eqsf2+0x36>
 80002c8:	bd70      	pop	{r4, r5, r6, pc}
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d1fc      	bne.n	80002c8 <__eqsf2+0x28>
 80002ce:	2cff      	cmp	r4, #255	; 0xff
 80002d0:	d1fa      	bne.n	80002c8 <__eqsf2+0x28>
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d1f8      	bne.n	80002c8 <__eqsf2+0x28>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d006      	beq.n	80002e8 <__eqsf2+0x48>
 80002da:	2001      	movs	r0, #1
 80002dc:	2a00      	cmp	r2, #0
 80002de:	d1f3      	bne.n	80002c8 <__eqsf2+0x28>
 80002e0:	0028      	movs	r0, r5
 80002e2:	1e43      	subs	r3, r0, #1
 80002e4:	4198      	sbcs	r0, r3
 80002e6:	e7ef      	b.n	80002c8 <__eqsf2+0x28>
 80002e8:	2000      	movs	r0, #0
 80002ea:	e7ed      	b.n	80002c8 <__eqsf2+0x28>

080002ec <__gesf2>:
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	0042      	lsls	r2, r0, #1
 80002f0:	0245      	lsls	r5, r0, #9
 80002f2:	024e      	lsls	r6, r1, #9
 80002f4:	004c      	lsls	r4, r1, #1
 80002f6:	0fc3      	lsrs	r3, r0, #31
 80002f8:	0a6d      	lsrs	r5, r5, #9
 80002fa:	0e12      	lsrs	r2, r2, #24
 80002fc:	0a76      	lsrs	r6, r6, #9
 80002fe:	0e24      	lsrs	r4, r4, #24
 8000300:	0fc8      	lsrs	r0, r1, #31
 8000302:	2aff      	cmp	r2, #255	; 0xff
 8000304:	d01b      	beq.n	800033e <__gesf2+0x52>
 8000306:	2cff      	cmp	r4, #255	; 0xff
 8000308:	d00e      	beq.n	8000328 <__gesf2+0x3c>
 800030a:	2a00      	cmp	r2, #0
 800030c:	d11b      	bne.n	8000346 <__gesf2+0x5a>
 800030e:	2c00      	cmp	r4, #0
 8000310:	d101      	bne.n	8000316 <__gesf2+0x2a>
 8000312:	2e00      	cmp	r6, #0
 8000314:	d01c      	beq.n	8000350 <__gesf2+0x64>
 8000316:	2d00      	cmp	r5, #0
 8000318:	d00c      	beq.n	8000334 <__gesf2+0x48>
 800031a:	4283      	cmp	r3, r0
 800031c:	d01c      	beq.n	8000358 <__gesf2+0x6c>
 800031e:	2102      	movs	r1, #2
 8000320:	1e58      	subs	r0, r3, #1
 8000322:	4008      	ands	r0, r1
 8000324:	3801      	subs	r0, #1
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	2e00      	cmp	r6, #0
 800032a:	d122      	bne.n	8000372 <__gesf2+0x86>
 800032c:	2a00      	cmp	r2, #0
 800032e:	d1f4      	bne.n	800031a <__gesf2+0x2e>
 8000330:	2d00      	cmp	r5, #0
 8000332:	d1f2      	bne.n	800031a <__gesf2+0x2e>
 8000334:	2800      	cmp	r0, #0
 8000336:	d1f6      	bne.n	8000326 <__gesf2+0x3a>
 8000338:	2001      	movs	r0, #1
 800033a:	4240      	negs	r0, r0
 800033c:	e7f3      	b.n	8000326 <__gesf2+0x3a>
 800033e:	2d00      	cmp	r5, #0
 8000340:	d117      	bne.n	8000372 <__gesf2+0x86>
 8000342:	2cff      	cmp	r4, #255	; 0xff
 8000344:	d0f0      	beq.n	8000328 <__gesf2+0x3c>
 8000346:	2c00      	cmp	r4, #0
 8000348:	d1e7      	bne.n	800031a <__gesf2+0x2e>
 800034a:	2e00      	cmp	r6, #0
 800034c:	d1e5      	bne.n	800031a <__gesf2+0x2e>
 800034e:	e7e6      	b.n	800031e <__gesf2+0x32>
 8000350:	2000      	movs	r0, #0
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0e7      	beq.n	8000326 <__gesf2+0x3a>
 8000356:	e7e2      	b.n	800031e <__gesf2+0x32>
 8000358:	42a2      	cmp	r2, r4
 800035a:	dc05      	bgt.n	8000368 <__gesf2+0x7c>
 800035c:	dbea      	blt.n	8000334 <__gesf2+0x48>
 800035e:	42b5      	cmp	r5, r6
 8000360:	d802      	bhi.n	8000368 <__gesf2+0x7c>
 8000362:	d3e7      	bcc.n	8000334 <__gesf2+0x48>
 8000364:	2000      	movs	r0, #0
 8000366:	e7de      	b.n	8000326 <__gesf2+0x3a>
 8000368:	4243      	negs	r3, r0
 800036a:	4158      	adcs	r0, r3
 800036c:	0040      	lsls	r0, r0, #1
 800036e:	3801      	subs	r0, #1
 8000370:	e7d9      	b.n	8000326 <__gesf2+0x3a>
 8000372:	2002      	movs	r0, #2
 8000374:	4240      	negs	r0, r0
 8000376:	e7d6      	b.n	8000326 <__gesf2+0x3a>

08000378 <__lesf2>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	0042      	lsls	r2, r0, #1
 800037c:	0245      	lsls	r5, r0, #9
 800037e:	024e      	lsls	r6, r1, #9
 8000380:	004c      	lsls	r4, r1, #1
 8000382:	0fc3      	lsrs	r3, r0, #31
 8000384:	0a6d      	lsrs	r5, r5, #9
 8000386:	0e12      	lsrs	r2, r2, #24
 8000388:	0a76      	lsrs	r6, r6, #9
 800038a:	0e24      	lsrs	r4, r4, #24
 800038c:	0fc8      	lsrs	r0, r1, #31
 800038e:	2aff      	cmp	r2, #255	; 0xff
 8000390:	d00b      	beq.n	80003aa <__lesf2+0x32>
 8000392:	2cff      	cmp	r4, #255	; 0xff
 8000394:	d00d      	beq.n	80003b2 <__lesf2+0x3a>
 8000396:	2a00      	cmp	r2, #0
 8000398:	d11f      	bne.n	80003da <__lesf2+0x62>
 800039a:	2c00      	cmp	r4, #0
 800039c:	d116      	bne.n	80003cc <__lesf2+0x54>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d114      	bne.n	80003cc <__lesf2+0x54>
 80003a2:	2000      	movs	r0, #0
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d010      	beq.n	80003ca <__lesf2+0x52>
 80003a8:	e009      	b.n	80003be <__lesf2+0x46>
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d10c      	bne.n	80003c8 <__lesf2+0x50>
 80003ae:	2cff      	cmp	r4, #255	; 0xff
 80003b0:	d113      	bne.n	80003da <__lesf2+0x62>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d108      	bne.n	80003c8 <__lesf2+0x50>
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d008      	beq.n	80003cc <__lesf2+0x54>
 80003ba:	4283      	cmp	r3, r0
 80003bc:	d012      	beq.n	80003e4 <__lesf2+0x6c>
 80003be:	2102      	movs	r1, #2
 80003c0:	1e58      	subs	r0, r3, #1
 80003c2:	4008      	ands	r0, r1
 80003c4:	3801      	subs	r0, #1
 80003c6:	e000      	b.n	80003ca <__lesf2+0x52>
 80003c8:	2002      	movs	r0, #2
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d1f4      	bne.n	80003ba <__lesf2+0x42>
 80003d0:	2800      	cmp	r0, #0
 80003d2:	d1fa      	bne.n	80003ca <__lesf2+0x52>
 80003d4:	2001      	movs	r0, #1
 80003d6:	4240      	negs	r0, r0
 80003d8:	e7f7      	b.n	80003ca <__lesf2+0x52>
 80003da:	2c00      	cmp	r4, #0
 80003dc:	d1ed      	bne.n	80003ba <__lesf2+0x42>
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d1eb      	bne.n	80003ba <__lesf2+0x42>
 80003e2:	e7ec      	b.n	80003be <__lesf2+0x46>
 80003e4:	42a2      	cmp	r2, r4
 80003e6:	dc05      	bgt.n	80003f4 <__lesf2+0x7c>
 80003e8:	dbf2      	blt.n	80003d0 <__lesf2+0x58>
 80003ea:	42b5      	cmp	r5, r6
 80003ec:	d802      	bhi.n	80003f4 <__lesf2+0x7c>
 80003ee:	d3ef      	bcc.n	80003d0 <__lesf2+0x58>
 80003f0:	2000      	movs	r0, #0
 80003f2:	e7ea      	b.n	80003ca <__lesf2+0x52>
 80003f4:	4243      	negs	r3, r0
 80003f6:	4158      	adcs	r0, r3
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	3801      	subs	r0, #1
 80003fc:	e7e5      	b.n	80003ca <__lesf2+0x52>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_f2iz>:
 8000400:	0241      	lsls	r1, r0, #9
 8000402:	0042      	lsls	r2, r0, #1
 8000404:	0fc3      	lsrs	r3, r0, #31
 8000406:	0a49      	lsrs	r1, r1, #9
 8000408:	2000      	movs	r0, #0
 800040a:	0e12      	lsrs	r2, r2, #24
 800040c:	2a7e      	cmp	r2, #126	; 0x7e
 800040e:	dd03      	ble.n	8000418 <__aeabi_f2iz+0x18>
 8000410:	2a9d      	cmp	r2, #157	; 0x9d
 8000412:	dd02      	ble.n	800041a <__aeabi_f2iz+0x1a>
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <__aeabi_f2iz+0x3c>)
 8000416:	1898      	adds	r0, r3, r2
 8000418:	4770      	bx	lr
 800041a:	2080      	movs	r0, #128	; 0x80
 800041c:	0400      	lsls	r0, r0, #16
 800041e:	4301      	orrs	r1, r0
 8000420:	2a95      	cmp	r2, #149	; 0x95
 8000422:	dc07      	bgt.n	8000434 <__aeabi_f2iz+0x34>
 8000424:	2096      	movs	r0, #150	; 0x96
 8000426:	1a82      	subs	r2, r0, r2
 8000428:	40d1      	lsrs	r1, r2
 800042a:	4248      	negs	r0, r1
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1f3      	bne.n	8000418 <__aeabi_f2iz+0x18>
 8000430:	0008      	movs	r0, r1
 8000432:	e7f1      	b.n	8000418 <__aeabi_f2iz+0x18>
 8000434:	3a96      	subs	r2, #150	; 0x96
 8000436:	4091      	lsls	r1, r2
 8000438:	e7f7      	b.n	800042a <__aeabi_f2iz+0x2a>
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	7fffffff 	.word	0x7fffffff

08000440 <__aeabi_ui2f>:
 8000440:	b570      	push	{r4, r5, r6, lr}
 8000442:	1e05      	subs	r5, r0, #0
 8000444:	d00e      	beq.n	8000464 <__aeabi_ui2f+0x24>
 8000446:	f000 f83d 	bl	80004c4 <__clzsi2>
 800044a:	239e      	movs	r3, #158	; 0x9e
 800044c:	0004      	movs	r4, r0
 800044e:	1a1b      	subs	r3, r3, r0
 8000450:	2b96      	cmp	r3, #150	; 0x96
 8000452:	dc0c      	bgt.n	800046e <__aeabi_ui2f+0x2e>
 8000454:	2808      	cmp	r0, #8
 8000456:	dd01      	ble.n	800045c <__aeabi_ui2f+0x1c>
 8000458:	3c08      	subs	r4, #8
 800045a:	40a5      	lsls	r5, r4
 800045c:	026d      	lsls	r5, r5, #9
 800045e:	0a6d      	lsrs	r5, r5, #9
 8000460:	b2d8      	uxtb	r0, r3
 8000462:	e001      	b.n	8000468 <__aeabi_ui2f+0x28>
 8000464:	2000      	movs	r0, #0
 8000466:	2500      	movs	r5, #0
 8000468:	05c0      	lsls	r0, r0, #23
 800046a:	4328      	orrs	r0, r5
 800046c:	bd70      	pop	{r4, r5, r6, pc}
 800046e:	2b99      	cmp	r3, #153	; 0x99
 8000470:	dd09      	ble.n	8000486 <__aeabi_ui2f+0x46>
 8000472:	0002      	movs	r2, r0
 8000474:	0029      	movs	r1, r5
 8000476:	321b      	adds	r2, #27
 8000478:	4091      	lsls	r1, r2
 800047a:	1e4a      	subs	r2, r1, #1
 800047c:	4191      	sbcs	r1, r2
 800047e:	2205      	movs	r2, #5
 8000480:	1a12      	subs	r2, r2, r0
 8000482:	40d5      	lsrs	r5, r2
 8000484:	430d      	orrs	r5, r1
 8000486:	2c05      	cmp	r4, #5
 8000488:	dc12      	bgt.n	80004b0 <__aeabi_ui2f+0x70>
 800048a:	0029      	movs	r1, r5
 800048c:	4e0c      	ldr	r6, [pc, #48]	; (80004c0 <__aeabi_ui2f+0x80>)
 800048e:	4031      	ands	r1, r6
 8000490:	076a      	lsls	r2, r5, #29
 8000492:	d009      	beq.n	80004a8 <__aeabi_ui2f+0x68>
 8000494:	200f      	movs	r0, #15
 8000496:	4028      	ands	r0, r5
 8000498:	2804      	cmp	r0, #4
 800049a:	d005      	beq.n	80004a8 <__aeabi_ui2f+0x68>
 800049c:	3104      	adds	r1, #4
 800049e:	014a      	lsls	r2, r1, #5
 80004a0:	d502      	bpl.n	80004a8 <__aeabi_ui2f+0x68>
 80004a2:	239f      	movs	r3, #159	; 0x9f
 80004a4:	4031      	ands	r1, r6
 80004a6:	1b1b      	subs	r3, r3, r4
 80004a8:	0189      	lsls	r1, r1, #6
 80004aa:	0a4d      	lsrs	r5, r1, #9
 80004ac:	b2d8      	uxtb	r0, r3
 80004ae:	e7db      	b.n	8000468 <__aeabi_ui2f+0x28>
 80004b0:	1f62      	subs	r2, r4, #5
 80004b2:	4095      	lsls	r5, r2
 80004b4:	0029      	movs	r1, r5
 80004b6:	4e02      	ldr	r6, [pc, #8]	; (80004c0 <__aeabi_ui2f+0x80>)
 80004b8:	4031      	ands	r1, r6
 80004ba:	076a      	lsls	r2, r5, #29
 80004bc:	d0f4      	beq.n	80004a8 <__aeabi_ui2f+0x68>
 80004be:	e7e9      	b.n	8000494 <__aeabi_ui2f+0x54>
 80004c0:	fbffffff 	.word	0xfbffffff

080004c4 <__clzsi2>:
 80004c4:	211c      	movs	r1, #28
 80004c6:	2301      	movs	r3, #1
 80004c8:	041b      	lsls	r3, r3, #16
 80004ca:	4298      	cmp	r0, r3
 80004cc:	d301      	bcc.n	80004d2 <__clzsi2+0xe>
 80004ce:	0c00      	lsrs	r0, r0, #16
 80004d0:	3910      	subs	r1, #16
 80004d2:	0a1b      	lsrs	r3, r3, #8
 80004d4:	4298      	cmp	r0, r3
 80004d6:	d301      	bcc.n	80004dc <__clzsi2+0x18>
 80004d8:	0a00      	lsrs	r0, r0, #8
 80004da:	3908      	subs	r1, #8
 80004dc:	091b      	lsrs	r3, r3, #4
 80004de:	4298      	cmp	r0, r3
 80004e0:	d301      	bcc.n	80004e6 <__clzsi2+0x22>
 80004e2:	0900      	lsrs	r0, r0, #4
 80004e4:	3904      	subs	r1, #4
 80004e6:	a202      	add	r2, pc, #8	; (adr r2, 80004f0 <__clzsi2+0x2c>)
 80004e8:	5c10      	ldrb	r0, [r2, r0]
 80004ea:	1840      	adds	r0, r0, r1
 80004ec:	4770      	bx	lr
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	02020304 	.word	0x02020304
 80004f4:	01010101 	.word	0x01010101
	...

08000500 <timeout_temp0>:
static uint8_t system_state[MAX_SYSTEM];

static bool flag_liter[MAX_SYSTEM];
static uint32_t liter[MAX_SYSTEM];

static void timeout_temp0(){timeout_temp[SYSTEM0] = true;}
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
 8000504:	4b02      	ldr	r3, [pc, #8]	; (8000510 <timeout_temp0+0x10>)
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000404 	.word	0x20000404

08000514 <timeout_temp1>:
static void timeout_temp1(){timeout_temp[SYSTEM1] = true;}
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
 8000518:	4b02      	ldr	r3, [pc, #8]	; (8000524 <timeout_temp1+0x10>)
 800051a:	2201      	movs	r2, #1
 800051c:	705a      	strb	r2, [r3, #1]
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000404 	.word	0x20000404

08000528 <timeout_flow0>:
static void timeout_flow0(){timeout_flow[SYSTEM0] = true;}
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
 800052c:	4b02      	ldr	r3, [pc, #8]	; (8000538 <timeout_flow0+0x10>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000408 	.word	0x20000408

0800053c <timeout_flow1>:
static void timeout_flow1(){timeout_flow[SYSTEM1] = true;}
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
 8000540:	4b02      	ldr	r3, [pc, #8]	; (800054c <timeout_flow1+0x10>)
 8000542:	2201      	movs	r2, #1
 8000544:	705a      	strb	r2, [r3, #1]
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000408 	.word	0x20000408

08000550 <SYSTEM_init>:

static void WATER_OUT_open(uint8_t id);
static void WATER_OUT_close(uint8_t id);
static void WATER_OUT_system(uint8_t id);

void SYSTEM_init(){
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_SYSTEM; i++){
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	e056      	b.n	800060c <SYSTEM_init+0xbc>
		waterout[i].set_relay(DEVICE_CLOSE);
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	492f      	ldr	r1, [pc, #188]	; (8000620 <SYSTEM_init+0xd0>)
 8000564:	0013      	movs	r3, r2
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	189b      	adds	r3, r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	18cb      	adds	r3, r1, r3
 800056e:	3320      	adds	r3, #32
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2001      	movs	r0, #1
 8000574:	4798      	blx	r3
		waterout[i].set_solenoid_in(DEVICE_CLOSE);
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781a      	ldrb	r2, [r3, #0]
 800057a:	4929      	ldr	r1, [pc, #164]	; (8000620 <SYSTEM_init+0xd0>)
 800057c:	0013      	movs	r3, r2
 800057e:	00db      	lsls	r3, r3, #3
 8000580:	189b      	adds	r3, r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	18cb      	adds	r3, r1, r3
 8000586:	331c      	adds	r3, #28
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2001      	movs	r0, #1
 800058c:	4798      	blx	r3
		waterout[i].set_solenoid_out(DEVICE_CLOSE);
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	4923      	ldr	r1, [pc, #140]	; (8000620 <SYSTEM_init+0xd0>)
 8000594:	0013      	movs	r3, r2
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	189b      	adds	r3, r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	18cb      	adds	r3, r1, r3
 800059e:	3318      	adds	r3, #24
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2001      	movs	r0, #1
 80005a4:	4798      	blx	r3
		BOILING_OFF(i);
 80005a6:	1dfb      	adds	r3, r7, #7
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d107      	bne.n	80005be <SYSTEM_init+0x6e>
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	019b      	lsls	r3, r3, #6
 80005b2:	481c      	ldr	r0, [pc, #112]	; (8000624 <SYSTEM_init+0xd4>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	0019      	movs	r1, r3
 80005b8:	f004 f983 	bl	80048c2 <HAL_GPIO_WritePin>
 80005bc:	e00a      	b.n	80005d4 <SYSTEM_init+0x84>
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d106      	bne.n	80005d4 <SYSTEM_init+0x84>
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	021b      	lsls	r3, r3, #8
 80005ca:	4816      	ldr	r0, [pc, #88]	; (8000624 <SYSTEM_init+0xd4>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	0019      	movs	r1, r3
 80005d0:	f004 f977 	bl	80048c2 <HAL_GPIO_WritePin>
		WT_EMPTY_OFF(i);
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d108      	bne.n	80005ee <SYSTEM_init+0x9e>
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	0099      	lsls	r1, r3, #2
 80005e0:	23a0      	movs	r3, #160	; 0xa0
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	2201      	movs	r2, #1
 80005e6:	0018      	movs	r0, r3
 80005e8:	f004 f96b 	bl	80048c2 <HAL_GPIO_WritePin>
 80005ec:	e009      	b.n	8000602 <SYSTEM_init+0xb2>
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d105      	bne.n	8000602 <SYSTEM_init+0xb2>
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <SYSTEM_init+0xd8>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	0018      	movs	r0, r3
 80005fe:	f004 f960 	bl	80048c2 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < MAX_SYSTEM; i++){
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	3201      	adds	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d9a4      	bls.n	800055e <SYSTEM_init+0xe>
	}
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	20000000 	.word	0x20000000
 8000624:	50000400 	.word	0x50000400
 8000628:	50000800 	.word	0x50000800

0800062c <SYSTEM_output_water>:

void SYSTEM_output_water(uint8_t _liter, uint8_t id){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	0002      	movs	r2, r0
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	1dbb      	adds	r3, r7, #6
 800063a:	1c0a      	adds	r2, r1, #0
 800063c:	701a      	strb	r2, [r3, #0]
	flag_liter[id] = 1;
 800063e:	1dbb      	adds	r3, r7, #6
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4a07      	ldr	r2, [pc, #28]	; (8000660 <SYSTEM_output_water+0x34>)
 8000644:	2101      	movs	r1, #1
 8000646:	54d1      	strb	r1, [r2, r3]
	liter[id] = _liter;
 8000648:	1dbb      	adds	r3, r7, #6
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	7819      	ldrb	r1, [r3, #0]
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <SYSTEM_output_water+0x38>)
 8000652:	0092      	lsls	r2, r2, #2
 8000654:	50d1      	str	r1, [r2, r3]
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b002      	add	sp, #8
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	200004fc 	.word	0x200004fc
 8000664:	20000500 	.word	0x20000500

08000668 <SYSTEM_check>:

void SYSTEM_check(){
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	FLOW_get_pulse();
 800066e:	f000 fe07 	bl	8001280 <FLOW_get_pulse>
	for(uint8_t i = 0; i <  MAX_SYSTEM ; i++){
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
 8000678:	e00e      	b.n	8000698 <SYSTEM_check+0x30>
		TEMP_check(i);
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f82e 	bl	80006e0 <TEMP_check>
		FLOW_check(i);
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	0018      	movs	r0, r3
 800068a:	f000 f867 	bl	800075c <FLOW_check>
	for(uint8_t i = 0; i <  MAX_SYSTEM ; i++){
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	3201      	adds	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d9ec      	bls.n	800067a <SYSTEM_check+0x12>
		//WATER_LEVEL_check(i);
	}
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}

080006aa <SYSTEM_run>:
void SYSTEM_run(){
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i <  MAX_SYSTEM ; i++){
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e009      	b.n	80006cc <SYSTEM_run+0x22>
		WATER_OUT_system(i);
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 f881 	bl	80007c4 <WATER_OUT_system>
	for(uint8_t i = 0; i <  MAX_SYSTEM ; i++){
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	781a      	ldrb	r2, [r3, #0]
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	3201      	adds	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d9f1      	bls.n	80006b8 <SYSTEM_run+0xe>
	}
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <TEMP_check>:

static void TEMP_check(uint8_t id){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	0002      	movs	r2, r0
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	701a      	strb	r2, [r3, #0]
	switch (temp_state[id]) {
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4a18      	ldr	r2, [pc, #96]	; (8000754 <TEMP_check+0x74>)
 80006f2:	5cd3      	ldrb	r3, [r2, r3]
 80006f4:	2b05      	cmp	r3, #5
 80006f6:	d828      	bhi.n	800074a <TEMP_check+0x6a>
 80006f8:	009a      	lsls	r2, r3, #2
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <TEMP_check+0x78>)
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	469f      	mov	pc, r3
		case TEMP_INIT:
			TEMP_init(id);
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	0018      	movs	r0, r3
 8000708:	f000 f87e 	bl	8000808 <TEMP_init>
			break;
 800070c:	e01e      	b.n	800074c <TEMP_check+0x6c>
		case TEMP_HOT:
			TEMP_hot(id);
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	0018      	movs	r0, r3
 8000714:	f000 f8a6 	bl	8000864 <TEMP_hot>
			break;
 8000718:	e018      	b.n	800074c <TEMP_check+0x6c>
		case TEMP_TOO_HOT:
			TEMP_too_hot(id);
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	0018      	movs	r0, r3
 8000720:	f000 f93c 	bl	800099c <TEMP_too_hot>
			break;
 8000724:	e012      	b.n	800074c <TEMP_check+0x6c>
		case TEMP_NOT_HOT_ENOUGH:
			TEMP_not_hot_enough(id);
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	0018      	movs	r0, r3
 800072c:	f000 fa60 	bl	8000bf0 <TEMP_not_hot_enough>
			break;
 8000730:	e00c      	b.n	800074c <TEMP_check+0x6c>
		case TEMP_COOL:
			TEMP_cool(id);
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	0018      	movs	r0, r3
 8000738:	f000 f9a6 	bl	8000a88 <TEMP_cool>
			break;
 800073c:	e006      	b.n	800074c <TEMP_check+0x6c>
		case TEMP_EROR:
			TEMP_error(id);
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	0018      	movs	r0, r3
 8000744:	f000 fae2 	bl	8000d0c <TEMP_error>
			break;
 8000748:	e000      	b.n	800074c <TEMP_check+0x6c>
		default:
			break;
 800074a:	46c0      	nop			; (mov r8, r8)
	}
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b002      	add	sp, #8
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200004ec 	.word	0x200004ec
 8000758:	08008470 	.word	0x08008470

0800075c <FLOW_check>:

static void FLOW_check(uint8_t id){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	0002      	movs	r2, r0
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	701a      	strb	r2, [r3, #0]
	switch (flow_state[id]) {
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <FLOW_check+0x64>)
 800076e:	5cd3      	ldrb	r3, [r2, r3]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d01a      	beq.n	80007aa <FLOW_check+0x4e>
 8000774:	dc1f      	bgt.n	80007b6 <FLOW_check+0x5a>
 8000776:	2b02      	cmp	r3, #2
 8000778:	d011      	beq.n	800079e <FLOW_check+0x42>
 800077a:	dc1c      	bgt.n	80007b6 <FLOW_check+0x5a>
 800077c:	2b00      	cmp	r3, #0
 800077e:	d002      	beq.n	8000786 <FLOW_check+0x2a>
 8000780:	2b01      	cmp	r3, #1
 8000782:	d006      	beq.n	8000792 <FLOW_check+0x36>
			break;
		case LEAKING:
			FLOW_leaking(id);
			break;
		default:
			break;
 8000784:	e017      	b.n	80007b6 <FLOW_check+0x5a>
			FLOW_init(id);
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fb1a 	bl	8000dc4 <FLOW_init>
			break;
 8000790:	e012      	b.n	80007b8 <FLOW_check+0x5c>
			FLOW_normal(id);
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fb42 	bl	8000e20 <FLOW_normal>
			break;
 800079c:	e00c      	b.n	80007b8 <FLOW_check+0x5c>
			FLOW_not_flowing(id);
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fbb6 	bl	8000f14 <FLOW_not_flowing>
			break;
 80007a8:	e006      	b.n	80007b8 <FLOW_check+0x5c>
			FLOW_leaking(id);
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fc42 	bl	8001038 <FLOW_leaking>
			break;
 80007b4:	e000      	b.n	80007b8 <FLOW_check+0x5c>
			break;
 80007b6:	46c0      	nop			; (mov r8, r8)
	}
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b002      	add	sp, #8
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200004f4 	.word	0x200004f4

080007c4 <WATER_OUT_system>:
		default:
			break;
	}
}

static void WATER_OUT_system(uint8_t id){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	0002      	movs	r2, r0
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	701a      	strb	r2, [r3, #0]
	switch (system_state[id]) {
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <WATER_OUT_system+0x40>)
 80007d6:	5cd3      	ldrb	r3, [r2, r3]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <WATER_OUT_system+0x1e>
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d006      	beq.n	80007ee <WATER_OUT_system+0x2a>
			break;
		case WATER_OUT_OPEN:
			WATER_OUT_open(id);
			break;
		default:
			break;
 80007e0:	e00b      	b.n	80007fa <WATER_OUT_system+0x36>
			WATER_OUT_close(id);
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fcec 	bl	80011c4 <WATER_OUT_close>
			break;
 80007ec:	e005      	b.n	80007fa <WATER_OUT_system+0x36>
			WATER_OUT_open(id);
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fcb8 	bl	8001168 <WATER_OUT_open>
			break;
 80007f8:	46c0      	nop			; (mov r8, r8)
	}
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	200004f8 	.word	0x200004f8

08000808 <TEMP_init>:

static void TEMP_init(uint8_t id){
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	701a      	strb	r2, [r3, #0]
	void (*fn)(void) = (id == SYSTEM0) ? timeout_temp0 : timeout_temp1;
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d101      	bne.n	8000820 <TEMP_init+0x18>
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <TEMP_init+0x4c>)
 800081e:	e000      	b.n	8000822 <TEMP_init+0x1a>
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <TEMP_init+0x50>)
 8000822:	60fb      	str	r3, [r7, #12]
	timeout_temp_id[id] = SCH_Add_Task(fn, CHECK_TEMP_DURATION, CHECK_TEMP_DURATION);
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781c      	ldrb	r4, [r3, #0]
 8000828:	23fa      	movs	r3, #250	; 0xfa
 800082a:	005a      	lsls	r2, r3, #1
 800082c:	23fa      	movs	r3, #250	; 0xfa
 800082e:	0059      	lsls	r1, r3, #1
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	0018      	movs	r0, r3
 8000834:	f002 f9ee 	bl	8002c14 <SCH_Add_Task>
 8000838:	0001      	movs	r1, r0
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <TEMP_init+0x54>)
 800083c:	00a2      	lsls	r2, r4, #2
 800083e:	50d1      	str	r1, [r2, r3]
	temp_state[id] =TEMP_HOT;
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <TEMP_init+0x58>)
 8000846:	2101      	movs	r1, #1
 8000848:	54d1      	strb	r1, [r2, r3]
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b005      	add	sp, #20
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	08000501 	.word	0x08000501
 8000858:	08000515 	.word	0x08000515
 800085c:	2000040c 	.word	0x2000040c
 8000860:	200004ec 	.word	0x200004ec

08000864 <TEMP_hot>:
static void TEMP_hot(uint8_t id){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	0002      	movs	r2, r0
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	701a      	strb	r2, [r3, #0]
	if(timeout_temp[id]){
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4a41      	ldr	r2, [pc, #260]	; (800097c <TEMP_hot+0x118>)
 8000876:	5cd3      	ldrb	r3, [r2, r3]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d100      	bne.n	800087e <TEMP_hot+0x1a>
 800087c:	e07a      	b.n	8000974 <TEMP_hot+0x110>
		UART_send(UART_3, "HOT\n", sizeof("HOT\n"));
 800087e:	4b40      	ldr	r3, [pc, #256]	; (8000980 <TEMP_hot+0x11c>)
 8000880:	2205      	movs	r2, #5
 8000882:	0019      	movs	r1, r3
 8000884:	2002      	movs	r0, #2
 8000886:	f001 facb 	bl	8001e20 <UART_send>
		timeout_temp[id] = false;
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4a3b      	ldr	r2, [pc, #236]	; (800097c <TEMP_hot+0x118>)
 8000890:	2100      	movs	r1, #0
 8000892:	54d1      	strb	r1, [r2, r3]
		if (waterout[id].temp() > 100) {
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	493a      	ldr	r1, [pc, #232]	; (8000984 <TEMP_hot+0x120>)
 800089a:	0013      	movs	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	189b      	adds	r3, r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	585b      	ldr	r3, [r3, r1]
 80008a4:	4798      	blx	r3
 80008a6:	1c03      	adds	r3, r0, #0
 80008a8:	4937      	ldr	r1, [pc, #220]	; (8000988 <TEMP_hot+0x124>)
 80008aa:	1c18      	adds	r0, r3, #0
 80008ac:	f7ff fce4 	bl	8000278 <__aeabi_fcmpgt>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d017      	beq.n	80008e4 <TEMP_hot+0x80>
			temp_state[id] = TEMP_TOO_HOT;
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4a34      	ldr	r2, [pc, #208]	; (800098c <TEMP_hot+0x128>)
 80008ba:	2102      	movs	r1, #2
 80008bc:	54d1      	strb	r1, [r2, r3]
			waterout[id].set_relay(DEVICE_CLOSE);
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	4930      	ldr	r1, [pc, #192]	; (8000984 <TEMP_hot+0x120>)
 80008c4:	0013      	movs	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	189b      	adds	r3, r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	18cb      	adds	r3, r1, r3
 80008ce:	3320      	adds	r3, #32
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2001      	movs	r0, #1
 80008d4:	4798      	blx	r3
			counter_temp[id] = 0;
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781a      	ldrb	r2, [r3, #0]
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <TEMP_hot+0x12c>)
 80008dc:	0092      	lsls	r2, r2, #2
 80008de:	2100      	movs	r1, #0
 80008e0:	50d1      	str	r1, [r2, r3]
		}else if(waterout[id].temp() < 50){
			temp_state[id] = TEMP_COOL;
			counter_temp[id] = 0;
		}
	}
}
 80008e2:	e047      	b.n	8000974 <TEMP_hot+0x110>
		}else if(waterout[id].temp() < 85 && waterout[id].temp() >= 50 ){
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4926      	ldr	r1, [pc, #152]	; (8000984 <TEMP_hot+0x120>)
 80008ea:	0013      	movs	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	189b      	adds	r3, r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	585b      	ldr	r3, [r3, r1]
 80008f4:	4798      	blx	r3
 80008f6:	1c03      	adds	r3, r0, #0
 80008f8:	4926      	ldr	r1, [pc, #152]	; (8000994 <TEMP_hot+0x130>)
 80008fa:	1c18      	adds	r0, r3, #0
 80008fc:	f7ff fca8 	bl	8000250 <__aeabi_fcmplt>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d01b      	beq.n	800093c <TEMP_hot+0xd8>
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	491e      	ldr	r1, [pc, #120]	; (8000984 <TEMP_hot+0x120>)
 800090a:	0013      	movs	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	189b      	adds	r3, r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	585b      	ldr	r3, [r3, r1]
 8000914:	4798      	blx	r3
 8000916:	1c03      	adds	r3, r0, #0
 8000918:	491f      	ldr	r1, [pc, #124]	; (8000998 <TEMP_hot+0x134>)
 800091a:	1c18      	adds	r0, r3, #0
 800091c:	f7ff fcb6 	bl	800028c <__aeabi_fcmpge>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d00b      	beq.n	800093c <TEMP_hot+0xd8>
			temp_state[id] = TEMP_NOT_HOT_ENOUGH;
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4a18      	ldr	r2, [pc, #96]	; (800098c <TEMP_hot+0x128>)
 800092a:	2103      	movs	r1, #3
 800092c:	54d1      	strb	r1, [r2, r3]
			counter_temp[id] = 0;
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <TEMP_hot+0x12c>)
 8000934:	0092      	lsls	r2, r2, #2
 8000936:	2100      	movs	r1, #0
 8000938:	50d1      	str	r1, [r2, r3]
}
 800093a:	e01b      	b.n	8000974 <TEMP_hot+0x110>
		}else if(waterout[id].temp() < 50){
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	781a      	ldrb	r2, [r3, #0]
 8000940:	4910      	ldr	r1, [pc, #64]	; (8000984 <TEMP_hot+0x120>)
 8000942:	0013      	movs	r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	189b      	adds	r3, r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	585b      	ldr	r3, [r3, r1]
 800094c:	4798      	blx	r3
 800094e:	1c03      	adds	r3, r0, #0
 8000950:	4911      	ldr	r1, [pc, #68]	; (8000998 <TEMP_hot+0x134>)
 8000952:	1c18      	adds	r0, r3, #0
 8000954:	f7ff fc7c 	bl	8000250 <__aeabi_fcmplt>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d100      	bne.n	800095e <TEMP_hot+0xfa>
}
 800095c:	e00a      	b.n	8000974 <TEMP_hot+0x110>
			temp_state[id] = TEMP_COOL;
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <TEMP_hot+0x128>)
 8000964:	2104      	movs	r1, #4
 8000966:	54d1      	strb	r1, [r2, r3]
			counter_temp[id] = 0;
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <TEMP_hot+0x12c>)
 800096e:	0092      	lsls	r2, r2, #2
 8000970:	2100      	movs	r1, #0
 8000972:	50d1      	str	r1, [r2, r3]
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000404 	.word	0x20000404
 8000980:	080081a8 	.word	0x080081a8
 8000984:	20000000 	.word	0x20000000
 8000988:	42c80000 	.word	0x42c80000
 800098c:	200004ec 	.word	0x200004ec
 8000990:	2000041c 	.word	0x2000041c
 8000994:	42aa0000 	.word	0x42aa0000
 8000998:	42480000 	.word	0x42480000

0800099c <TEMP_too_hot>:
static void TEMP_too_hot(uint8_t id){
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b085      	sub	sp, #20
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	0002      	movs	r2, r0
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	701a      	strb	r2, [r3, #0]
	if(timeout_temp[id]){
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <TEMP_too_hot+0xc4>)
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d050      	beq.n	8000a56 <TEMP_too_hot+0xba>
		UART_send(UART_3, "TOO HOT\n", sizeof("TOO HOT\n"));
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <TEMP_too_hot+0xc8>)
 80009b6:	2209      	movs	r2, #9
 80009b8:	0019      	movs	r1, r3
 80009ba:	2002      	movs	r0, #2
 80009bc:	f001 fa30 	bl	8001e20 <UART_send>
		timeout_temp[id] = false;
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4a26      	ldr	r2, [pc, #152]	; (8000a60 <TEMP_too_hot+0xc4>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	54d1      	strb	r1, [r2, r3]
		if(waterout[id].temp() < 95) {
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	4926      	ldr	r1, [pc, #152]	; (8000a68 <TEMP_too_hot+0xcc>)
 80009d0:	0013      	movs	r3, r2
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	189b      	adds	r3, r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	585b      	ldr	r3, [r3, r1]
 80009da:	4798      	blx	r3
 80009dc:	1c03      	adds	r3, r0, #0
 80009de:	4923      	ldr	r1, [pc, #140]	; (8000a6c <TEMP_too_hot+0xd0>)
 80009e0:	1c18      	adds	r0, r3, #0
 80009e2:	f7ff fc35 	bl	8000250 <__aeabi_fcmplt>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d005      	beq.n	80009f6 <TEMP_too_hot+0x5a>
			temp_state[id] = TEMP_HOT;
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <TEMP_too_hot+0xd4>)
 80009f0:	2101      	movs	r1, #1
 80009f2:	54d1      	strb	r1, [r2, r3]
 80009f4:	e008      	b.n	8000a08 <TEMP_too_hot+0x6c>
		}else{
			counter_temp[id]++;
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <TEMP_too_hot+0xd8>)
 80009fc:	0099      	lsls	r1, r3, #2
 80009fe:	588a      	ldr	r2, [r1, r2]
 8000a00:	1c51      	adds	r1, r2, #1
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <TEMP_too_hot+0xd8>)
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	5099      	str	r1, [r3, r2]
		}

		if(counter_temp[id] >= MAX_COUNTS){
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	781a      	ldrb	r2, [r3, #0]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <TEMP_too_hot+0xd8>)
 8000a0e:	0092      	lsls	r2, r2, #2
 8000a10:	58d3      	ldr	r3, [r2, r3]
 8000a12:	2b06      	cmp	r3, #6
 8000a14:	d91f      	bls.n	8000a56 <TEMP_too_hot+0xba>
			temp_state[id] = TEMP_EROR;
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <TEMP_too_hot+0xd4>)
 8000a1c:	2105      	movs	r1, #5
 8000a1e:	54d1      	strb	r1, [r2, r3]
			waterout[id].set_relay(DEVICE_CLOSE);
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	4910      	ldr	r1, [pc, #64]	; (8000a68 <TEMP_too_hot+0xcc>)
 8000a26:	0013      	movs	r3, r2
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	189b      	adds	r3, r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	18cb      	adds	r3, r1, r3
 8000a30:	3320      	adds	r3, #32
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2001      	movs	r0, #1
 8000a36:	4798      	blx	r3
			sprintf(MSG_temp[id],"%s%d%s","ERROR TEMP ",id,": TOO HOT\n");
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2232      	movs	r2, #50	; 0x32
 8000a3e:	435a      	muls	r2, r3
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <TEMP_too_hot+0xdc>)
 8000a42:	18d0      	adds	r0, r2, r3
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	781c      	ldrb	r4, [r3, #0]
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <TEMP_too_hot+0xe0>)
 8000a4a:	490d      	ldr	r1, [pc, #52]	; (8000a80 <TEMP_too_hot+0xe4>)
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <TEMP_too_hot+0xe8>)
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	0023      	movs	r3, r4
 8000a52:	f006 ff3d 	bl	80078d0 <siprintf>
		}
	}
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b003      	add	sp, #12
 8000a5c:	bd90      	pop	{r4, r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	20000404 	.word	0x20000404
 8000a64:	080081b0 	.word	0x080081b0
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	42be0000 	.word	0x42be0000
 8000a70:	200004ec 	.word	0x200004ec
 8000a74:	2000041c 	.word	0x2000041c
 8000a78:	20000424 	.word	0x20000424
 8000a7c:	080081bc 	.word	0x080081bc
 8000a80:	080081c8 	.word	0x080081c8
 8000a84:	080081d0 	.word	0x080081d0

08000a88 <TEMP_cool>:
static void TEMP_cool(uint8_t id){
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	0002      	movs	r2, r0
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	701a      	strb	r2, [r3, #0]

	if(water_state[id] == WATER_EMPTY || water_state[id] == WATER_EROR){
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4a4a      	ldr	r2, [pc, #296]	; (8000bc4 <TEMP_cool+0x13c>)
 8000a9a:	5cd3      	ldrb	r3, [r2, r3]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d005      	beq.n	8000aac <TEMP_cool+0x24>
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4a47      	ldr	r2, [pc, #284]	; (8000bc4 <TEMP_cool+0x13c>)
 8000aa6:	5cd3      	ldrb	r3, [r2, r3]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d112      	bne.n	8000ad2 <TEMP_cool+0x4a>
		counter_temp[id] = 0;
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <TEMP_cool+0x140>)
 8000ab2:	0092      	lsls	r2, r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	50d1      	str	r1, [r2, r3]
		waterout[id].set_relay(DEVICE_CLOSE);
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	4943      	ldr	r1, [pc, #268]	; (8000bcc <TEMP_cool+0x144>)
 8000abe:	0013      	movs	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	189b      	adds	r3, r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	18cb      	adds	r3, r1, r3
 8000ac8:	3320      	adds	r3, #32
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2001      	movs	r0, #1
 8000ace:	4798      	blx	r3
 8000ad0:	e00b      	b.n	8000aea <TEMP_cool+0x62>
	}else{
		waterout[id].set_relay(DEVICE_OPEN);
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	493d      	ldr	r1, [pc, #244]	; (8000bcc <TEMP_cool+0x144>)
 8000ad8:	0013      	movs	r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	189b      	adds	r3, r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	18cb      	adds	r3, r1, r3
 8000ae2:	3320      	adds	r3, #32
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	4798      	blx	r3
	}
	if(timeout_temp[id]){
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4a38      	ldr	r2, [pc, #224]	; (8000bd0 <TEMP_cool+0x148>)
 8000af0:	5cd3      	ldrb	r3, [r2, r3]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d062      	beq.n	8000bbc <TEMP_cool+0x134>
		UART_send(UART_3, "COOL\n", sizeof("COOL\n"));
 8000af6:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <TEMP_cool+0x14c>)
 8000af8:	2206      	movs	r2, #6
 8000afa:	0019      	movs	r1, r3
 8000afc:	2002      	movs	r0, #2
 8000afe:	f001 f98f 	bl	8001e20 <UART_send>
		timeout_temp[id] = false;
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4a32      	ldr	r2, [pc, #200]	; (8000bd0 <TEMP_cool+0x148>)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	54d1      	strb	r1, [r2, r3]
		if(waterout[id].temp() > 50){
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	492e      	ldr	r1, [pc, #184]	; (8000bcc <TEMP_cool+0x144>)
 8000b12:	0013      	movs	r3, r2
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	189b      	adds	r3, r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	585b      	ldr	r3, [r3, r1]
 8000b1c:	4798      	blx	r3
 8000b1e:	1c03      	adds	r3, r0, #0
 8000b20:	492d      	ldr	r1, [pc, #180]	; (8000bd8 <TEMP_cool+0x150>)
 8000b22:	1c18      	adds	r0, r3, #0
 8000b24:	f7ff fba8 	bl	8000278 <__aeabi_fcmpgt>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d017      	beq.n	8000b5c <TEMP_cool+0xd4>
			temp_state[id] = TEMP_NOT_HOT_ENOUGH;
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4a2a      	ldr	r2, [pc, #168]	; (8000bdc <TEMP_cool+0x154>)
 8000b32:	2103      	movs	r1, #3
 8000b34:	54d1      	strb	r1, [r2, r3]
			waterout[id].set_relay(DEVICE_OPEN);
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	4924      	ldr	r1, [pc, #144]	; (8000bcc <TEMP_cool+0x144>)
 8000b3c:	0013      	movs	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	189b      	adds	r3, r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	18cb      	adds	r3, r1, r3
 8000b46:	3320      	adds	r3, #32
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	4798      	blx	r3
			counter_temp[id] = 0;
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <TEMP_cool+0x140>)
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	2100      	movs	r1, #0
 8000b58:	50d1      	str	r1, [r2, r3]
 8000b5a:	e008      	b.n	8000b6e <TEMP_cool+0xe6>
		}else{
			counter_temp[id]++;
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <TEMP_cool+0x140>)
 8000b62:	0099      	lsls	r1, r3, #2
 8000b64:	588a      	ldr	r2, [r1, r2]
 8000b66:	1c51      	adds	r1, r2, #1
 8000b68:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <TEMP_cool+0x140>)
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	5099      	str	r1, [r3, r2]
		}
		if(counter_temp[id] >= MAX_COUNTS){
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <TEMP_cool+0x140>)
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	58d3      	ldr	r3, [r2, r3]
 8000b78:	2b06      	cmp	r3, #6
 8000b7a:	d91f      	bls.n	8000bbc <TEMP_cool+0x134>
			temp_state[id] = TEMP_EROR;
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <TEMP_cool+0x154>)
 8000b82:	2105      	movs	r1, #5
 8000b84:	54d1      	strb	r1, [r2, r3]
			waterout[id].set_relay(DEVICE_CLOSE);
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	4910      	ldr	r1, [pc, #64]	; (8000bcc <TEMP_cool+0x144>)
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	189b      	adds	r3, r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	18cb      	adds	r3, r1, r3
 8000b96:	3320      	adds	r3, #32
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	4798      	blx	r3
			sprintf(MSG_temp[id],"%s%d%s","ERROR TEMP ",id,": TOO COOL\n");
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2232      	movs	r2, #50	; 0x32
 8000ba4:	435a      	muls	r2, r3
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <TEMP_cool+0x158>)
 8000ba8:	18d0      	adds	r0, r2, r3
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781c      	ldrb	r4, [r3, #0]
 8000bae:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <TEMP_cool+0x15c>)
 8000bb0:	490d      	ldr	r1, [pc, #52]	; (8000be8 <TEMP_cool+0x160>)
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <TEMP_cool+0x164>)
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	0023      	movs	r3, r4
 8000bb8:	f006 fe8a 	bl	80078d0 <siprintf>
		}
	}
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b003      	add	sp, #12
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	200004f0 	.word	0x200004f0
 8000bc8:	2000041c 	.word	0x2000041c
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000404 	.word	0x20000404
 8000bd4:	080081dc 	.word	0x080081dc
 8000bd8:	42480000 	.word	0x42480000
 8000bdc:	200004ec 	.word	0x200004ec
 8000be0:	20000424 	.word	0x20000424
 8000be4:	080081bc 	.word	0x080081bc
 8000be8:	080081c8 	.word	0x080081c8
 8000bec:	080081e4 	.word	0x080081e4

08000bf0 <TEMP_not_hot_enough>:
static void TEMP_not_hot_enough(uint8_t id){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	0002      	movs	r2, r0
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	701a      	strb	r2, [r3, #0]

	if(water_state[id] == WATER_EMPTY || water_state[id] == WATER_EROR){
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4a3a      	ldr	r2, [pc, #232]	; (8000cec <TEMP_not_hot_enough+0xfc>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d005      	beq.n	8000c14 <TEMP_not_hot_enough+0x24>
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4a37      	ldr	r2, [pc, #220]	; (8000cec <TEMP_not_hot_enough+0xfc>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d10c      	bne.n	8000c2e <TEMP_not_hot_enough+0x3e>
		waterout[id].set_relay(DEVICE_CLOSE);
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	4935      	ldr	r1, [pc, #212]	; (8000cf0 <TEMP_not_hot_enough+0x100>)
 8000c1a:	0013      	movs	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	189b      	adds	r3, r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	18cb      	adds	r3, r1, r3
 8000c24:	3320      	adds	r3, #32
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2001      	movs	r0, #1
 8000c2a:	4798      	blx	r3
 8000c2c:	e00b      	b.n	8000c46 <TEMP_not_hot_enough+0x56>
	}else{
		waterout[id].set_relay(DEVICE_OPEN);
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	492f      	ldr	r1, [pc, #188]	; (8000cf0 <TEMP_not_hot_enough+0x100>)
 8000c34:	0013      	movs	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	189b      	adds	r3, r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	18cb      	adds	r3, r1, r3
 8000c3e:	3320      	adds	r3, #32
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2000      	movs	r0, #0
 8000c44:	4798      	blx	r3
	}
	if(timeout_temp[id]){
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4a2a      	ldr	r2, [pc, #168]	; (8000cf4 <TEMP_not_hot_enough+0x104>)
 8000c4c:	5cd3      	ldrb	r3, [r2, r3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d048      	beq.n	8000ce4 <TEMP_not_hot_enough+0xf4>
		UART_send(UART_3, "NOT HOT\n", sizeof("NOT HOT\n"));
 8000c52:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <TEMP_not_hot_enough+0x108>)
 8000c54:	2209      	movs	r2, #9
 8000c56:	0019      	movs	r1, r3
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f001 f8e1 	bl	8001e20 <UART_send>
		timeout_temp[id] = false;
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4a24      	ldr	r2, [pc, #144]	; (8000cf4 <TEMP_not_hot_enough+0x104>)
 8000c64:	2100      	movs	r1, #0
 8000c66:	54d1      	strb	r1, [r2, r3]
		if(waterout[id].temp() > 90){
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	4920      	ldr	r1, [pc, #128]	; (8000cf0 <TEMP_not_hot_enough+0x100>)
 8000c6e:	0013      	movs	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	189b      	adds	r3, r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	585b      	ldr	r3, [r3, r1]
 8000c78:	4798      	blx	r3
 8000c7a:	1c03      	adds	r3, r0, #0
 8000c7c:	491f      	ldr	r1, [pc, #124]	; (8000cfc <TEMP_not_hot_enough+0x10c>)
 8000c7e:	1c18      	adds	r0, r3, #0
 8000c80:	f7ff fafa 	bl	8000278 <__aeabi_fcmpgt>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d017      	beq.n	8000cb8 <TEMP_not_hot_enough+0xc8>
			temp_state[id] = TEMP_HOT;
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <TEMP_not_hot_enough+0x110>)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	54d1      	strb	r1, [r2, r3]
			waterout[id].set_relay(DEVICE_CLOSE);
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	4916      	ldr	r1, [pc, #88]	; (8000cf0 <TEMP_not_hot_enough+0x100>)
 8000c98:	0013      	movs	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	189b      	adds	r3, r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	18cb      	adds	r3, r1, r3
 8000ca2:	3320      	adds	r3, #32
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4798      	blx	r3
			counter_temp[id] = 0;
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <TEMP_not_hot_enough+0x114>)
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	50d1      	str	r1, [r2, r3]
		}
		else if(waterout[id].temp() < 50){
			temp_state[id] = TEMP_COOL;
		}
	}
}
 8000cb6:	e015      	b.n	8000ce4 <TEMP_not_hot_enough+0xf4>
		else if(waterout[id].temp() < 50){
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <TEMP_not_hot_enough+0x100>)
 8000cbe:	0013      	movs	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	189b      	adds	r3, r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	585b      	ldr	r3, [r3, r1]
 8000cc8:	4798      	blx	r3
 8000cca:	1c03      	adds	r3, r0, #0
 8000ccc:	490e      	ldr	r1, [pc, #56]	; (8000d08 <TEMP_not_hot_enough+0x118>)
 8000cce:	1c18      	adds	r0, r3, #0
 8000cd0:	f7ff fabe 	bl	8000250 <__aeabi_fcmplt>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d100      	bne.n	8000cda <TEMP_not_hot_enough+0xea>
}
 8000cd8:	e004      	b.n	8000ce4 <TEMP_not_hot_enough+0xf4>
			temp_state[id] = TEMP_COOL;
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <TEMP_not_hot_enough+0x110>)
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	54d1      	strb	r1, [r2, r3]
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b002      	add	sp, #8
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200004f0 	.word	0x200004f0
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000404 	.word	0x20000404
 8000cf8:	080081f0 	.word	0x080081f0
 8000cfc:	42b40000 	.word	0x42b40000
 8000d00:	200004ec 	.word	0x200004ec
 8000d04:	2000041c 	.word	0x2000041c
 8000d08:	42480000 	.word	0x42480000

08000d0c <TEMP_error>:
static void TEMP_error(uint8_t id){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	0002      	movs	r2, r0
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	701a      	strb	r2, [r3, #0]

	if(timeout_temp[id]){
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <TEMP_error+0x9c>)
 8000d1e:	5cd3      	ldrb	r3, [r2, r3]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d03c      	beq.n	8000d9e <TEMP_error+0x92>
		UART_send(UART_3, "ER\n", sizeof("ER\n"));
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <TEMP_error+0xa0>)
 8000d26:	2204      	movs	r2, #4
 8000d28:	0019      	movs	r1, r3
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f001 f878 	bl	8001e20 <UART_send>
		timeout_temp[id] = false;
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <TEMP_error+0x9c>)
 8000d36:	2100      	movs	r1, #0
 8000d38:	54d1      	strb	r1, [r2, r3]
		UART_send(UART_3, MSG_temp[id], sizeof(MSG_temp[id]));
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2232      	movs	r2, #50	; 0x32
 8000d40:	435a      	muls	r2, r3
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <TEMP_error+0xa4>)
 8000d44:	18d3      	adds	r3, r2, r3
 8000d46:	2232      	movs	r2, #50	; 0x32
 8000d48:	0019      	movs	r1, r3
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f001 f868 	bl	8001e20 <UART_send>
		if(waterout[id].temp() > 65 && waterout[id].temp() < 80){
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	4917      	ldr	r1, [pc, #92]	; (8000db4 <TEMP_error+0xa8>)
 8000d56:	0013      	movs	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	189b      	adds	r3, r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	585b      	ldr	r3, [r3, r1]
 8000d60:	4798      	blx	r3
 8000d62:	1c03      	adds	r3, r0, #0
 8000d64:	4914      	ldr	r1, [pc, #80]	; (8000db8 <TEMP_error+0xac>)
 8000d66:	1c18      	adds	r0, r3, #0
 8000d68:	f7ff fa86 	bl	8000278 <__aeabi_fcmpgt>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d100      	bne.n	8000d72 <TEMP_error+0x66>
			temp_state[id] = TEMP_HOT;
		}
	}
}
 8000d70:	e015      	b.n	8000d9e <TEMP_error+0x92>
		if(waterout[id].temp() > 65 && waterout[id].temp() < 80){
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	490f      	ldr	r1, [pc, #60]	; (8000db4 <TEMP_error+0xa8>)
 8000d78:	0013      	movs	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	189b      	adds	r3, r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	585b      	ldr	r3, [r3, r1]
 8000d82:	4798      	blx	r3
 8000d84:	1c03      	adds	r3, r0, #0
 8000d86:	490d      	ldr	r1, [pc, #52]	; (8000dbc <TEMP_error+0xb0>)
 8000d88:	1c18      	adds	r0, r3, #0
 8000d8a:	f7ff fa61 	bl	8000250 <__aeabi_fcmplt>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d100      	bne.n	8000d94 <TEMP_error+0x88>
}
 8000d92:	e004      	b.n	8000d9e <TEMP_error+0x92>
			temp_state[id] = TEMP_HOT;
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <TEMP_error+0xb4>)
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	54d1      	strb	r1, [r2, r3]
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	20000404 	.word	0x20000404
 8000dac:	080081fc 	.word	0x080081fc
 8000db0:	20000424 	.word	0x20000424
 8000db4:	20000000 	.word	0x20000000
 8000db8:	42820000 	.word	0x42820000
 8000dbc:	42a00000 	.word	0x42a00000
 8000dc0:	200004ec 	.word	0x200004ec

08000dc4 <FLOW_init>:

static void FLOW_init(uint8_t id){
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	0002      	movs	r2, r0
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	701a      	strb	r2, [r3, #0]
	void (*fn)(void) = (id == SYSTEM0) ? timeout_flow0 : timeout_flow1;
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <FLOW_init+0x18>
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <FLOW_init+0x4c>)
 8000dda:	e000      	b.n	8000dde <FLOW_init+0x1a>
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <FLOW_init+0x50>)
 8000dde:	60fb      	str	r3, [r7, #12]
	timeout_flow_id[id] = SCH_Add_Task(fn, CHECK_FLOWING_DURATION, CHECK_FLOWING_DURATION);
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781c      	ldrb	r4, [r3, #0]
 8000de4:	23fa      	movs	r3, #250	; 0xfa
 8000de6:	009a      	lsls	r2, r3, #2
 8000de8:	23fa      	movs	r3, #250	; 0xfa
 8000dea:	0099      	lsls	r1, r3, #2
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	0018      	movs	r0, r3
 8000df0:	f001 ff10 	bl	8002c14 <SCH_Add_Task>
 8000df4:	0001      	movs	r1, r0
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <FLOW_init+0x54>)
 8000df8:	00a2      	lsls	r2, r4, #2
 8000dfa:	50d1      	str	r1, [r2, r3]
	flow_state[id] = FLOW_NORMAL;
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <FLOW_init+0x58>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	54d1      	strb	r1, [r2, r3]
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b005      	add	sp, #20
 8000e0c:	bd90      	pop	{r4, r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	08000529 	.word	0x08000529
 8000e14:	0800053d 	.word	0x0800053d
 8000e18:	20000414 	.word	0x20000414
 8000e1c:	200004f4 	.word	0x200004f4

08000e20 <FLOW_normal>:
static void FLOW_normal(uint8_t id){
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	0002      	movs	r2, r0
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	701a      	strb	r2, [r3, #0]
	if(timeout_flow[id]){
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4a2f      	ldr	r2, [pc, #188]	; (8000ef0 <FLOW_normal+0xd0>)
 8000e32:	5cd3      	ldrb	r3, [r2, r3]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d057      	beq.n	8000ee8 <FLOW_normal+0xc8>
		timeout_flow[id] = false;
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4a2c      	ldr	r2, [pc, #176]	; (8000ef0 <FLOW_normal+0xd0>)
 8000e3e:	2100      	movs	r1, #0
 8000e40:	54d1      	strb	r1, [r2, r3]
		if(waterout[id].flow() && (system_state[id] == WATER_OUT_CLOSE)){
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781a      	ldrb	r2, [r3, #0]
 8000e46:	492b      	ldr	r1, [pc, #172]	; (8000ef4 <FLOW_normal+0xd4>)
 8000e48:	0013      	movs	r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	18cb      	adds	r3, r1, r3
 8000e52:	3304      	adds	r3, #4
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4798      	blx	r3
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d019      	beq.n	8000e90 <FLOW_normal+0x70>
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <FLOW_normal+0xd8>)
 8000e62:	5cd3      	ldrb	r3, [r2, r3]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d113      	bne.n	8000e90 <FLOW_normal+0x70>
			flow_state[id] = LEAKING;
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4a23      	ldr	r2, [pc, #140]	; (8000efc <FLOW_normal+0xdc>)
 8000e6e:	2103      	movs	r1, #3
 8000e70:	54d1      	strb	r1, [r2, r3]
			sprintf(MSG_flow[id],"%s%d%s","ERROR FLOW ", id, ": WATER LEAKING\r\n");
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2232      	movs	r2, #50	; 0x32
 8000e78:	435a      	muls	r2, r3
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <FLOW_normal+0xe0>)
 8000e7c:	18d0      	adds	r0, r2, r3
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781c      	ldrb	r4, [r3, #0]
 8000e82:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <FLOW_normal+0xe4>)
 8000e84:	4920      	ldr	r1, [pc, #128]	; (8000f08 <FLOW_normal+0xe8>)
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <FLOW_normal+0xec>)
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	0023      	movs	r3, r4
 8000e8c:	f006 fd20 	bl	80078d0 <siprintf>
		}
		if((!waterout[id].flow()) && (system_state[id] == WATER_OUT_OPEN)){
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	781a      	ldrb	r2, [r3, #0]
 8000e94:	4917      	ldr	r1, [pc, #92]	; (8000ef4 <FLOW_normal+0xd4>)
 8000e96:	0013      	movs	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	189b      	adds	r3, r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	18cb      	adds	r3, r1, r3
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4798      	blx	r3
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	2301      	movs	r3, #1
 8000eac:	4053      	eors	r3, r2
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d019      	beq.n	8000ee8 <FLOW_normal+0xc8>
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <FLOW_normal+0xd8>)
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d113      	bne.n	8000ee8 <FLOW_normal+0xc8>
			flow_state[id] = NOT_FLOWING;
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <FLOW_normal+0xdc>)
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	54d1      	strb	r1, [r2, r3]
			sprintf(MSG_flow[id],"%s%d%s","ERROR FLOW ", id, ": WATER NOT FLOWING\r\n");
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2232      	movs	r2, #50	; 0x32
 8000ed0:	435a      	muls	r2, r3
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <FLOW_normal+0xe0>)
 8000ed4:	18d0      	adds	r0, r2, r3
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781c      	ldrb	r4, [r3, #0]
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <FLOW_normal+0xe4>)
 8000edc:	490a      	ldr	r1, [pc, #40]	; (8000f08 <FLOW_normal+0xe8>)
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <FLOW_normal+0xf0>)
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	0023      	movs	r3, r4
 8000ee4:	f006 fcf4 	bl	80078d0 <siprintf>
		}
	}
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b003      	add	sp, #12
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	20000408 	.word	0x20000408
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	200004f8 	.word	0x200004f8
 8000efc:	200004f4 	.word	0x200004f4
 8000f00:	20000488 	.word	0x20000488
 8000f04:	08008200 	.word	0x08008200
 8000f08:	080081c8 	.word	0x080081c8
 8000f0c:	0800820c 	.word	0x0800820c
 8000f10:	08008220 	.word	0x08008220

08000f14 <FLOW_not_flowing>:
static void FLOW_not_flowing(uint8_t id){
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	701a      	strb	r2, [r3, #0]
	if(timeout_flow[id]){
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4a3b      	ldr	r2, [pc, #236]	; (8001014 <FLOW_not_flowing+0x100>)
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d06e      	beq.n	800100a <FLOW_not_flowing+0xf6>
		timeout_flow[id] = false;
 8000f2c:	1dfb      	adds	r3, r7, #7
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4a38      	ldr	r2, [pc, #224]	; (8001014 <FLOW_not_flowing+0x100>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	54d1      	strb	r1, [r2, r3]
		UART_send(UART_3, MSG_flow[id], sizeof(MSG_flow[id]));
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2232      	movs	r2, #50	; 0x32
 8000f3c:	435a      	muls	r2, r3
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <FLOW_not_flowing+0x104>)
 8000f40:	18d3      	adds	r3, r2, r3
 8000f42:	2232      	movs	r2, #50	; 0x32
 8000f44:	0019      	movs	r1, r3
 8000f46:	2002      	movs	r0, #2
 8000f48:	f000 ff6a 	bl	8001e20 <UART_send>
		if(waterout[id].flow() && (system_state[id] == WATER_OUT_CLOSE)){
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	4932      	ldr	r1, [pc, #200]	; (800101c <FLOW_not_flowing+0x108>)
 8000f52:	0013      	movs	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	18cb      	adds	r3, r1, r3
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4798      	blx	r3
 8000f62:	1e03      	subs	r3, r0, #0
 8000f64:	d021      	beq.n	8000faa <FLOW_not_flowing+0x96>
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <FLOW_not_flowing+0x10c>)
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d11b      	bne.n	8000faa <FLOW_not_flowing+0x96>
			SCH_Delete_Task(timeout_flow_id[id]);
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <FLOW_not_flowing+0x110>)
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	58d3      	ldr	r3, [r2, r3]
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f001 ffcf 	bl	8002f20 <SCH_Delete_Task>
			flow_state[id] = LEAKING;
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4a28      	ldr	r2, [pc, #160]	; (8001028 <FLOW_not_flowing+0x114>)
 8000f88:	2103      	movs	r1, #3
 8000f8a:	54d1      	strb	r1, [r2, r3]
			sprintf(MSG_flow[id],"%s%d%s","ERROR FLOW ", id, ": WATER LEAKING\r\n");
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2232      	movs	r2, #50	; 0x32
 8000f92:	435a      	muls	r2, r3
 8000f94:	4b20      	ldr	r3, [pc, #128]	; (8001018 <FLOW_not_flowing+0x104>)
 8000f96:	18d0      	adds	r0, r2, r3
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	781c      	ldrb	r4, [r3, #0]
 8000f9c:	4a23      	ldr	r2, [pc, #140]	; (800102c <FLOW_not_flowing+0x118>)
 8000f9e:	4924      	ldr	r1, [pc, #144]	; (8001030 <FLOW_not_flowing+0x11c>)
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <FLOW_not_flowing+0x120>)
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	0023      	movs	r3, r4
 8000fa6:	f006 fc93 	bl	80078d0 <siprintf>
		}
		if((!waterout[id].flow() && (system_state[id] == WATER_OUT_CLOSE)) ||
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	491b      	ldr	r1, [pc, #108]	; (800101c <FLOW_not_flowing+0x108>)
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	189b      	adds	r3, r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	18cb      	adds	r3, r1, r3
 8000fba:	3304      	adds	r3, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4798      	blx	r3
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <FLOW_not_flowing+0xc6>
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <FLOW_not_flowing+0x10c>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d012      	beq.n	8001000 <FLOW_not_flowing+0xec>
			(waterout[id].flow()) && (system_state[id] == WATER_OUT_OPEN)){
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	490f      	ldr	r1, [pc, #60]	; (800101c <FLOW_not_flowing+0x108>)
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	189b      	adds	r3, r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	18cb      	adds	r3, r1, r3
 8000fea:	3304      	adds	r3, #4
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4798      	blx	r3
 8000ff0:	1e03      	subs	r3, r0, #0
		if((!waterout[id].flow() && (system_state[id] == WATER_OUT_CLOSE)) ||
 8000ff2:	d00a      	beq.n	800100a <FLOW_not_flowing+0xf6>
			(waterout[id].flow()) && (system_state[id] == WATER_OUT_OPEN)){
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4a09      	ldr	r2, [pc, #36]	; (8001020 <FLOW_not_flowing+0x10c>)
 8000ffa:	5cd3      	ldrb	r3, [r2, r3]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d104      	bne.n	800100a <FLOW_not_flowing+0xf6>
			flow_state[id] = FLOW_NORMAL;
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <FLOW_not_flowing+0x114>)
 8001006:	2101      	movs	r1, #1
 8001008:	54d1      	strb	r1, [r2, r3]
		}

	}
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b003      	add	sp, #12
 8001010:	bd90      	pop	{r4, r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	20000408 	.word	0x20000408
 8001018:	20000488 	.word	0x20000488
 800101c:	20000000 	.word	0x20000000
 8001020:	200004f8 	.word	0x200004f8
 8001024:	20000414 	.word	0x20000414
 8001028:	200004f4 	.word	0x200004f4
 800102c:	08008200 	.word	0x08008200
 8001030:	080081c8 	.word	0x080081c8
 8001034:	0800820c 	.word	0x0800820c

08001038 <FLOW_leaking>:
static void FLOW_leaking(uint8_t id){
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b085      	sub	sp, #20
 800103c:	af02      	add	r7, sp, #8
 800103e:	0002      	movs	r2, r0
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	701a      	strb	r2, [r3, #0]
	if(timeout_flow[id]){
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4a3e      	ldr	r2, [pc, #248]	; (8001144 <FLOW_leaking+0x10c>)
 800104a:	5cd3      	ldrb	r3, [r2, r3]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d100      	bne.n	8001052 <FLOW_leaking+0x1a>
 8001050:	e073      	b.n	800113a <FLOW_leaking+0x102>
		timeout_flow[id] = false;
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4a3b      	ldr	r2, [pc, #236]	; (8001144 <FLOW_leaking+0x10c>)
 8001058:	2100      	movs	r1, #0
 800105a:	54d1      	strb	r1, [r2, r3]
		UART_send(UART_3, MSG_flow[id], sizeof(MSG_flow[id]));
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2232      	movs	r2, #50	; 0x32
 8001062:	435a      	muls	r2, r3
 8001064:	4b38      	ldr	r3, [pc, #224]	; (8001148 <FLOW_leaking+0x110>)
 8001066:	18d3      	adds	r3, r2, r3
 8001068:	2232      	movs	r2, #50	; 0x32
 800106a:	0019      	movs	r1, r3
 800106c:	2002      	movs	r0, #2
 800106e:	f000 fed7 	bl	8001e20 <UART_send>
		if((!waterout[id].flow()) && (system_state[id] == WATER_OUT_OPEN)){
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	4935      	ldr	r1, [pc, #212]	; (800114c <FLOW_leaking+0x114>)
 8001078:	0013      	movs	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	189b      	adds	r3, r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	18cb      	adds	r3, r1, r3
 8001082:	3304      	adds	r3, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4798      	blx	r3
 8001088:	0003      	movs	r3, r0
 800108a:	001a      	movs	r2, r3
 800108c:	2301      	movs	r3, #1
 800108e:	4053      	eors	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d021      	beq.n	80010da <FLOW_leaking+0xa2>
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <FLOW_leaking+0x118>)
 800109c:	5cd3      	ldrb	r3, [r2, r3]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d11b      	bne.n	80010da <FLOW_leaking+0xa2>
			SCH_Delete_Task(timeout_flow_id[id]);
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <FLOW_leaking+0x11c>)
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	58d3      	ldr	r3, [r2, r3]
 80010ac:	0018      	movs	r0, r3
 80010ae:	f001 ff37 	bl	8002f20 <SCH_Delete_Task>
			flow_state[id] = NOT_FLOWING;
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4a28      	ldr	r2, [pc, #160]	; (8001158 <FLOW_leaking+0x120>)
 80010b8:	2102      	movs	r1, #2
 80010ba:	54d1      	strb	r1, [r2, r3]
			sprintf(MSG_flow[id],"%s%d%s","ERROR FLOW ", id, ": WATER NOT FLOWING\r\n");
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2232      	movs	r2, #50	; 0x32
 80010c2:	435a      	muls	r2, r3
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <FLOW_leaking+0x110>)
 80010c6:	18d0      	adds	r0, r2, r3
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	781c      	ldrb	r4, [r3, #0]
 80010cc:	4a23      	ldr	r2, [pc, #140]	; (800115c <FLOW_leaking+0x124>)
 80010ce:	4924      	ldr	r1, [pc, #144]	; (8001160 <FLOW_leaking+0x128>)
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <FLOW_leaking+0x12c>)
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	0023      	movs	r3, r4
 80010d6:	f006 fbfb 	bl	80078d0 <siprintf>
		}
		if((!waterout[id].flow() && (system_state[id] == WATER_OUT_CLOSE)) ||
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	491b      	ldr	r1, [pc, #108]	; (800114c <FLOW_leaking+0x114>)
 80010e0:	0013      	movs	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	189b      	adds	r3, r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	18cb      	adds	r3, r1, r3
 80010ea:	3304      	adds	r3, #4
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4798      	blx	r3
 80010f0:	0003      	movs	r3, r0
 80010f2:	001a      	movs	r2, r3
 80010f4:	2301      	movs	r3, #1
 80010f6:	4053      	eors	r3, r2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <FLOW_leaking+0xd2>
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <FLOW_leaking+0x118>)
 8001104:	5cd3      	ldrb	r3, [r2, r3]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d012      	beq.n	8001130 <FLOW_leaking+0xf8>
			(waterout[id].flow()) && (system_state[id] == WATER_OUT_OPEN)){
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781a      	ldrb	r2, [r3, #0]
 800110e:	490f      	ldr	r1, [pc, #60]	; (800114c <FLOW_leaking+0x114>)
 8001110:	0013      	movs	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	189b      	adds	r3, r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	18cb      	adds	r3, r1, r3
 800111a:	3304      	adds	r3, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4798      	blx	r3
 8001120:	1e03      	subs	r3, r0, #0
		if((!waterout[id].flow() && (system_state[id] == WATER_OUT_CLOSE)) ||
 8001122:	d00a      	beq.n	800113a <FLOW_leaking+0x102>
			(waterout[id].flow()) && (system_state[id] == WATER_OUT_OPEN)){
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4a09      	ldr	r2, [pc, #36]	; (8001150 <FLOW_leaking+0x118>)
 800112a:	5cd3      	ldrb	r3, [r2, r3]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d104      	bne.n	800113a <FLOW_leaking+0x102>
			flow_state[id] = FLOW_NORMAL;
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4a08      	ldr	r2, [pc, #32]	; (8001158 <FLOW_leaking+0x120>)
 8001136:	2101      	movs	r1, #1
 8001138:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b003      	add	sp, #12
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	20000408 	.word	0x20000408
 8001148:	20000488 	.word	0x20000488
 800114c:	20000000 	.word	0x20000000
 8001150:	200004f8 	.word	0x200004f8
 8001154:	20000414 	.word	0x20000414
 8001158:	200004f4 	.word	0x200004f4
 800115c:	08008200 	.word	0x08008200
 8001160:	080081c8 	.word	0x080081c8
 8001164:	08008220 	.word	0x08008220

08001168 <WATER_OUT_open>:
			waterout[id].set_solenoid_in(DEVICE_CLOSE);
			counter_water_level[id] = 0;
		}
	}
}
static void WATER_OUT_open(uint8_t id){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	0002      	movs	r2, r0
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	701a      	strb	r2, [r3, #0]
	if(FLOW_is_enough_water(id)){
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	0018      	movs	r0, r3
 800117a:	f000 f995 	bl	80014a8 <FLOW_is_enough_water>
 800117e:	1e03      	subs	r3, r0, #0
 8001180:	d016      	beq.n	80011b0 <WATER_OUT_open+0x48>
		system_state[id] = WATER_OUT_CLOSE;
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <WATER_OUT_open+0x50>)
 8001188:	2100      	movs	r1, #0
 800118a:	54d1      	strb	r1, [r2, r3]
		waterout[id].set_solenoid_out(DEVICE_CLOSE);
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	490a      	ldr	r1, [pc, #40]	; (80011bc <WATER_OUT_open+0x54>)
 8001192:	0013      	movs	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	189b      	adds	r3, r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	18cb      	adds	r3, r1, r3
 800119c:	3318      	adds	r3, #24
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2001      	movs	r0, #1
 80011a2:	4798      	blx	r3
		UART_send(UART_3, "DU NUOC\n", sizeof("DU NUOC\n"));
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <WATER_OUT_open+0x58>)
 80011a6:	2209      	movs	r2, #9
 80011a8:	0019      	movs	r1, r3
 80011aa:	2002      	movs	r0, #2
 80011ac:	f000 fe38 	bl	8001e20 <UART_send>
	}
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200004f8 	.word	0x200004f8
 80011bc:	20000000 	.word	0x20000000
 80011c0:	0800825c 	.word	0x0800825c

080011c4 <WATER_OUT_close>:
static void WATER_OUT_close(uint8_t id){
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	1df9      	adds	r1, r7, #7
 80011cc:	7008      	strb	r0, [r1, #0]
	if(flag_liter[id]){
 80011ce:	1df9      	adds	r1, r7, #7
 80011d0:	7809      	ldrb	r1, [r1, #0]
 80011d2:	4824      	ldr	r0, [pc, #144]	; (8001264 <WATER_OUT_close+0xa0>)
 80011d4:	5c41      	ldrb	r1, [r0, r1]
 80011d6:	2900      	cmp	r1, #0
 80011d8:	d040      	beq.n	800125c <WATER_OUT_close+0x98>
		if((water_state[id] != WATER_EMPTY && water_state[id] != WATER_EROR) && (temp_state[id] != TEMP_COOL  && temp_state[id] != TEMP_EROR)){
 80011da:	1df9      	adds	r1, r7, #7
 80011dc:	7809      	ldrb	r1, [r1, #0]
 80011de:	4822      	ldr	r0, [pc, #136]	; (8001268 <WATER_OUT_close+0xa4>)
 80011e0:	5c41      	ldrb	r1, [r0, r1]
 80011e2:	2902      	cmp	r1, #2
 80011e4:	d03a      	beq.n	800125c <WATER_OUT_close+0x98>
 80011e6:	1df9      	adds	r1, r7, #7
 80011e8:	7809      	ldrb	r1, [r1, #0]
 80011ea:	481f      	ldr	r0, [pc, #124]	; (8001268 <WATER_OUT_close+0xa4>)
 80011ec:	5c41      	ldrb	r1, [r0, r1]
 80011ee:	2904      	cmp	r1, #4
 80011f0:	d034      	beq.n	800125c <WATER_OUT_close+0x98>
 80011f2:	1df9      	adds	r1, r7, #7
 80011f4:	7809      	ldrb	r1, [r1, #0]
 80011f6:	481d      	ldr	r0, [pc, #116]	; (800126c <WATER_OUT_close+0xa8>)
 80011f8:	5c41      	ldrb	r1, [r0, r1]
 80011fa:	2904      	cmp	r1, #4
 80011fc:	d02e      	beq.n	800125c <WATER_OUT_close+0x98>
 80011fe:	1df9      	adds	r1, r7, #7
 8001200:	7809      	ldrb	r1, [r1, #0]
 8001202:	481a      	ldr	r0, [pc, #104]	; (800126c <WATER_OUT_close+0xa8>)
 8001204:	5c41      	ldrb	r1, [r0, r1]
 8001206:	2905      	cmp	r1, #5
 8001208:	d028      	beq.n	800125c <WATER_OUT_close+0x98>
			flag_liter[id] = false;
 800120a:	1df9      	adds	r1, r7, #7
 800120c:	7809      	ldrb	r1, [r1, #0]
 800120e:	4815      	ldr	r0, [pc, #84]	; (8001264 <WATER_OUT_close+0xa0>)
 8001210:	2400      	movs	r4, #0
 8001212:	5444      	strb	r4, [r0, r1]
			FLOW_set_liter(id, liter[id]);
 8001214:	1df9      	adds	r1, r7, #7
 8001216:	7808      	ldrb	r0, [r1, #0]
 8001218:	4915      	ldr	r1, [pc, #84]	; (8001270 <WATER_OUT_close+0xac>)
 800121a:	0080      	lsls	r0, r0, #2
 800121c:	5841      	ldr	r1, [r0, r1]
 800121e:	000a      	movs	r2, r1
 8001220:	2100      	movs	r1, #0
 8001222:	000b      	movs	r3, r1
 8001224:	1df9      	adds	r1, r7, #7
 8001226:	7809      	ldrb	r1, [r1, #0]
 8001228:	0008      	movs	r0, r1
 800122a:	f000 f95d 	bl	80014e8 <FLOW_set_liter>
			system_state[id] = WATER_OUT_OPEN;
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <WATER_OUT_close+0xb0>)
 8001234:	2101      	movs	r1, #1
 8001236:	54d1      	strb	r1, [r2, r3]
			waterout[id].set_solenoid_out(DEVICE_OPEN);
 8001238:	1dfb      	adds	r3, r7, #7
 800123a:	781a      	ldrb	r2, [r3, #0]
 800123c:	490e      	ldr	r1, [pc, #56]	; (8001278 <WATER_OUT_close+0xb4>)
 800123e:	0013      	movs	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	189b      	adds	r3, r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	18cb      	adds	r3, r1, r3
 8001248:	3318      	adds	r3, #24
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2000      	movs	r0, #0
 800124e:	4798      	blx	r3
			UART_send(UART_3, "MO VOI\n", sizeof("MO VOI\n"));
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <WATER_OUT_close+0xb8>)
 8001252:	2208      	movs	r2, #8
 8001254:	0019      	movs	r1, r3
 8001256:	2002      	movs	r0, #2
 8001258:	f000 fde2 	bl	8001e20 <UART_send>
		}
	}
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b003      	add	sp, #12
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	200004fc 	.word	0x200004fc
 8001268:	200004f0 	.word	0x200004f0
 800126c:	200004ec 	.word	0x200004ec
 8001270:	20000500 	.word	0x20000500
 8001274:	200004f8 	.word	0x200004f8
 8001278:	20000000 	.word	0x20000000
 800127c:	08008268 	.word	0x08008268

08001280 <FLOW_get_pulse>:
static bool flag[MAX_WATEROUT] = {0};
static bool pre[MAX_WATEROUT] = {0};
static bool cur[MAX_WATEROUT] = {0};


void FLOW_get_pulse(){
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
	for(uint8_t index = 0; index < MAX_WATEROUT;index++){
 8001286:	2337      	movs	r3, #55	; 0x37
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	e09e      	b.n	80013ce <FLOW_get_pulse+0x14e>
		pre[index] = cur[index];
 8001290:	2037      	movs	r0, #55	; 0x37
 8001292:	183b      	adds	r3, r7, r0
 8001294:	781a      	ldrb	r2, [r3, #0]
 8001296:	183b      	adds	r3, r7, r0
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4952      	ldr	r1, [pc, #328]	; (80013e4 <FLOW_get_pulse+0x164>)
 800129c:	5c89      	ldrb	r1, [r1, r2]
 800129e:	4a52      	ldr	r2, [pc, #328]	; (80013e8 <FLOW_get_pulse+0x168>)
 80012a0:	54d1      	strb	r1, [r2, r3]
		cur[index] = (index == 0) ? FLOW0_STATE :  FLOW1_STATE ;
 80012a2:	183b      	adds	r3, r7, r0
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10a      	bne.n	80012c0 <FLOW_get_pulse+0x40>
 80012aa:	23a0      	movs	r3, #160	; 0xa0
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	2104      	movs	r1, #4
 80012b0:	0018      	movs	r0, r3
 80012b2:	f003 fae9 	bl	8004888 <HAL_GPIO_ReadPin>
 80012b6:	0003      	movs	r3, r0
 80012b8:	1e5a      	subs	r2, r3, #1
 80012ba:	4193      	sbcs	r3, r2
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	e008      	b.n	80012d2 <FLOW_get_pulse+0x52>
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <FLOW_get_pulse+0x16c>)
 80012c2:	2110      	movs	r1, #16
 80012c4:	0018      	movs	r0, r3
 80012c6:	f003 fadf 	bl	8004888 <HAL_GPIO_ReadPin>
 80012ca:	0003      	movs	r3, r0
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	4193      	sbcs	r3, r2
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2537      	movs	r5, #55	; 0x37
 80012d4:	197a      	adds	r2, r7, r5
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	4942      	ldr	r1, [pc, #264]	; (80013e4 <FLOW_get_pulse+0x164>)
 80012da:	548b      	strb	r3, [r1, r2]
		if(cur[index] == 1 && pre[index] == 0)
 80012dc:	197b      	adds	r3, r7, r5
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4a40      	ldr	r2, [pc, #256]	; (80013e4 <FLOW_get_pulse+0x164>)
 80012e2:	5cd3      	ldrb	r3, [r2, r3]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d06c      	beq.n	80013c2 <FLOW_get_pulse+0x142>
 80012e8:	197b      	adds	r3, r7, r5
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4a3e      	ldr	r2, [pc, #248]	; (80013e8 <FLOW_get_pulse+0x168>)
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	2201      	movs	r2, #1
 80012f2:	4053      	eors	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d063      	beq.n	80013c2 <FLOW_get_pulse+0x142>
		{
			toltal_pulse[index]++;
 80012fa:	197b      	adds	r3, r7, r5
 80012fc:	781c      	ldrb	r4, [r3, #0]
 80012fe:	4a3c      	ldr	r2, [pc, #240]	; (80013f0 <FLOW_get_pulse+0x170>)
 8001300:	00e3      	lsls	r3, r4, #3
 8001302:	18d3      	adds	r3, r2, r3
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2001      	movs	r0, #1
 800130a:	2100      	movs	r1, #0
 800130c:	1812      	adds	r2, r2, r0
 800130e:	414b      	adcs	r3, r1
 8001310:	4837      	ldr	r0, [pc, #220]	; (80013f0 <FLOW_get_pulse+0x170>)
 8001312:	00e1      	lsls	r1, r4, #3
 8001314:	1841      	adds	r1, r0, r1
 8001316:	600a      	str	r2, [r1, #0]
 8001318:	604b      	str	r3, [r1, #4]
			toltal_pulse1[index]++;
 800131a:	197b      	adds	r3, r7, r5
 800131c:	781c      	ldrb	r4, [r3, #0]
 800131e:	4a35      	ldr	r2, [pc, #212]	; (80013f4 <FLOW_get_pulse+0x174>)
 8001320:	00e3      	lsls	r3, r4, #3
 8001322:	18d3      	adds	r3, r2, r3
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2001      	movs	r0, #1
 800132a:	2100      	movs	r1, #0
 800132c:	1812      	adds	r2, r2, r0
 800132e:	414b      	adcs	r3, r1
 8001330:	4830      	ldr	r0, [pc, #192]	; (80013f4 <FLOW_get_pulse+0x174>)
 8001332:	00e1      	lsls	r1, r4, #3
 8001334:	1841      	adds	r1, r0, r1
 8001336:	600a      	str	r2, [r1, #0]
 8001338:	604b      	str	r3, [r1, #4]
			if(pulse[index] > 0){
 800133a:	197b      	adds	r3, r7, r5
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4a2e      	ldr	r2, [pc, #184]	; (80013f8 <FLOW_get_pulse+0x178>)
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	18d3      	adds	r3, r2, r3
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	0011      	movs	r1, r2
 800134a:	4319      	orrs	r1, r3
 800134c:	d039      	beq.n	80013c2 <FLOW_get_pulse+0x142>
				pulse[index]--;
 800134e:	197b      	adds	r3, r7, r5
 8001350:	781c      	ldrb	r4, [r3, #0]
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <FLOW_get_pulse+0x178>)
 8001354:	00e3      	lsls	r3, r4, #3
 8001356:	18d3      	adds	r3, r2, r3
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2001      	movs	r0, #1
 800135e:	4240      	negs	r0, r0
 8001360:	17c1      	asrs	r1, r0, #31
 8001362:	1812      	adds	r2, r2, r0
 8001364:	414b      	adcs	r3, r1
 8001366:	4824      	ldr	r0, [pc, #144]	; (80013f8 <FLOW_get_pulse+0x178>)
 8001368:	00e1      	lsls	r1, r4, #3
 800136a:	1841      	adds	r1, r0, r1
 800136c:	600a      	str	r2, [r1, #0]
 800136e:	604b      	str	r3, [r1, #4]
				char msg[50] = {'\0'};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	3304      	adds	r3, #4
 8001378:	222e      	movs	r2, #46	; 0x2e
 800137a:	2100      	movs	r1, #0
 800137c:	0018      	movs	r0, r3
 800137e:	f006 fa9e 	bl	80078be <memset>
				sprintf(msg,"%d\n" ,pulse[index]);
 8001382:	197b      	adds	r3, r7, r5
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <FLOW_get_pulse+0x178>)
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	18d3      	adds	r3, r2, r3
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	491a      	ldr	r1, [pc, #104]	; (80013fc <FLOW_get_pulse+0x17c>)
 8001392:	1d38      	adds	r0, r7, #4
 8001394:	f006 fa9c 	bl	80078d0 <siprintf>
				UART_send(UART_3, msg, sizeof(msg));
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2232      	movs	r2, #50	; 0x32
 800139c:	0019      	movs	r1, r3
 800139e:	2002      	movs	r0, #2
 80013a0:	f000 fd3e 	bl	8001e20 <UART_send>
				if(pulse[index] == 0){
 80013a4:	197b      	adds	r3, r7, r5
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <FLOW_get_pulse+0x178>)
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	18d3      	adds	r3, r2, r3
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	0011      	movs	r1, r2
 80013b4:	4319      	orrs	r1, r3
 80013b6:	d104      	bne.n	80013c2 <FLOW_get_pulse+0x142>
					flag[index] = 1;
 80013b8:	197b      	adds	r3, r7, r5
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4a10      	ldr	r2, [pc, #64]	; (8001400 <FLOW_get_pulse+0x180>)
 80013be:	2101      	movs	r1, #1
 80013c0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < MAX_WATEROUT;index++){
 80013c2:	2137      	movs	r1, #55	; 0x37
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	3201      	adds	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	2337      	movs	r3, #55	; 0x37
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d800      	bhi.n	80013da <FLOW_get_pulse+0x15a>
 80013d8:	e75a      	b.n	8001290 <FLOW_get_pulse+0x10>
				}
			}
		}
	}
}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b00e      	add	sp, #56	; 0x38
 80013e2:	bdb0      	pop	{r4, r5, r7, pc}
 80013e4:	20000550 	.word	0x20000550
 80013e8:	2000054c 	.word	0x2000054c
 80013ec:	50000800 	.word	0x50000800
 80013f0:	20000508 	.word	0x20000508
 80013f4:	20000518 	.word	0x20000518
 80013f8:	20000538 	.word	0x20000538
 80013fc:	08008270 	.word	0x08008270
 8001400:	20000548 	.word	0x20000548

08001404 <FLOW_is_flowing>:
bool FLOW_is_flowing(uint8_t index){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	0002      	movs	r2, r0
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	701a      	strb	r2, [r3, #0]
	if(index < 0 || index >= MAX_WATEROUT){
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d901      	bls.n	800141c <FLOW_is_flowing+0x18>
		return 0;
 8001418:	2300      	movs	r3, #0
 800141a:	e03d      	b.n	8001498 <FLOW_is_flowing+0x94>
	}
	if((toltal_pulse1[index] - toltal_pulse2[index]) >= 10){
 800141c:	1dfb      	adds	r3, r7, #7
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <FLOW_is_flowing+0x9c>)
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	18d3      	adds	r3, r2, r3
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <FLOW_is_flowing+0xa0>)
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	18d3      	adds	r3, r2, r3
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	1a80      	subs	r0, r0, r2
 800143a:	4199      	sbcs	r1, r3
 800143c:	0002      	movs	r2, r0
 800143e:	000b      	movs	r3, r1
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <FLOW_is_flowing+0x46>
 8001444:	d115      	bne.n	8001472 <FLOW_is_flowing+0x6e>
 8001446:	2a09      	cmp	r2, #9
 8001448:	d913      	bls.n	8001472 <FLOW_is_flowing+0x6e>
		toltal_pulse1[index] = 0;
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <FLOW_is_flowing+0x9c>)
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	18d1      	adds	r1, r2, r3
 8001454:	2200      	movs	r2, #0
 8001456:	2300      	movs	r3, #0
 8001458:	600a      	str	r2, [r1, #0]
 800145a:	604b      	str	r3, [r1, #4]
		toltal_pulse2[index] = 0;
 800145c:	1dfb      	adds	r3, r7, #7
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <FLOW_is_flowing+0xa0>)
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	18d1      	adds	r1, r2, r3
 8001466:	2200      	movs	r2, #0
 8001468:	2300      	movs	r3, #0
 800146a:	600a      	str	r2, [r1, #0]
 800146c:	604b      	str	r3, [r1, #4]
		return 1;
 800146e:	2301      	movs	r3, #1
 8001470:	e012      	b.n	8001498 <FLOW_is_flowing+0x94>
	}
	toltal_pulse1[index] = 0;
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <FLOW_is_flowing+0x9c>)
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	18d1      	adds	r1, r2, r3
 800147c:	2200      	movs	r2, #0
 800147e:	2300      	movs	r3, #0
 8001480:	600a      	str	r2, [r1, #0]
 8001482:	604b      	str	r3, [r1, #4]
	toltal_pulse2[index] = 0;
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <FLOW_is_flowing+0xa0>)
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	18d1      	adds	r1, r2, r3
 800148e:	2200      	movs	r2, #0
 8001490:	2300      	movs	r3, #0
 8001492:	600a      	str	r2, [r1, #0]
 8001494:	604b      	str	r3, [r1, #4]
	return 0;
 8001496:	2300      	movs	r3, #0
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000518 	.word	0x20000518
 80014a4:	20000528 	.word	0x20000528

080014a8 <FLOW_is_enough_water>:
bool FLOW_is_enough_water(uint8_t index){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	0002      	movs	r2, r0
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	701a      	strb	r2, [r3, #0]
	if(index < 0 || index >= MAX_WATEROUT){
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d901      	bls.n	80014c0 <FLOW_is_enough_water+0x18>
		return 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	e00d      	b.n	80014dc <FLOW_is_enough_water+0x34>
	}
	if(flag[index] == 1){
 80014c0:	1dfb      	adds	r3, r7, #7
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <FLOW_is_enough_water+0x3c>)
 80014c6:	5cd3      	ldrb	r3, [r2, r3]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <FLOW_is_enough_water+0x32>
		flag[index] = 0;
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <FLOW_is_enough_water+0x3c>)
 80014d2:	2100      	movs	r1, #0
 80014d4:	54d1      	strb	r1, [r2, r3]
		return 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <FLOW_is_enough_water+0x34>
	}
	return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	b002      	add	sp, #8
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000548 	.word	0x20000548

080014e8 <FLOW_set_liter>:
void FLOW_set_liter(uint8_t index, uint64_t milliliter)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b094      	sub	sp, #80	; 0x50
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	0001      	movs	r1, r0
 80014f0:	603a      	str	r2, [r7, #0]
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	240f      	movs	r4, #15
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	1c0a      	adds	r2, r1, #0
 80014fa:	701a      	strb	r2, [r3, #0]
	if(milliliter <= 0){
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	4313      	orrs	r3, r2
 8001502:	d028      	beq.n	8001556 <FLOW_set_liter+0x6e>
		return;
	}
	uint64_t num_pulse = milliliter * 1;
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	64ba      	str	r2, [r7, #72]	; 0x48
 800150a:	64fb      	str	r3, [r7, #76]	; 0x4c
	char msg[50] = {'\0'};
 800150c:	2514      	movs	r5, #20
 800150e:	197b      	adds	r3, r7, r5
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	3304      	adds	r3, #4
 8001516:	222e      	movs	r2, #46	; 0x2e
 8001518:	2100      	movs	r1, #0
 800151a:	0018      	movs	r0, r3
 800151c:	f006 f9cf 	bl	80078be <memset>
	sprintf(msg,"%d\n" ,milliliter);
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <FLOW_set_liter+0x78>)
 8001526:	1978      	adds	r0, r7, r5
 8001528:	f006 f9d2 	bl	80078d0 <siprintf>
	UART_send(UART_3, msg, sizeof(msg));
 800152c:	197b      	adds	r3, r7, r5
 800152e:	2232      	movs	r2, #50	; 0x32
 8001530:	0019      	movs	r1, r3
 8001532:	2002      	movs	r0, #2
 8001534:	f000 fc74 	bl	8001e20 <UART_send>
	pulse[index] = num_pulse;
 8001538:	193b      	adds	r3, r7, r4
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4a09      	ldr	r2, [pc, #36]	; (8001564 <FLOW_set_liter+0x7c>)
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	18d1      	adds	r1, r2, r3
 8001542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001546:	600a      	str	r2, [r1, #0]
 8001548:	604b      	str	r3, [r1, #4]
	flag[index] = 0;
 800154a:	193b      	adds	r3, r7, r4
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4a06      	ldr	r2, [pc, #24]	; (8001568 <FLOW_set_liter+0x80>)
 8001550:	2100      	movs	r1, #0
 8001552:	54d1      	strb	r1, [r2, r3]
 8001554:	e000      	b.n	8001558 <FLOW_set_liter+0x70>
		return;
 8001556:	46c0      	nop			; (mov r8, r8)
}
 8001558:	46bd      	mov	sp, r7
 800155a:	b014      	add	sp, #80	; 0x50
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	08008270 	.word	0x08008270
 8001564:	20000538 	.word	0x20000538
 8001568:	20000548 	.word	0x20000548

0800156c <fn_pulse>:
int fn_pulse(uint8_t index){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	0002      	movs	r2, r0
 8001574:	1dfb      	adds	r3, r7, #7
 8001576:	701a      	strb	r2, [r3, #0]
	return toltal_pulse[index];
 8001578:	1dfb      	adds	r3, r7, #7
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <fn_pulse+0x24>)
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	18d3      	adds	r3, r2, r3
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	0013      	movs	r3, r2
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000508 	.word	0x20000508

08001594 <water_0_level_0>:
 */


#include "DEVICE/hotwater.h"

static GPIO_PinState water_0_level_0() {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
	GPIO_PinState state = WATER0_LEVEL0_STATE;
 800159a:	1dfc      	adds	r4, r7, #7
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <water_0_level_0+0x54>)
 800159e:	2108      	movs	r1, #8
 80015a0:	0018      	movs	r0, r3
 80015a2:	f003 f971 	bl	8004888 <HAL_GPIO_ReadPin>
 80015a6:	0003      	movs	r3, r0
 80015a8:	7023      	strb	r3, [r4, #0]
	if(state == WT_LV_FULL){
 80015aa:	1dfb      	adds	r3, r7, #7
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d108      	bne.n	80015c4 <water_0_level_0+0x30>
		WT_EMPTY_OFF(0);
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	0099      	lsls	r1, r3, #2
 80015b6:	23a0      	movs	r3, #160	; 0xa0
 80015b8:	05db      	lsls	r3, r3, #23
 80015ba:	2201      	movs	r2, #1
 80015bc:	0018      	movs	r0, r3
 80015be:	f003 f980 	bl	80048c2 <HAL_GPIO_WritePin>
 80015c2:	e00b      	b.n	80015dc <water_0_level_0+0x48>
	}else if(state == WT_LV_EMPTY){
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d107      	bne.n	80015dc <water_0_level_0+0x48>
		WT_EMPTY_ON(0);
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	0099      	lsls	r1, r3, #2
 80015d0:	23a0      	movs	r3, #160	; 0xa0
 80015d2:	05db      	lsls	r3, r3, #23
 80015d4:	2200      	movs	r2, #0
 80015d6:	0018      	movs	r0, r3
 80015d8:	f003 f973 	bl	80048c2 <HAL_GPIO_WritePin>
	}
	return state;
 80015dc:	1dfb      	adds	r3, r7, #7
 80015de:	781b      	ldrb	r3, [r3, #0]
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b003      	add	sp, #12
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	50000400 	.word	0x50000400

080015ec <water_0_level_1>:
static GPIO_PinState water_0_level_1() {return WATER0_LEVEL1_STATE;}
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <water_0_level_1+0x18>)
 80015f2:	2110      	movs	r1, #16
 80015f4:	0018      	movs	r0, r3
 80015f6:	f003 f947 	bl	8004888 <HAL_GPIO_ReadPin>
 80015fa:	0003      	movs	r3, r0
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	50000400 	.word	0x50000400

08001608 <water_1_level_0>:
static GPIO_PinState water_1_level_0() {
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
	GPIO_PinState state = WATER1_LEVEL0_STATE;
 800160e:	1dfc      	adds	r4, r7, #7
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <water_1_level_0+0x4c>)
 8001612:	2120      	movs	r1, #32
 8001614:	0018      	movs	r0, r3
 8001616:	f003 f937 	bl	8004888 <HAL_GPIO_ReadPin>
 800161a:	0003      	movs	r3, r0
 800161c:	7023      	strb	r3, [r4, #0]
	if(state == WT_LV_FULL){
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d106      	bne.n	8001634 <water_1_level_0+0x2c>
		WT_EMPTY_OFF(1);
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <water_1_level_0+0x50>)
 8001628:	2201      	movs	r2, #1
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	0018      	movs	r0, r3
 800162e:	f003 f948 	bl	80048c2 <HAL_GPIO_WritePin>
 8001632:	e009      	b.n	8001648 <water_1_level_0+0x40>
	}else if(state == WT_LV_EMPTY){
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <water_1_level_0+0x40>
		WT_EMPTY_ON(1);
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <water_1_level_0+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0018      	movs	r0, r3
 8001644:	f003 f93d 	bl	80048c2 <HAL_GPIO_WritePin>
	}
	return state;
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	b003      	add	sp, #12
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	50000400 	.word	0x50000400
 8001658:	50000800 	.word	0x50000800

0800165c <water_1_level_1>:
static GPIO_PinState water_1_level_1() {return WATER1_LEVEL1_STATE;}
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <water_1_level_1+0x18>)
 8001662:	2140      	movs	r1, #64	; 0x40
 8001664:	0018      	movs	r0, r3
 8001666:	f003 f90f 	bl	8004888 <HAL_GPIO_ReadPin>
 800166a:	0003      	movs	r3, r0
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	50000400 	.word	0x50000400

08001678 <GetTemp0>:
static float GetTemp0(){return TEMP_get_temp(0);}
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
 800167c:	2000      	movs	r0, #0
 800167e:	f000 f8ff 	bl	8001880 <TEMP_get_temp>
 8001682:	1c03      	adds	r3, r0, #0
 8001684:	1c18      	adds	r0, r3, #0
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <GetTemp1>:
static float GetTemp1(){return TEMP_get_temp(1);}
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
 800168e:	2001      	movs	r0, #1
 8001690:	f000 f8f6 	bl	8001880 <TEMP_get_temp>
 8001694:	1c03      	adds	r3, r0, #0
 8001696:	1c18      	adds	r0, r3, #0
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <GetFlow0>:
static bool GetFlow0(){return FLOW_is_flowing(0);}
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff feaf 	bl	8001404 <FLOW_is_flowing>
 80016a6:	0003      	movs	r3, r0
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <GetFlow1>:
static bool GetFlow1(){return FLOW_is_flowing(1);}
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff fea6 	bl	8001404 <FLOW_is_flowing>
 80016b8:	0003      	movs	r3, r0
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <ControlRelay0>:
static void ControlRelay0(GPIO_PinState state){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	0002      	movs	r2, r0
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	701a      	strb	r2, [r3, #0]
	if(state == DEVICE_CLOSE){
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d107      	bne.n	80016e4 <ControlRelay0+0x24>
		BOILING_OFF(0);
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	019b      	lsls	r3, r3, #6
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <ControlRelay0+0x50>)
 80016da:	2201      	movs	r2, #1
 80016dc:	0019      	movs	r1, r3
 80016de:	f003 f8f0 	bl	80048c2 <HAL_GPIO_WritePin>
 80016e2:	e00a      	b.n	80016fa <ControlRelay0+0x3a>
	}else if(state == DEVICE_OPEN){
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d106      	bne.n	80016fa <ControlRelay0+0x3a>
		BOILING_ON(0);
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	019b      	lsls	r3, r3, #6
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <ControlRelay0+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	0019      	movs	r1, r3
 80016f6:	f003 f8e4 	bl	80048c2 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(RELAY0_GPIO_Port, RELAY0_Pin, state);
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <ControlRelay0+0x54>)
 8001700:	001a      	movs	r2, r3
 8001702:	2140      	movs	r1, #64	; 0x40
 8001704:	f003 f8dd 	bl	80048c2 <HAL_GPIO_WritePin>
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}
 8001710:	50000400 	.word	0x50000400
 8001714:	50000800 	.word	0x50000800

08001718 <ControlRelay1>:
static void ControlRelay1(GPIO_PinState state){
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	0002      	movs	r2, r0
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	701a      	strb	r2, [r3, #0]
	if(state == DEVICE_CLOSE){
 8001724:	1dfb      	adds	r3, r7, #7
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <ControlRelay1+0x24>
		BOILING_OFF(1);
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	480e      	ldr	r0, [pc, #56]	; (800176c <ControlRelay1+0x54>)
 8001732:	2201      	movs	r2, #1
 8001734:	0019      	movs	r1, r3
 8001736:	f003 f8c4 	bl	80048c2 <HAL_GPIO_WritePin>
 800173a:	e00a      	b.n	8001752 <ControlRelay1+0x3a>
	}else if(state == DEVICE_OPEN){
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <ControlRelay1+0x3a>
		BOILING_ON(1);
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	4808      	ldr	r0, [pc, #32]	; (800176c <ControlRelay1+0x54>)
 800174a:	2200      	movs	r2, #0
 800174c:	0019      	movs	r1, r3
 800174e:	f003 f8b8 	bl	80048c2 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, state);
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	0059      	lsls	r1, r3, #1
 800175a:	23a0      	movs	r3, #160	; 0xa0
 800175c:	05db      	lsls	r3, r3, #23
 800175e:	0018      	movs	r0, r3
 8001760:	f003 f8af 	bl	80048c2 <HAL_GPIO_WritePin>
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}
 800176c:	50000400 	.word	0x50000400

08001770 <ControlSolenoidOut0>:
static void ControlSolenoidOut0(GPIO_PinState state){ HAL_GPIO_WritePin(SOLENOID_OUT0_GPIO_Port, SOLENOID_OUT0_Pin, state);}
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	0002      	movs	r2, r0
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <ControlSolenoidOut0+0x24>)
 8001786:	0019      	movs	r1, r3
 8001788:	f003 f89b 	bl	80048c2 <HAL_GPIO_WritePin>
 800178c:	46c0      	nop			; (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}
 8001794:	50000800 	.word	0x50000800

08001798 <ControlSolenoidOut1>:
static void ControlSolenoidOut1(GPIO_PinState state){ HAL_GPIO_WritePin(SOLENOID_OUT1_GPIO_Port, SOLENOID_OUT1_Pin, state);}
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	0002      	movs	r2, r0
 80017a0:	1dfb      	adds	r3, r7, #7
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	1dfb      	adds	r3, r7, #7
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	0119      	lsls	r1, r3, #4
 80017ac:	23a0      	movs	r3, #160	; 0xa0
 80017ae:	05db      	lsls	r3, r3, #23
 80017b0:	0018      	movs	r0, r3
 80017b2:	f003 f886 	bl	80048c2 <HAL_GPIO_WritePin>
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}

080017be <ControlSolenoidIn0>:
static void ControlSolenoidIn0(GPIO_PinState state){ HAL_GPIO_WritePin(SOLENOID_IN0_GPIO_Port, SOLENOID_IN0_Pin, state);}
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	0002      	movs	r2, r0
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	0219      	lsls	r1, r3, #8
 80017d2:	23a0      	movs	r3, #160	; 0xa0
 80017d4:	05db      	lsls	r3, r3, #23
 80017d6:	0018      	movs	r0, r3
 80017d8:	f003 f873 	bl	80048c2 <HAL_GPIO_WritePin>
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <ControlSolenoidIn1>:
static void ControlSolenoidIn1(GPIO_PinState state){ HAL_GPIO_WritePin(SOLENOID_IN1_GPIO_Port, SOLENOID_IN1_Pin, state);}
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	0002      	movs	r2, r0
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	1dfb      	adds	r3, r7, #7
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4803      	ldr	r0, [pc, #12]	; (8001808 <ControlSolenoidIn1+0x24>)
 80017fa:	0019      	movs	r1, r3
 80017fc:	f003 f861 	bl	80048c2 <HAL_GPIO_WritePin>
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b002      	add	sp, #8
 8001806:	bd80      	pop	{r7, pc}
 8001808:	50000400 	.word	0x50000400

0800180c <GetRelay0>:
static GPIO_PinState GetRelay0() {return RELAY0_STATE;}
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <GetRelay0+0x18>)
 8001812:	2140      	movs	r1, #64	; 0x40
 8001814:	0018      	movs	r0, r3
 8001816:	f003 f837 	bl	8004888 <HAL_GPIO_ReadPin>
 800181a:	0003      	movs	r3, r0
 800181c:	0018      	movs	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	50000800 	.word	0x50000800

08001828 <GetRelay1>:
static GPIO_PinState GetRelay1() {return RELAY1_STATE;}
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	005a      	lsls	r2, r3, #1
 8001830:	23a0      	movs	r3, #160	; 0xa0
 8001832:	05db      	lsls	r3, r3, #23
 8001834:	0011      	movs	r1, r2
 8001836:	0018      	movs	r0, r3
 8001838:	f003 f826 	bl	8004888 <HAL_GPIO_ReadPin>
 800183c:	0003      	movs	r3, r0
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <GetSolenoid0>:
static GPIO_PinState GetSolenoid0() {return SOLENOID_OUT0_STATE ;}
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <GetSolenoid0+0x1c>)
 800184e:	0019      	movs	r1, r3
 8001850:	0010      	movs	r0, r2
 8001852:	f003 f819 	bl	8004888 <HAL_GPIO_ReadPin>
 8001856:	0003      	movs	r3, r0
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	50000800 	.word	0x50000800

08001864 <GetSolenoid1>:
static GPIO_PinState GetSolenoid1() {return SOLENOID_OUT1_STATE ;}
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	011a      	lsls	r2, r3, #4
 800186c:	23a0      	movs	r3, #160	; 0xa0
 800186e:	05db      	lsls	r3, r3, #23
 8001870:	0011      	movs	r1, r2
 8001872:	0018      	movs	r0, r3
 8001874:	f003 f808 	bl	8004888 <HAL_GPIO_ReadPin>
 8001878:	0003      	movs	r3, r0
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <TEMP_get_temp>:
#include "DEVICE/ntc.h"

static float _temp = 0;

float TEMP_get_temp(uint8_t id)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	0002      	movs	r2, r0
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	701a      	strb	r2, [r3, #0]
	if(id < 0 || id > 1) return -1;
 800188c:	1dfb      	adds	r3, r7, #7
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d901      	bls.n	8001898 <TEMP_get_temp+0x18>
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <TEMP_get_temp+0x24>)
 8001896:	e001      	b.n	800189c <TEMP_get_temp+0x1c>

//	uint32_t temp = Read_ADC(id);
	// TO DO

//	return (float)(temp);
	return (float)(_temp);
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <TEMP_get_temp+0x28>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	1c18      	adds	r0, r3, #0
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	bf800000 	.word	0xbf800000
 80018a8:	20000554 	.word	0x20000554

080018ac <set_temp>:

void set_temp(uint32_t value){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	_temp = value;
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7fe fdc3 	bl	8000440 <__aeabi_ui2f>
 80018ba:	1c02      	adds	r2, r0, #0
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <set_temp+0x1c>)
 80018be:	601a      	str	r2, [r3, #0]
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b002      	add	sp, #8
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000554 	.word	0x20000554

080018cc <ADC_init>:
		  .Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH
};
DMA_HandleTypeDef hdma_adc1;

bool ADC_init()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
	bool success = true;
 80018d2:	230f      	movs	r3, #15
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 80018da:	003b      	movs	r3, r7
 80018dc:	0018      	movs	r0, r3
 80018de:	230c      	movs	r3, #12
 80018e0:	001a      	movs	r2, r3
 80018e2:	2100      	movs	r1, #0
 80018e4:	f005 ffeb 	bl	80078be <memset>

	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <ADC_init+0x80>)
 80018ea:	0018      	movs	r0, r3
 80018ec:	f001 ffb2 	bl	8003854 <HAL_ADC_Init>
 80018f0:	1e03      	subs	r3, r0, #0
 80018f2:	d001      	beq.n	80018f8 <ADC_init+0x2c>
	{
	  Error_Handler();
 80018f4:	f001 f962 	bl	8002bbc <Error_Handler>
	}
	sConfig.Channel = ADC_CHANNEL_0;
 80018f8:	003b      	movs	r3, r7
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80018fe:	003b      	movs	r3, r7
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001904:	003b      	movs	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800190a:	003a      	movs	r2, r7
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <ADC_init+0x80>)
 800190e:	0011      	movs	r1, r2
 8001910:	0018      	movs	r0, r3
 8001912:	f002 f947 	bl	8003ba4 <HAL_ADC_ConfigChannel>
 8001916:	1e03      	subs	r3, r0, #0
 8001918:	d001      	beq.n	800191e <ADC_init+0x52>
	{
	  Error_Handler();
 800191a:	f001 f94f 	bl	8002bbc <Error_Handler>
	}

	/** Configure Regular Channel
	*/
	sConfig.Channel = ADC_CHANNEL_1;
 800191e:	003b      	movs	r3, r7
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <ADC_init+0x84>)
 8001922:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001924:	003b      	movs	r3, r7
 8001926:	2204      	movs	r2, #4
 8001928:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192a:	003a      	movs	r2, r7
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <ADC_init+0x80>)
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f002 f937 	bl	8003ba4 <HAL_ADC_ConfigChannel>
 8001936:	1e03      	subs	r3, r0, #0
 8001938:	d001      	beq.n	800193e <ADC_init+0x72>
	{
	  Error_Handler();
 800193a:	f001 f93f 	bl	8002bbc <Error_Handler>
	}

	return success;
 800193e:	230f      	movs	r3, #15
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	781b      	ldrb	r3, [r3, #0]
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b004      	add	sp, #16
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000048 	.word	0x20000048
 8001950:	04000002 	.word	0x04000002

08001954 <GPIO_init>:
 */


#include "HAL/gpio.h"

bool GPIO_init(){
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
	bool succes = 1;
 800195a:	2527      	movs	r5, #39	; 0x27
 800195c:	197b      	adds	r3, r7, r5
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	2410      	movs	r4, #16
 8001964:	193b      	adds	r3, r7, r4
 8001966:	0018      	movs	r0, r3
 8001968:	2314      	movs	r3, #20
 800196a:	001a      	movs	r2, r3
 800196c:	2100      	movs	r1, #0
 800196e:	f005 ffa6 	bl	80078be <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <GPIO_init+0x194>)
 8001974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001976:	4b5c      	ldr	r3, [pc, #368]	; (8001ae8 <GPIO_init+0x194>)
 8001978:	2101      	movs	r1, #1
 800197a:	430a      	orrs	r2, r1
 800197c:	635a      	str	r2, [r3, #52]	; 0x34
 800197e:	4b5a      	ldr	r3, [pc, #360]	; (8001ae8 <GPIO_init+0x194>)
 8001980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001982:	2201      	movs	r2, #1
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <GPIO_init+0x194>)
 800198c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198e:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <GPIO_init+0x194>)
 8001990:	2104      	movs	r1, #4
 8001992:	430a      	orrs	r2, r1
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
 8001996:	4b54      	ldr	r3, [pc, #336]	; (8001ae8 <GPIO_init+0x194>)
 8001998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	4b51      	ldr	r3, [pc, #324]	; (8001ae8 <GPIO_init+0x194>)
 80019a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a6:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <GPIO_init+0x194>)
 80019a8:	2102      	movs	r1, #2
 80019aa:	430a      	orrs	r2, r1
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34
 80019ae:	4b4e      	ldr	r3, [pc, #312]	; (8001ae8 <GPIO_init+0x194>)
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b2:	2202      	movs	r2, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ba:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <GPIO_init+0x194>)
 80019bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019be:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <GPIO_init+0x194>)
 80019c0:	2108      	movs	r1, #8
 80019c2:	430a      	orrs	r2, r1
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34
 80019c6:	4b48      	ldr	r3, [pc, #288]	; (8001ae8 <GPIO_init+0x194>)
 80019c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ca:	2208      	movs	r2, #8
 80019cc:	4013      	ands	r3, r2
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, SOLENOID_IN1_Pin|BOILING0_Pin|BOILING1_Pin, GPIO_PIN_RESET);
 80019d2:	23a8      	movs	r3, #168	; 0xa8
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	4845      	ldr	r0, [pc, #276]	; (8001aec <GPIO_init+0x198>)
 80019d8:	2200      	movs	r2, #0
 80019da:	0019      	movs	r1, r3
 80019dc:	f002 ff71 	bl	80048c2 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, RELAY1_Pin|WT0_EMPTY_Pin|SOLENOID_OUT1_Pin|SOLENOID_IN0_Pin, GPIO_PIN_RESET);
 80019e0:	238b      	movs	r3, #139	; 0x8b
 80019e2:	0219      	lsls	r1, r3, #8
 80019e4:	23a0      	movs	r3, #160	; 0xa0
 80019e6:	05db      	lsls	r3, r3, #23
 80019e8:	2200      	movs	r2, #0
 80019ea:	0018      	movs	r0, r3
 80019ec:	f002 ff69 	bl	80048c2 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, RELAY0_Pin|WT1_EMPTY_Pin|SOLENOID_OUT0_Pin, GPIO_PIN_RESET);
 80019f0:	23b0      	movs	r3, #176	; 0xb0
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	483e      	ldr	r0, [pc, #248]	; (8001af0 <GPIO_init+0x19c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	0019      	movs	r1, r3
 80019fa:	f002 ff62 	bl	80048c2 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : FLOW0_Pin */
	  GPIO_InitStruct.Pin = FLOW0_Pin;
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	2204      	movs	r2, #4
 8001a02:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(FLOW0_GPIO_Port, &GPIO_InitStruct);
 8001a10:	193a      	adds	r2, r7, r4
 8001a12:	23a0      	movs	r3, #160	; 0xa0
 8001a14:	05db      	lsls	r3, r3, #23
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f002 fdd1 	bl	80045c0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : FLOW1_Pin */
	  GPIO_InitStruct.Pin = FLOW1_Pin;
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	2210      	movs	r2, #16
 8001a22:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	2200      	movs	r2, #0
 8001a28:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(FLOW1_GPIO_Port, &GPIO_InitStruct);
 8001a30:	193b      	adds	r3, r7, r4
 8001a32:	4a2f      	ldr	r2, [pc, #188]	; (8001af0 <GPIO_init+0x19c>)
 8001a34:	0019      	movs	r1, r3
 8001a36:	0010      	movs	r0, r2
 8001a38:	f002 fdc2 	bl	80045c0 <HAL_GPIO_Init>

	  /*Configure GPIO pins : SOLENOID_IN1_Pin BOILING0_Pin BOILING1_Pin */
	  GPIO_InitStruct.Pin = SOLENOID_IN1_Pin|BOILING0_Pin|BOILING1_Pin;
 8001a3c:	0021      	movs	r1, r4
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	22a8      	movs	r2, #168	; 0xa8
 8001a42:	0212      	lsls	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	000c      	movs	r4, r1
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	193b      	adds	r3, r7, r4
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	193b      	adds	r3, r7, r4
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5a:	193b      	adds	r3, r7, r4
 8001a5c:	4a23      	ldr	r2, [pc, #140]	; (8001aec <GPIO_init+0x198>)
 8001a5e:	0019      	movs	r1, r3
 8001a60:	0010      	movs	r0, r2
 8001a62:	f002 fdad 	bl	80045c0 <HAL_GPIO_Init>

	  /*Configure GPIO pins : RELAY1_Pin WT0_EMPTY_Pin SOLENOID_OUT1_Pin SOLENOID_IN0_Pin */
	  GPIO_InitStruct.Pin = RELAY1_Pin|WT0_EMPTY_Pin|SOLENOID_OUT1_Pin|SOLENOID_IN0_Pin;
 8001a66:	0021      	movs	r1, r4
 8001a68:	187b      	adds	r3, r7, r1
 8001a6a:	228b      	movs	r2, #139	; 0x8b
 8001a6c:	0212      	lsls	r2, r2, #8
 8001a6e:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	000c      	movs	r4, r1
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	2201      	movs	r2, #1
 8001a76:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	193a      	adds	r2, r7, r4
 8001a86:	23a0      	movs	r3, #160	; 0xa0
 8001a88:	05db      	lsls	r3, r3, #23
 8001a8a:	0011      	movs	r1, r2
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f002 fd97 	bl	80045c0 <HAL_GPIO_Init>

	  /*Configure GPIO pins : RELAY0_Pin WT1_EMPTY_Pin SOLENOID_OUT0_Pin */
	  GPIO_InitStruct.Pin = RELAY0_Pin|WT1_EMPTY_Pin|SOLENOID_OUT0_Pin;
 8001a92:	0021      	movs	r1, r4
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	22b0      	movs	r2, #176	; 0xb0
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9c:	000c      	movs	r4, r1
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab0:	193b      	adds	r3, r7, r4
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <GPIO_init+0x19c>)
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	0010      	movs	r0, r2
 8001ab8:	f002 fd82 	bl	80045c0 <HAL_GPIO_Init>

	  /*Configure GPIO pins : WATER0_LEVEL0_Pin WATER0_LEVEL1_Pin WATER1_LEVEL0_Pin WATER1_LEVEL1_Pin */
	  GPIO_InitStruct.Pin = WATER0_LEVEL0_Pin|WATER0_LEVEL1_Pin|WATER1_LEVEL0_Pin|WATER1_LEVEL1_Pin;
 8001abc:	0021      	movs	r1, r4
 8001abe:	187b      	adds	r3, r7, r1
 8001ac0:	2278      	movs	r2, #120	; 0x78
 8001ac2:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	4a06      	ldr	r2, [pc, #24]	; (8001aec <GPIO_init+0x198>)
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	0010      	movs	r0, r2
 8001ad8:	f002 fd72 	bl	80045c0 <HAL_GPIO_Init>
	return succes;
 8001adc:	197b      	adds	r3, r7, r5
 8001ade:	781b      	ldrb	r3, [r3, #0]
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b00a      	add	sp, #40	; 0x28
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	50000400 	.word	0x50000400
 8001af0:	50000800 	.word	0x50000800

08001af4 <TIM_init>:
				  .ClockDivision = TIM_CLOCKDIVISION_DIV1,
				  .AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE,
		  }
};

bool TIM_init(){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	2310      	movs	r3, #16
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	0018      	movs	r0, r3
 8001b00:	2310      	movs	r3, #16
 8001b02:	001a      	movs	r2, r3
 8001b04:	2100      	movs	r1, #0
 8001b06:	f005 feda 	bl	80078be <memset>
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	230c      	movs	r3, #12
 8001b10:	001a      	movs	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	f005 fed3 	bl	80078be <memset>

		if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <TIM_init+0x8c>)
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f003 fbf4 	bl	8005308 <HAL_TIM_Base_Init>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d001      	beq.n	8001b28 <TIM_init+0x34>
		{
			Error_Handler();
 8001b24:	f001 f84a 	bl	8002bbc <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	2110      	movs	r1, #16
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	0152      	lsls	r2, r2, #5
 8001b30:	601a      	str	r2, [r3, #0]
		if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b32:	187a      	adds	r2, r7, r1
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <TIM_init+0x8c>)
 8001b36:	0011      	movs	r1, r2
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f003 fdc5 	bl	80056c8 <HAL_TIM_ConfigClockSource>
 8001b3e:	1e03      	subs	r3, r0, #0
 8001b40:	d001      	beq.n	8001b46 <TIM_init+0x52>
		{
			Error_Handler();
 8001b42:	f001 f83b 	bl	8002bbc <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b52:	1d3a      	adds	r2, r7, #4
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <TIM_init+0x8c>)
 8001b56:	0011      	movs	r1, r2
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f003 ffbd 	bl	8005ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d001      	beq.n	8001b66 <TIM_init+0x72>
		{
			Error_Handler();
 8001b62:	f001 f82b 	bl	8002bbc <Error_Handler>
		}
		if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <TIM_init+0x8c>)
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f003 fc25 	bl	80053b8 <HAL_TIM_Base_Start_IT>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d001      	beq.n	8001b76 <TIM_init+0x82>
		{
			Error_Handler();
 8001b72:	f001 f823 	bl	8002bbc <Error_Handler>
		}
		return true;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b008      	add	sp, #32
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200000ac 	.word	0x200000ac

08001b84 <setTimer>:


void setTimer(int index, int duration){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <setTimer+0x28>)
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	6839      	ldr	r1, [r7, #0]
 8001b96:	50d1      	str	r1, [r2, r3]
	timer_flag[index] = 0;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <setTimer+0x2c>)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	0092      	lsls	r2, r2, #2
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	50d1      	str	r1, [r2, r3]
};
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	200005b4 	.word	0x200005b4
 8001bb0:	200005dc 	.word	0x200005dc

08001bb4 <isTimer_timeout>:

int isTimer_timeout(int index){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]){
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <isTimer_timeout+0x2c>)
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	58d3      	ldr	r3, [r2, r3]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <isTimer_timeout+0x22>
		timer_flag[index] = 0;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <isTimer_timeout+0x2c>)
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	2100      	movs	r1, #0
 8001bd0:	50d1      	str	r1, [r2, r3]
		return 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <isTimer_timeout+0x24>
	}
	return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200005dc 	.word	0x200005dc

08001be4 <timerRun>:

void timerRun(){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_TIMER ; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	e01c      	b.n	8001c2a <timerRun+0x46>
	{
		if(timer_counter[i] > 0){
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <timerRun+0x58>)
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	58d3      	ldr	r3, [r2, r3]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	dd13      	ble.n	8001c24 <timerRun+0x40>
			timer_counter[i] -- ;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <timerRun+0x58>)
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	0092      	lsls	r2, r2, #2
 8001c02:	58d3      	ldr	r3, [r2, r3]
 8001c04:	1e59      	subs	r1, r3, #1
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <timerRun+0x58>)
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	50d1      	str	r1, [r2, r3]
			if(timer_counter [i] == 0){
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <timerRun+0x58>)
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	58d3      	ldr	r3, [r2, r3]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d104      	bne.n	8001c24 <timerRun+0x40>
				timer_flag[i] = 1;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <timerRun+0x5c>)
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	2101      	movs	r1, #1
 8001c22:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < MAX_TIMER ; i++)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3301      	adds	r3, #1
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b09      	cmp	r3, #9
 8001c2e:	dddf      	ble.n	8001bf0 <timerRun+0xc>
			}
		}
	}

};
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	200005b4 	.word	0x200005b4
 8001c40:	200005dc 	.word	0x200005dc

08001c44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance){
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d103      	bne.n	8001c60 <HAL_TIM_PeriodElapsedCallback+0x1c>
//		for (int fn_idx = 0; fn_idx < fn_table_len; ++fn_idx) {
//			fn_table[fn_idx]();
//		}
		timerRun();
 8001c58:	f7ff ffc4 	bl	8001be4 <timerRun>
		SCH_Update();
 8001c5c:	f000 ffb4 	bl	8002bc8 <SCH_Update>
	}
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200000ac 	.word	0x200000ac

08001c6c <UART_init>:
			.huart_p = &huart4,
			.buffer = &uart_buffer[UART_4]
		},
};

bool UART_init(){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
	bool success = true;
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
	// Init hal
	success = (HAL_UART_Init(&huart1) == HAL_OK) && success;
 8001c78:	4b60      	ldr	r3, [pc, #384]	; (8001dfc <UART_init+0x190>)
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f003 ffac 	bl	8005bd8 <HAL_UART_Init>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d105      	bne.n	8001c90 <UART_init+0x24>
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <UART_init+0x24>
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	e000      	b.n	8001c92 <UART_init+0x26>
 8001c90:	2200      	movs	r2, #0
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
	success = (HAL_UART_Init(&huart2) == HAL_OK) && success;
 8001c9e:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <UART_init+0x194>)
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f003 ff99 	bl	8005bd8 <HAL_UART_Init>
 8001ca6:	1e03      	subs	r3, r0, #0
 8001ca8:	d105      	bne.n	8001cb6 <UART_init+0x4a>
 8001caa:	1dfb      	adds	r3, r7, #7
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <UART_init+0x4a>
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	e000      	b.n	8001cb8 <UART_init+0x4c>
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	1dfb      	adds	r3, r7, #7
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	701a      	strb	r2, [r3, #0]
	success = (HAL_UART_Init(&huart3) == HAL_OK) && success;
 8001cc4:	4b4f      	ldr	r3, [pc, #316]	; (8001e04 <UART_init+0x198>)
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f003 ff86 	bl	8005bd8 <HAL_UART_Init>
 8001ccc:	1e03      	subs	r3, r0, #0
 8001cce:	d105      	bne.n	8001cdc <UART_init+0x70>
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <UART_init+0x70>
 8001cd8:	2201      	movs	r2, #1
 8001cda:	e000      	b.n	8001cde <UART_init+0x72>
 8001cdc:	2200      	movs	r2, #0
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	701a      	strb	r2, [r3, #0]
	success = (HAL_UART_Init(&huart4) == HAL_OK) && success;
 8001cea:	4b47      	ldr	r3, [pc, #284]	; (8001e08 <UART_init+0x19c>)
 8001cec:	0018      	movs	r0, r3
 8001cee:	f003 ff73 	bl	8005bd8 <HAL_UART_Init>
 8001cf2:	1e03      	subs	r3, r0, #0
 8001cf4:	d105      	bne.n	8001d02 <UART_init+0x96>
 8001cf6:	1dfb      	adds	r3, r7, #7
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <UART_init+0x96>
 8001cfe:	2201      	movs	r2, #1
 8001d00:	e000      	b.n	8001d04 <UART_init+0x98>
 8001d02:	2200      	movs	r2, #0
 8001d04:	1dfb      	adds	r3, r7, #7
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
	// Init buffer
	success = ring_buffer_init(uart_table[UART_1].buffer, sizeof(uint8_t)) && success;
 8001d10:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <UART_init+0x1a0>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2101      	movs	r1, #1
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 f940 	bl	8001f9c <ring_buffer_init>
 8001d1c:	1e03      	subs	r3, r0, #0
 8001d1e:	d005      	beq.n	8001d2c <UART_init+0xc0>
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <UART_init+0xc0>
 8001d28:	2201      	movs	r2, #1
 8001d2a:	e000      	b.n	8001d2e <UART_init+0xc2>
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	400a      	ands	r2, r1
 8001d38:	701a      	strb	r2, [r3, #0]
	success = ring_buffer_init(uart_table[UART_2].buffer, sizeof(uint16_t)) && success;
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <UART_init+0x1a0>)
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2102      	movs	r1, #2
 8001d40:	0018      	movs	r0, r3
 8001d42:	f000 f92b 	bl	8001f9c <ring_buffer_init>
 8001d46:	1e03      	subs	r3, r0, #0
 8001d48:	d005      	beq.n	8001d56 <UART_init+0xea>
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <UART_init+0xea>
 8001d52:	2201      	movs	r2, #1
 8001d54:	e000      	b.n	8001d58 <UART_init+0xec>
 8001d56:	2200      	movs	r2, #0
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	2101      	movs	r1, #1
 8001d60:	400a      	ands	r2, r1
 8001d62:	701a      	strb	r2, [r3, #0]
	success = ring_buffer_init(uart_table[UART_3].buffer, sizeof(uint8_t)) && success;
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <UART_init+0x1a0>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 f916 	bl	8001f9c <ring_buffer_init>
 8001d70:	1e03      	subs	r3, r0, #0
 8001d72:	d005      	beq.n	8001d80 <UART_init+0x114>
 8001d74:	1dfb      	adds	r3, r7, #7
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <UART_init+0x114>
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	e000      	b.n	8001d82 <UART_init+0x116>
 8001d80:	2200      	movs	r2, #0
 8001d82:	1dfb      	adds	r3, r7, #7
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
	success = ring_buffer_init(uart_table[UART_4].buffer, sizeof(uint8_t)) && success;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <UART_init+0x1a0>)
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	2101      	movs	r1, #1
 8001d94:	0018      	movs	r0, r3
 8001d96:	f000 f901 	bl	8001f9c <ring_buffer_init>
 8001d9a:	1e03      	subs	r3, r0, #0
 8001d9c:	d005      	beq.n	8001daa <UART_init+0x13e>
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <UART_init+0x13e>
 8001da6:	2201      	movs	r2, #1
 8001da8:	e000      	b.n	8001dac <UART_init+0x140>
 8001daa:	2200      	movs	r2, #0
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	2101      	movs	r1, #1
 8001db4:	400a      	ands	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(uart_table[UART_1].huart_p, &uart_table[UART_1].temp_data, 1);
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <UART_init+0x1a0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4914      	ldr	r1, [pc, #80]	; (8001e10 <UART_init+0x1a4>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f003 fffb 	bl	8005dbc <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uart_table[UART_2].huart_p, &uart_table[UART_2].temp_data, 1);
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <UART_init+0x1a0>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4912      	ldr	r1, [pc, #72]	; (8001e14 <UART_init+0x1a8>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f003 fff4 	bl	8005dbc <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uart_table[UART_3].huart_p, &uart_table[UART_3].temp_data, 1);
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <UART_init+0x1a0>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	490f      	ldr	r1, [pc, #60]	; (8001e18 <UART_init+0x1ac>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f003 ffed 	bl	8005dbc <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uart_table[UART_4].huart_p, &uart_table[UART_4].temp_data, 1);
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <UART_init+0x1a0>)
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	490d      	ldr	r1, [pc, #52]	; (8001e1c <UART_init+0x1b0>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	0018      	movs	r0, r3
 8001dec:	f003 ffe6 	bl	8005dbc <HAL_UART_Receive_IT>
	return success;
 8001df0:	1dfb      	adds	r3, r7, #7
 8001df2:	781b      	ldrb	r3, [r3, #0]
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b002      	add	sp, #8
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200000f8 	.word	0x200000f8
 8001e00:	2000018c 	.word	0x2000018c
 8001e04:	20000220 	.word	0x20000220
 8001e08:	200002b4 	.word	0x200002b4
 8001e0c:	20000348 	.word	0x20000348
 8001e10:	20000350 	.word	0x20000350
 8001e14:	2000035c 	.word	0x2000035c
 8001e18:	20000368 	.word	0x20000368
 8001e1c:	20000374 	.word	0x20000374

08001e20 <UART_send>:

bool UART_send(UART_id_t id, uint8_t *data , size_t len){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	1c02      	adds	r2, r0, #0
 8001e30:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(uart_table[id].huart_p, data, len, 0xFFFF);
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	4908      	ldr	r1, [pc, #32]	; (8001e58 <UART_send+0x38>)
 8001e38:	0013      	movs	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	189b      	adds	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	5858      	ldr	r0, [r3, r1]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <UART_send+0x3c>)
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	f003 ff1b 	bl	8005c84 <HAL_UART_Transmit>
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000348 	.word	0x20000348
 8001e5c:	0000ffff 	.word	0x0000ffff

08001e60 <UART_receive_data>:
bool UART_receive_available(UART_id_t id){
	return ring_buffer_is_available(uart_table[id].buffer);
}

uint8_t UART_receive_data(UART_id_t id){
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	0002      	movs	r2, r0
 8001e68:	1dfb      	adds	r3, r7, #7
 8001e6a:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	ring_buffer_pop(uart_table[id].buffer, &data);
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	4909      	ldr	r1, [pc, #36]	; (8001e98 <UART_receive_data+0x38>)
 8001e72:	0013      	movs	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	189b      	adds	r3, r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	18cb      	adds	r3, r1, r3
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	240f      	movs	r4, #15
 8001e82:	193a      	adds	r2, r7, r4
 8001e84:	0011      	movs	r1, r2
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 f8ec 	bl	8002064 <ring_buffer_pop>
	return data;
 8001e8c:	193b      	adds	r3, r7, r4
 8001e8e:	781b      	ldrb	r3, [r3, #0]
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b005      	add	sp, #20
 8001e96:	bd90      	pop	{r4, r7, pc}
 8001e98:	20000348 	.word	0x20000348

08001e9c <HAL_UART_RxCpltCallback>:

void UART_clear_buffer(UART_id_t id){
	ring_buffer_drop_all(uart_table[id].buffer);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart_table[UART_1].huart_p->Instance){
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d113      	bne.n	8001eda <HAL_UART_RxCpltCallback+0x3e>
		ring_buffer_push(uart_table[UART_1].buffer, &uart_table[UART_1].temp_data);
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a34      	ldr	r2, [pc, #208]	; (8001f88 <HAL_UART_RxCpltCallback+0xec>)
 8001eb8:	0011      	movs	r1, r2
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 f89a 	bl	8001ff4 <ring_buffer_push>
		HAL_UART_Receive_IT(uart_table[UART_1].huart_p, &uart_table[UART_1].temp_data, 1);
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4930      	ldr	r1, [pc, #192]	; (8001f88 <HAL_UART_RxCpltCallback+0xec>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f003 ff77 	bl	8005dbc <HAL_UART_Receive_IT>
		flag_uart[UART_1] ++;
 8001ece:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_UART_RxCpltCallback+0xf0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_UART_RxCpltCallback+0xf0>)
 8001ed6:	601a      	str	r2, [r3, #0]
	}else if(huart->Instance == uart_table[UART_4].huart_p->Instance){
		ring_buffer_push(uart_table[UART_4].buffer, &uart_table[UART_4].temp_data);
		HAL_UART_Receive_IT(uart_table[UART_4].huart_p, &uart_table[UART_4].temp_data, 1);
		flag_uart[UART_4] ++;
	}
}
 8001ed8:	e04f      	b.n	8001f7a <HAL_UART_RxCpltCallback+0xde>
	}else if(huart->Instance == uart_table[UART_2].huart_p->Instance){
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d113      	bne.n	8001f10 <HAL_UART_RxCpltCallback+0x74>
		ring_buffer_push(uart_table[UART_2].buffer, &uart_table[UART_2].temp_data);
 8001ee8:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <HAL_UART_RxCpltCallback+0xf4>)
 8001eee:	0011      	movs	r1, r2
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f000 f87f 	bl	8001ff4 <ring_buffer_push>
		HAL_UART_Receive_IT(uart_table[UART_2].huart_p, &uart_table[UART_2].temp_data, 1);
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	4925      	ldr	r1, [pc, #148]	; (8001f90 <HAL_UART_RxCpltCallback+0xf4>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	0018      	movs	r0, r3
 8001f00:	f003 ff5c 	bl	8005dbc <HAL_UART_Receive_IT>
		flag_uart[UART_2] ++;
 8001f04:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_UART_RxCpltCallback+0xf0>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_UART_RxCpltCallback+0xf0>)
 8001f0c:	605a      	str	r2, [r3, #4]
}
 8001f0e:	e034      	b.n	8001f7a <HAL_UART_RxCpltCallback+0xde>
	}else if(huart->Instance == uart_table[UART_3].huart_p->Instance){
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d113      	bne.n	8001f46 <HAL_UART_RxCpltCallback+0xaa>
		ring_buffer_push(uart_table[UART_3].buffer, &uart_table[UART_3].temp_data);
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <HAL_UART_RxCpltCallback+0xf8>)
 8001f24:	0011      	movs	r1, r2
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 f864 	bl	8001ff4 <ring_buffer_push>
		HAL_UART_Receive_IT(uart_table[UART_3].huart_p, &uart_table[UART_3].temp_data, 1);
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4918      	ldr	r1, [pc, #96]	; (8001f94 <HAL_UART_RxCpltCallback+0xf8>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	0018      	movs	r0, r3
 8001f36:	f003 ff41 	bl	8005dbc <HAL_UART_Receive_IT>
		flag_uart[UART_3] ++;
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_UART_RxCpltCallback+0xf0>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_UART_RxCpltCallback+0xf0>)
 8001f42:	609a      	str	r2, [r3, #8]
}
 8001f44:	e019      	b.n	8001f7a <HAL_UART_RxCpltCallback+0xde>
	}else if(huart->Instance == uart_table[UART_4].huart_p->Instance){
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d112      	bne.n	8001f7a <HAL_UART_RxCpltCallback+0xde>
		ring_buffer_push(uart_table[UART_4].buffer, &uart_table[UART_4].temp_data);
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_UART_RxCpltCallback+0xfc>)
 8001f5a:	0011      	movs	r1, r2
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 f849 	bl	8001ff4 <ring_buffer_push>
		HAL_UART_Receive_IT(uart_table[UART_4].huart_p, &uart_table[UART_4].temp_data, 1);
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <HAL_UART_RxCpltCallback+0xe8>)
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	490c      	ldr	r1, [pc, #48]	; (8001f98 <HAL_UART_RxCpltCallback+0xfc>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f003 ff26 	bl	8005dbc <HAL_UART_Receive_IT>
		flag_uart[UART_4] ++;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_UART_RxCpltCallback+0xf0>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_UART_RxCpltCallback+0xf0>)
 8001f78:	60da      	str	r2, [r3, #12]
}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	20000348 	.word	0x20000348
 8001f88:	20000350 	.word	0x20000350
 8001f8c:	20000604 	.word	0x20000604
 8001f90:	2000035c 	.word	0x2000035c
 8001f94:	20000368 	.word	0x20000368
 8001f98:	20000374 	.word	0x20000374

08001f9c <ring_buffer_init>:

#include "string.h"


bool ring_buffer_init(ring_buffer_t * buffer, uint16_t sizeOfObject)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	000a      	movs	r2, r1
 8001fa6:	1cbb      	adds	r3, r7, #2
 8001fa8:	801a      	strh	r2, [r3, #0]
    buffer->head = 0;
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	50d1      	str	r1, [r2, r3]
    buffer->tail = 0;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <ring_buffer_init+0x4c>)
 8001fb8:	2100      	movs	r1, #0
 8001fba:	5099      	str	r1, [r3, r2]
    buffer->count = 0;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <ring_buffer_init+0x50>)
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	5099      	str	r1, [r3, r2]
    buffer->size = sizeOfObject;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	1cba      	adds	r2, r7, #2
 8001fc8:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <ring_buffer_init+0x54>)
 8001fca:	8812      	ldrh	r2, [r2, #0]
 8001fcc:	525a      	strh	r2, [r3, r1]
    memset(buffer->buffer , 0, sizeof(buffer->buffer));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f005 fc71 	bl	80078be <memset>
    return true;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	00000804 	.word	0x00000804
 8001fec:	00000808 	.word	0x00000808
 8001ff0:	0000080c 	.word	0x0000080c

08001ff4 <ring_buffer_push>:

bool ring_buffer_push(ring_buffer_t * buffer, void * object)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
	uint8_t *data = (uint8_t *)(object);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	60bb      	str	r3, [r7, #8]

	if(ring_buffer_is_full(buffer)){
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	0018      	movs	r0, r3
 8002006:	f000 f8a3 	bl	8002150 <ring_buffer_is_full>
 800200a:	1e03      	subs	r3, r0, #0
 800200c:	d001      	beq.n	8002012 <ring_buffer_push+0x1e>
			return false;
 800200e:	2300      	movs	r3, #0
 8002010:	e022      	b.n	8002058 <ring_buffer_push+0x64>
	}

	for(size_t index = 0; index < buffer -> size; index++)
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	e017      	b.n	8002048 <ring_buffer_push+0x54>
	{
		buffer->buffer[buffer->head] = data[index];
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	18d2      	adds	r2, r2, r3
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	58cb      	ldr	r3, [r1, r3]
 8002026:	7811      	ldrb	r1, [r2, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	54d1      	strb	r1, [r2, r3]
		buffer->head = (buffer->head + 1) % BUFFER_MAX_SIZE;
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	58d3      	ldr	r3, [r2, r3]
 8002034:	3301      	adds	r3, #1
 8002036:	055b      	lsls	r3, r3, #21
 8002038:	0d59      	lsrs	r1, r3, #21
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	50d1      	str	r1, [r2, r3]
	for(size_t index = 0; index < buffer -> size; index++)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3301      	adds	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <ring_buffer_push+0x6c>)
 800204c:	5a9b      	ldrh	r3, [r3, r2]
 800204e:	001a      	movs	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4293      	cmp	r3, r2
 8002054:	d3e0      	bcc.n	8002018 <ring_buffer_push+0x24>
	}
	return true;
 8002056:	2301      	movs	r3, #1
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b004      	add	sp, #16
 800205e:	bd80      	pop	{r7, pc}
 8002060:	0000080c 	.word	0x0000080c

08002064 <ring_buffer_pop>:

bool ring_buffer_pop(ring_buffer_t  * buffer, void *object)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
	uint8_t *data = (uint8_t *)(object);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	60bb      	str	r3, [r7, #8]

	if(!ring_buffer_is_available(buffer)){
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	0018      	movs	r0, r3
 8002076:	f000 f831 	bl	80020dc <ring_buffer_is_available>
 800207a:	0003      	movs	r3, r0
 800207c:	001a      	movs	r2, r3
 800207e:	2301      	movs	r3, #1
 8002080:	4053      	eors	r3, r2
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <ring_buffer_pop+0x28>
			return false;
 8002088:	2300      	movs	r3, #0
 800208a:	e01f      	b.n	80020cc <ring_buffer_pop+0x68>
	}

	for(size_t index = 0; index < buffer -> size; index++)
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e014      	b.n	80020bc <ring_buffer_pop+0x58>
	{
		data[index] = buffer->buffer[buffer->tail];
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <ring_buffer_pop+0x70>)
 8002096:	589a      	ldr	r2, [r3, r2]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	18cb      	adds	r3, r1, r3
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	5c8a      	ldrb	r2, [r1, r2]
 80020a2:	701a      	strb	r2, [r3, #0]
		buffer->tail = (buffer->tail + 1) % BUFFER_MAX_SIZE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <ring_buffer_pop+0x70>)
 80020a8:	589b      	ldr	r3, [r3, r2]
 80020aa:	3301      	adds	r3, #1
 80020ac:	055b      	lsls	r3, r3, #21
 80020ae:	0d5a      	lsrs	r2, r3, #21
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <ring_buffer_pop+0x70>)
 80020b4:	505a      	str	r2, [r3, r1]
	for(size_t index = 0; index < buffer -> size; index++)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3301      	adds	r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <ring_buffer_pop+0x74>)
 80020c0:	5a9b      	ldrh	r3, [r3, r2]
 80020c2:	001a      	movs	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d3e3      	bcc.n	8002092 <ring_buffer_pop+0x2e>
	}
	return true;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	00000804 	.word	0x00000804
 80020d8:	0000080c 	.word	0x0000080c

080020dc <ring_buffer_is_available>:

bool ring_buffer_is_available(ring_buffer_t * buffer)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	if(buffer->head >= buffer->tail)
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	58d2      	ldr	r2, [r2, r3]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4916      	ldr	r1, [pc, #88]	; (8002148 <ring_buffer_is_available+0x6c>)
 80020f0:	585b      	ldr	r3, [r3, r1]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d310      	bcc.n	8002118 <ring_buffer_is_available+0x3c>
	{
		return ((buffer->head - buffer->tail) >= buffer->size);
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	58d2      	ldr	r2, [r2, r3]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4911      	ldr	r1, [pc, #68]	; (8002148 <ring_buffer_is_available+0x6c>)
 8002102:	585b      	ldr	r3, [r3, r1]
 8002104:	1ad2      	subs	r2, r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4910      	ldr	r1, [pc, #64]	; (800214c <ring_buffer_is_available+0x70>)
 800210a:	5a5b      	ldrh	r3, [r3, r1]
 800210c:	0019      	movs	r1, r3
 800210e:	2300      	movs	r3, #0
 8002110:	428a      	cmp	r2, r1
 8002112:	415b      	adcs	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	e012      	b.n	800213e <ring_buffer_is_available+0x62>
	}
	else
	{
		return (BUFFER_MAX_SIZE - (buffer->tail - buffer->head) >= buffer->size);
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	58d2      	ldr	r2, [r2, r3]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4909      	ldr	r1, [pc, #36]	; (8002148 <ring_buffer_is_available+0x6c>)
 8002124:	585b      	ldr	r3, [r3, r1]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	189a      	adds	r2, r3, r2
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4906      	ldr	r1, [pc, #24]	; (800214c <ring_buffer_is_available+0x70>)
 8002132:	5a5b      	ldrh	r3, [r3, r1]
 8002134:	0019      	movs	r1, r3
 8002136:	2300      	movs	r3, #0
 8002138:	428a      	cmp	r2, r1
 800213a:	415b      	adcs	r3, r3
 800213c:	b2db      	uxtb	r3, r3
	}
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	00000804 	.word	0x00000804
 800214c:	0000080c 	.word	0x0000080c

08002150 <ring_buffer_is_full>:
	memcpy(object, buffer->buffer + idx*buffer->size, buffer->size);
	return true;
}

bool ring_buffer_is_full(ring_buffer_t * buffer)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	if(buffer->head >= buffer->tail)
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	58d2      	ldr	r2, [r2, r3]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4916      	ldr	r1, [pc, #88]	; (80021bc <ring_buffer_is_full+0x6c>)
 8002164:	585b      	ldr	r3, [r3, r1]
 8002166:	429a      	cmp	r2, r3
 8002168:	d313      	bcc.n	8002192 <ring_buffer_is_full+0x42>
	{
		return (BUFFER_MAX_SIZE - (buffer->head - buffer->tail) <= buffer->size);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a13      	ldr	r2, [pc, #76]	; (80021bc <ring_buffer_is_full+0x6c>)
 800216e:	589a      	ldr	r2, [r3, r2]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	58cb      	ldr	r3, [r1, r3]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	189a      	adds	r2, r3, r2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	490f      	ldr	r1, [pc, #60]	; (80021c0 <ring_buffer_is_full+0x70>)
 8002184:	5a5b      	ldrh	r3, [r3, r1]
 8002186:	0019      	movs	r1, r3
 8002188:	2300      	movs	r3, #0
 800218a:	4291      	cmp	r1, r2
 800218c:	415b      	adcs	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	e00f      	b.n	80021b2 <ring_buffer_is_full+0x62>
	}
	else
	{
		return ((buffer->tail - buffer->head) <= buffer->size);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a09      	ldr	r2, [pc, #36]	; (80021bc <ring_buffer_is_full+0x6c>)
 8002196:	589a      	ldr	r2, [r3, r2]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	58cb      	ldr	r3, [r1, r3]
 80021a0:	1ad2      	subs	r2, r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4906      	ldr	r1, [pc, #24]	; (80021c0 <ring_buffer_is_full+0x70>)
 80021a6:	5a5b      	ldrh	r3, [r3, r1]
 80021a8:	0019      	movs	r1, r3
 80021aa:	2300      	movs	r3, #0
 80021ac:	4291      	cmp	r1, r2
 80021ae:	415b      	adcs	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
	}
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	00000804 	.word	0x00000804
 80021c0:	0000080c 	.word	0x0000080c

080021c4 <get_command>:
uint8_t STRING4[50];
uint8_t STRING5[50];
uint8_t STRING6[50];

void get_command()
{
 80021c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c6:	b095      	sub	sp, #84	; 0x54
 80021c8:	af02      	add	r7, sp, #8
	if(flag_uart[UART_3] >= 1)
 80021ca:	4bd6      	ldr	r3, [pc, #856]	; (8002524 <get_command+0x360>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	dc01      	bgt.n	80021d6 <get_command+0x12>
 80021d2:	f000 fbe4 	bl	800299e <get_command+0x7da>
	{
		flag_uart[UART_3] --;
 80021d6:	4bd3      	ldr	r3, [pc, #844]	; (8002524 <get_command+0x360>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	1e5a      	subs	r2, r3, #1
 80021dc:	4bd1      	ldr	r3, [pc, #836]	; (8002524 <get_command+0x360>)
 80021de:	609a      	str	r2, [r3, #8]
		switch (state1)
 80021e0:	4bd1      	ldr	r3, [pc, #836]	; (8002528 <get_command+0x364>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <get_command+0x2c>
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d01a      	beq.n	8002222 <get_command+0x5e>
 80021ec:	f000 fbd0 	bl	8002990 <get_command+0x7cc>
		{
			case INIT:
				if(UART_receive_data(UART_3) == '!')
 80021f0:	2002      	movs	r0, #2
 80021f2:	f7ff fe35 	bl	8001e60 <UART_receive_data>
 80021f6:	0003      	movs	r3, r0
 80021f8:	2b21      	cmp	r3, #33	; 0x21
 80021fa:	d001      	beq.n	8002200 <get_command+0x3c>
 80021fc:	f000 fbd1 	bl	80029a2 <get_command+0x7de>
				{
					buffer[0] = '!';
 8002200:	4bca      	ldr	r3, [pc, #808]	; (800252c <get_command+0x368>)
 8002202:	2221      	movs	r2, #33	; 0x21
 8002204:	701a      	strb	r2, [r3, #0]
					count = 1;
 8002206:	4bca      	ldr	r3, [pc, #808]	; (8002530 <get_command+0x36c>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]
					state1 = GET;
 800220c:	4bc6      	ldr	r3, [pc, #792]	; (8002528 <get_command+0x364>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]
					setTimer(2, 500);
 8002212:	23fa      	movs	r3, #250	; 0xfa
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	0019      	movs	r1, r3
 8002218:	2002      	movs	r0, #2
 800221a:	f7ff fcb3 	bl	8001b84 <setTimer>
				}

				break;
 800221e:	f000 fbc0 	bl	80029a2 <get_command+0x7de>
			case GET:
				if(count >= 12){
 8002222:	4bc3      	ldr	r3, [pc, #780]	; (8002530 <get_command+0x36c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b0b      	cmp	r3, #11
 8002228:	dd05      	ble.n	8002236 <get_command+0x72>
					count = 0;
 800222a:	4bc1      	ldr	r3, [pc, #772]	; (8002530 <get_command+0x36c>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
					state1 = INIT;
 8002230:	4bbd      	ldr	r3, [pc, #756]	; (8002528 <get_command+0x364>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
				}
				buffer[count] = UART_receive_data(UART_3);
 8002236:	4bbe      	ldr	r3, [pc, #760]	; (8002530 <get_command+0x36c>)
 8002238:	681e      	ldr	r6, [r3, #0]
 800223a:	2002      	movs	r0, #2
 800223c:	f7ff fe10 	bl	8001e60 <UART_receive_data>
 8002240:	0003      	movs	r3, r0
 8002242:	001a      	movs	r2, r3
 8002244:	4bb9      	ldr	r3, [pc, #740]	; (800252c <get_command+0x368>)
 8002246:	559a      	strb	r2, [r3, r6]

				if(buffer[count] == '#')
 8002248:	4bb9      	ldr	r3, [pc, #740]	; (8002530 <get_command+0x36c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4ab7      	ldr	r2, [pc, #732]	; (800252c <get_command+0x368>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	2b23      	cmp	r3, #35	; 0x23
 8002252:	d000      	beq.n	8002256 <get_command+0x92>
 8002254:	e351      	b.n	80028fa <get_command+0x736>
				{
					UART_send(UART_3, buffer, count);
 8002256:	4bb6      	ldr	r3, [pc, #728]	; (8002530 <get_command+0x36c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	001a      	movs	r2, r3
 800225c:	4bb3      	ldr	r3, [pc, #716]	; (800252c <get_command+0x368>)
 800225e:	0019      	movs	r1, r3
 8002260:	2002      	movs	r0, #2
 8002262:	f7ff fddd 	bl	8001e20 <UART_send>
					UART_send(UART_3, "#\n", sizeof("#\n"));
 8002266:	4bb3      	ldr	r3, [pc, #716]	; (8002534 <get_command+0x370>)
 8002268:	2203      	movs	r2, #3
 800226a:	0019      	movs	r1, r3
 800226c:	2002      	movs	r0, #2
 800226e:	f7ff fdd7 	bl	8001e20 <UART_send>
					if(buffer[1] == 'E')
 8002272:	4bae      	ldr	r3, [pc, #696]	; (800252c <get_command+0x368>)
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	2b45      	cmp	r3, #69	; 0x45
 8002278:	d103      	bne.n	8002282 <get_command+0xbe>
					{
						state2 = 0;
 800227a:	4baf      	ldr	r3, [pc, #700]	; (8002538 <get_command+0x374>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e335      	b.n	80028ee <get_command+0x72a>
					}
					else if(buffer[1] == 'S')
 8002282:	4baa      	ldr	r3, [pc, #680]	; (800252c <get_command+0x368>)
 8002284:	785b      	ldrb	r3, [r3, #1]
 8002286:	2b53      	cmp	r3, #83	; 0x53
 8002288:	d000      	beq.n	800228c <get_command+0xc8>
 800228a:	e119      	b.n	80024c0 <get_command+0x2fc>
					{
						if(buffer[2] == '0'){
 800228c:	4ba7      	ldr	r3, [pc, #668]	; (800252c <get_command+0x368>)
 800228e:	789b      	ldrb	r3, [r3, #2]
 8002290:	2b30      	cmp	r3, #48	; 0x30
 8002292:	d111      	bne.n	80022b8 <get_command+0xf4>
							waterout[0].set_solenoid_out(SET);
 8002294:	4ba9      	ldr	r3, [pc, #676]	; (800253c <get_command+0x378>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2001      	movs	r0, #1
 800229a:	4798      	blx	r3
							sprintf(STRING1,"%s %d %s","SOLENOID OUT 0",waterout[0].get_solenoid_out()," \n");
 800229c:	4ba7      	ldr	r3, [pc, #668]	; (800253c <get_command+0x378>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4798      	blx	r3
 80022a2:	0003      	movs	r3, r0
 80022a4:	001c      	movs	r4, r3
 80022a6:	4aa6      	ldr	r2, [pc, #664]	; (8002540 <get_command+0x37c>)
 80022a8:	49a6      	ldr	r1, [pc, #664]	; (8002544 <get_command+0x380>)
 80022aa:	48a7      	ldr	r0, [pc, #668]	; (8002548 <get_command+0x384>)
 80022ac:	4ba7      	ldr	r3, [pc, #668]	; (800254c <get_command+0x388>)
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	0023      	movs	r3, r4
 80022b2:	f005 fb0d 	bl	80078d0 <siprintf>
 80022b6:	e032      	b.n	800231e <get_command+0x15a>
						}
						else if(buffer[2] == '1'){
 80022b8:	4b9c      	ldr	r3, [pc, #624]	; (800252c <get_command+0x368>)
 80022ba:	789b      	ldrb	r3, [r3, #2]
 80022bc:	2b31      	cmp	r3, #49	; 0x31
 80022be:	d111      	bne.n	80022e4 <get_command+0x120>
							waterout[1].set_solenoid_out(SET);
 80022c0:	4b9e      	ldr	r3, [pc, #632]	; (800253c <get_command+0x378>)
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	2001      	movs	r0, #1
 80022c6:	4798      	blx	r3
							sprintf(STRING1,"%s %d %s","SOLENOID OUT 1",waterout[1].get_solenoid_out()," \n");
 80022c8:	4b9c      	ldr	r3, [pc, #624]	; (800253c <get_command+0x378>)
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	4798      	blx	r3
 80022ce:	0003      	movs	r3, r0
 80022d0:	001c      	movs	r4, r3
 80022d2:	4a9f      	ldr	r2, [pc, #636]	; (8002550 <get_command+0x38c>)
 80022d4:	499b      	ldr	r1, [pc, #620]	; (8002544 <get_command+0x380>)
 80022d6:	489c      	ldr	r0, [pc, #624]	; (8002548 <get_command+0x384>)
 80022d8:	4b9c      	ldr	r3, [pc, #624]	; (800254c <get_command+0x388>)
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	0023      	movs	r3, r4
 80022de:	f005 faf7 	bl	80078d0 <siprintf>
 80022e2:	e01c      	b.n	800231e <get_command+0x15a>
						}
						else if(buffer[2] == '2'){
 80022e4:	4b91      	ldr	r3, [pc, #580]	; (800252c <get_command+0x368>)
 80022e6:	789b      	ldrb	r3, [r3, #2]
 80022e8:	2b32      	cmp	r3, #50	; 0x32
 80022ea:	d10a      	bne.n	8002302 <get_command+0x13e>
							waterout[0].set_solenoid_out(RESET);
 80022ec:	4b93      	ldr	r3, [pc, #588]	; (800253c <get_command+0x378>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2000      	movs	r0, #0
 80022f2:	4798      	blx	r3
							sprintf(STRING1,"%s","SOLENOID OUT 0  OFF\n");
 80022f4:	4a97      	ldr	r2, [pc, #604]	; (8002554 <get_command+0x390>)
 80022f6:	4998      	ldr	r1, [pc, #608]	; (8002558 <get_command+0x394>)
 80022f8:	4b93      	ldr	r3, [pc, #588]	; (8002548 <get_command+0x384>)
 80022fa:	0018      	movs	r0, r3
 80022fc:	f005 fae8 	bl	80078d0 <siprintf>
 8002300:	e00d      	b.n	800231e <get_command+0x15a>
						}
						else if(buffer[2] == '3'){
 8002302:	4b8a      	ldr	r3, [pc, #552]	; (800252c <get_command+0x368>)
 8002304:	789b      	ldrb	r3, [r3, #2]
 8002306:	2b33      	cmp	r3, #51	; 0x33
 8002308:	d109      	bne.n	800231e <get_command+0x15a>
							waterout[1].set_solenoid_out(RESET);
 800230a:	4b8c      	ldr	r3, [pc, #560]	; (800253c <get_command+0x378>)
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	2000      	movs	r0, #0
 8002310:	4798      	blx	r3
							sprintf(STRING1,"%s","SOLENOID OUT 1 OFF\n");
 8002312:	4a92      	ldr	r2, [pc, #584]	; (800255c <get_command+0x398>)
 8002314:	4990      	ldr	r1, [pc, #576]	; (8002558 <get_command+0x394>)
 8002316:	4b8c      	ldr	r3, [pc, #560]	; (8002548 <get_command+0x384>)
 8002318:	0018      	movs	r0, r3
 800231a:	f005 fad9 	bl	80078d0 <siprintf>
						}




						if(buffer[2] == '4'){
 800231e:	4b83      	ldr	r3, [pc, #524]	; (800252c <get_command+0x368>)
 8002320:	789b      	ldrb	r3, [r3, #2]
 8002322:	2b34      	cmp	r3, #52	; 0x34
 8002324:	d10a      	bne.n	800233c <get_command+0x178>
							waterout[0].set_solenoid_in(SET);
 8002326:	4b85      	ldr	r3, [pc, #532]	; (800253c <get_command+0x378>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	2001      	movs	r0, #1
 800232c:	4798      	blx	r3
							sprintf(STRING1,"%s","SOLENOID IN 0 ON\n");
 800232e:	4a8c      	ldr	r2, [pc, #560]	; (8002560 <get_command+0x39c>)
 8002330:	4989      	ldr	r1, [pc, #548]	; (8002558 <get_command+0x394>)
 8002332:	4b85      	ldr	r3, [pc, #532]	; (8002548 <get_command+0x384>)
 8002334:	0018      	movs	r0, r3
 8002336:	f005 facb 	bl	80078d0 <siprintf>
 800233a:	e02b      	b.n	8002394 <get_command+0x1d0>
						}
						else if(buffer[2] == '5'){
 800233c:	4b7b      	ldr	r3, [pc, #492]	; (800252c <get_command+0x368>)
 800233e:	789b      	ldrb	r3, [r3, #2]
 8002340:	2b35      	cmp	r3, #53	; 0x35
 8002342:	d10a      	bne.n	800235a <get_command+0x196>
							waterout[1].set_solenoid_in(SET);
 8002344:	4b7d      	ldr	r3, [pc, #500]	; (800253c <get_command+0x378>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	2001      	movs	r0, #1
 800234a:	4798      	blx	r3
							sprintf(STRING1,"%s","SOLENOID IN 1 ON\n");
 800234c:	4a85      	ldr	r2, [pc, #532]	; (8002564 <get_command+0x3a0>)
 800234e:	4982      	ldr	r1, [pc, #520]	; (8002558 <get_command+0x394>)
 8002350:	4b7d      	ldr	r3, [pc, #500]	; (8002548 <get_command+0x384>)
 8002352:	0018      	movs	r0, r3
 8002354:	f005 fabc 	bl	80078d0 <siprintf>
 8002358:	e01c      	b.n	8002394 <get_command+0x1d0>
						}
						else if(buffer[2] == '6'){
 800235a:	4b74      	ldr	r3, [pc, #464]	; (800252c <get_command+0x368>)
 800235c:	789b      	ldrb	r3, [r3, #2]
 800235e:	2b36      	cmp	r3, #54	; 0x36
 8002360:	d10a      	bne.n	8002378 <get_command+0x1b4>
							waterout[0].set_solenoid_in(RESET);
 8002362:	4b76      	ldr	r3, [pc, #472]	; (800253c <get_command+0x378>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	2000      	movs	r0, #0
 8002368:	4798      	blx	r3
							sprintf(STRING1,"%s","SOLENOID IN 0 OFF\n");
 800236a:	4a7f      	ldr	r2, [pc, #508]	; (8002568 <get_command+0x3a4>)
 800236c:	497a      	ldr	r1, [pc, #488]	; (8002558 <get_command+0x394>)
 800236e:	4b76      	ldr	r3, [pc, #472]	; (8002548 <get_command+0x384>)
 8002370:	0018      	movs	r0, r3
 8002372:	f005 faad 	bl	80078d0 <siprintf>
 8002376:	e00d      	b.n	8002394 <get_command+0x1d0>
						}
						else if(buffer[2] == '7'){
 8002378:	4b6c      	ldr	r3, [pc, #432]	; (800252c <get_command+0x368>)
 800237a:	789b      	ldrb	r3, [r3, #2]
 800237c:	2b37      	cmp	r3, #55	; 0x37
 800237e:	d109      	bne.n	8002394 <get_command+0x1d0>
							waterout[1].set_solenoid_in(RESET);
 8002380:	4b6e      	ldr	r3, [pc, #440]	; (800253c <get_command+0x378>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2000      	movs	r0, #0
 8002386:	4798      	blx	r3
							sprintf(STRING1,"%s","SOLENOID IN 1 OFF\n");
 8002388:	4a78      	ldr	r2, [pc, #480]	; (800256c <get_command+0x3a8>)
 800238a:	4973      	ldr	r1, [pc, #460]	; (8002558 <get_command+0x394>)
 800238c:	4b6e      	ldr	r3, [pc, #440]	; (8002548 <get_command+0x384>)
 800238e:	0018      	movs	r0, r3
 8002390:	f005 fa9e 	bl	80078d0 <siprintf>





						if(buffer[2] == '8'){
 8002394:	4b65      	ldr	r3, [pc, #404]	; (800252c <get_command+0x368>)
 8002396:	789b      	ldrb	r3, [r3, #2]
 8002398:	2b38      	cmp	r3, #56	; 0x38
 800239a:	d10d      	bne.n	80023b8 <get_command+0x1f4>
							BOILING_ON(0);
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	019b      	lsls	r3, r3, #6
 80023a0:	4873      	ldr	r0, [pc, #460]	; (8002570 <get_command+0x3ac>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	0019      	movs	r1, r3
 80023a6:	f002 fa8c 	bl	80048c2 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","BOLING ON 0\n");
 80023aa:	4a72      	ldr	r2, [pc, #456]	; (8002574 <get_command+0x3b0>)
 80023ac:	496a      	ldr	r1, [pc, #424]	; (8002558 <get_command+0x394>)
 80023ae:	4b66      	ldr	r3, [pc, #408]	; (8002548 <get_command+0x384>)
 80023b0:	0018      	movs	r0, r3
 80023b2:	f005 fa8d 	bl	80078d0 <siprintf>
 80023b6:	e034      	b.n	8002422 <get_command+0x25e>
						}
						else if(buffer[2] == '9'){
 80023b8:	4b5c      	ldr	r3, [pc, #368]	; (800252c <get_command+0x368>)
 80023ba:	789b      	ldrb	r3, [r3, #2]
 80023bc:	2b39      	cmp	r3, #57	; 0x39
 80023be:	d10d      	bne.n	80023dc <get_command+0x218>
							BOILING_ON(1);
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	486a      	ldr	r0, [pc, #424]	; (8002570 <get_command+0x3ac>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	0019      	movs	r1, r3
 80023ca:	f002 fa7a 	bl	80048c2 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","BOLING ON 1\n");
 80023ce:	4a6a      	ldr	r2, [pc, #424]	; (8002578 <get_command+0x3b4>)
 80023d0:	4961      	ldr	r1, [pc, #388]	; (8002558 <get_command+0x394>)
 80023d2:	4b5d      	ldr	r3, [pc, #372]	; (8002548 <get_command+0x384>)
 80023d4:	0018      	movs	r0, r3
 80023d6:	f005 fa7b 	bl	80078d0 <siprintf>
 80023da:	e022      	b.n	8002422 <get_command+0x25e>
						}
						else if(buffer[2] == 'A'){
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <get_command+0x368>)
 80023de:	789b      	ldrb	r3, [r3, #2]
 80023e0:	2b41      	cmp	r3, #65	; 0x41
 80023e2:	d10d      	bne.n	8002400 <get_command+0x23c>
							BOILING_OFF(0);
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	019b      	lsls	r3, r3, #6
 80023e8:	4861      	ldr	r0, [pc, #388]	; (8002570 <get_command+0x3ac>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	0019      	movs	r1, r3
 80023ee:	f002 fa68 	bl	80048c2 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","BOLING OFF 0\n");
 80023f2:	4a62      	ldr	r2, [pc, #392]	; (800257c <get_command+0x3b8>)
 80023f4:	4958      	ldr	r1, [pc, #352]	; (8002558 <get_command+0x394>)
 80023f6:	4b54      	ldr	r3, [pc, #336]	; (8002548 <get_command+0x384>)
 80023f8:	0018      	movs	r0, r3
 80023fa:	f005 fa69 	bl	80078d0 <siprintf>
 80023fe:	e010      	b.n	8002422 <get_command+0x25e>
						}
						else if(buffer[2] == 'B'){
 8002400:	4b4a      	ldr	r3, [pc, #296]	; (800252c <get_command+0x368>)
 8002402:	789b      	ldrb	r3, [r3, #2]
 8002404:	2b42      	cmp	r3, #66	; 0x42
 8002406:	d10c      	bne.n	8002422 <get_command+0x25e>
							BOILING_OFF(1);
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	4858      	ldr	r0, [pc, #352]	; (8002570 <get_command+0x3ac>)
 800240e:	2201      	movs	r2, #1
 8002410:	0019      	movs	r1, r3
 8002412:	f002 fa56 	bl	80048c2 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","BOLING OFF 1\n");
 8002416:	4a5a      	ldr	r2, [pc, #360]	; (8002580 <get_command+0x3bc>)
 8002418:	494f      	ldr	r1, [pc, #316]	; (8002558 <get_command+0x394>)
 800241a:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <get_command+0x384>)
 800241c:	0018      	movs	r0, r3
 800241e:	f005 fa57 	bl	80078d0 <siprintf>
						}


						if(buffer[2] == 'C'){
 8002422:	4b42      	ldr	r3, [pc, #264]	; (800252c <get_command+0x368>)
 8002424:	789b      	ldrb	r3, [r3, #2]
 8002426:	2b43      	cmp	r3, #67	; 0x43
 8002428:	d10e      	bne.n	8002448 <get_command+0x284>
							WT_EMPTY_ON(0);
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	0099      	lsls	r1, r3, #2
 800242e:	23a0      	movs	r3, #160	; 0xa0
 8002430:	05db      	lsls	r3, r3, #23
 8002432:	2200      	movs	r2, #0
 8002434:	0018      	movs	r0, r3
 8002436:	f002 fa44 	bl	80048c2 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","WT EMPTY 0\n");
 800243a:	4a52      	ldr	r2, [pc, #328]	; (8002584 <get_command+0x3c0>)
 800243c:	4946      	ldr	r1, [pc, #280]	; (8002558 <get_command+0x394>)
 800243e:	4b42      	ldr	r3, [pc, #264]	; (8002548 <get_command+0x384>)
 8002440:	0018      	movs	r0, r3
 8002442:	f005 fa45 	bl	80078d0 <siprintf>
 8002446:	e033      	b.n	80024b0 <get_command+0x2ec>
						}
						else if(buffer[2] == 'D'){
 8002448:	4b38      	ldr	r3, [pc, #224]	; (800252c <get_command+0x368>)
 800244a:	789b      	ldrb	r3, [r3, #2]
 800244c:	2b44      	cmp	r3, #68	; 0x44
 800244e:	d10c      	bne.n	800246a <get_command+0x2a6>
							WT_EMPTY_ON(1);
 8002450:	4b4d      	ldr	r3, [pc, #308]	; (8002588 <get_command+0x3c4>)
 8002452:	2200      	movs	r2, #0
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	0018      	movs	r0, r3
 8002458:	f002 fa33 	bl	80048c2 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","WT EMPTY 1\n");
 800245c:	4a4b      	ldr	r2, [pc, #300]	; (800258c <get_command+0x3c8>)
 800245e:	493e      	ldr	r1, [pc, #248]	; (8002558 <get_command+0x394>)
 8002460:	4b39      	ldr	r3, [pc, #228]	; (8002548 <get_command+0x384>)
 8002462:	0018      	movs	r0, r3
 8002464:	f005 fa34 	bl	80078d0 <siprintf>
 8002468:	e022      	b.n	80024b0 <get_command+0x2ec>
						}
						else if(buffer[2] == 'E'){
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <get_command+0x368>)
 800246c:	789b      	ldrb	r3, [r3, #2]
 800246e:	2b45      	cmp	r3, #69	; 0x45
 8002470:	d10e      	bne.n	8002490 <get_command+0x2cc>
							WT_EMPTY_OFF(0);
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	0099      	lsls	r1, r3, #2
 8002476:	23a0      	movs	r3, #160	; 0xa0
 8002478:	05db      	lsls	r3, r3, #23
 800247a:	2201      	movs	r2, #1
 800247c:	0018      	movs	r0, r3
 800247e:	f002 fa20 	bl	80048c2 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","WT FULL 0\n");
 8002482:	4a43      	ldr	r2, [pc, #268]	; (8002590 <get_command+0x3cc>)
 8002484:	4934      	ldr	r1, [pc, #208]	; (8002558 <get_command+0x394>)
 8002486:	4b30      	ldr	r3, [pc, #192]	; (8002548 <get_command+0x384>)
 8002488:	0018      	movs	r0, r3
 800248a:	f005 fa21 	bl	80078d0 <siprintf>
 800248e:	e00f      	b.n	80024b0 <get_command+0x2ec>
						}
						else if(buffer[2] == 'F'){
 8002490:	4b26      	ldr	r3, [pc, #152]	; (800252c <get_command+0x368>)
 8002492:	789b      	ldrb	r3, [r3, #2]
 8002494:	2b46      	cmp	r3, #70	; 0x46
 8002496:	d10b      	bne.n	80024b0 <get_command+0x2ec>
							WT_EMPTY_OFF(1);
 8002498:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <get_command+0x3c4>)
 800249a:	2201      	movs	r2, #1
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	0018      	movs	r0, r3
 80024a0:	f002 fa0f 	bl	80048c2 <HAL_GPIO_WritePin>
							sprintf(STRING1,"%s","WT FULL 1\n");
 80024a4:	4a3b      	ldr	r2, [pc, #236]	; (8002594 <get_command+0x3d0>)
 80024a6:	492c      	ldr	r1, [pc, #176]	; (8002558 <get_command+0x394>)
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <get_command+0x384>)
 80024aa:	0018      	movs	r0, r3
 80024ac:	f005 fa10 	bl	80078d0 <siprintf>
						}
						state2 = 1;
 80024b0:	4b21      	ldr	r3, [pc, #132]	; (8002538 <get_command+0x374>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
						setTimer(0, 100);
 80024b6:	2164      	movs	r1, #100	; 0x64
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7ff fb63 	bl	8001b84 <setTimer>
 80024be:	e216      	b.n	80028ee <get_command+0x72a>
					}
					else if(buffer[1] == 'R')
 80024c0:	4b1a      	ldr	r3, [pc, #104]	; (800252c <get_command+0x368>)
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	2b52      	cmp	r3, #82	; 0x52
 80024c6:	d000      	beq.n	80024ca <get_command+0x306>
 80024c8:	e084      	b.n	80025d4 <get_command+0x410>
					{
						if(buffer[2] == '0'){
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <get_command+0x368>)
 80024cc:	789b      	ldrb	r3, [r3, #2]
 80024ce:	2b30      	cmp	r3, #48	; 0x30
 80024d0:	d10a      	bne.n	80024e8 <get_command+0x324>
							waterout[0].set_relay(RESET);
 80024d2:	4b1a      	ldr	r3, [pc, #104]	; (800253c <get_command+0x378>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	2000      	movs	r0, #0
 80024d8:	4798      	blx	r3
							sprintf(STRING2,"%s","RELAY 0 ON\n");
 80024da:	4a2f      	ldr	r2, [pc, #188]	; (8002598 <get_command+0x3d4>)
 80024dc:	491e      	ldr	r1, [pc, #120]	; (8002558 <get_command+0x394>)
 80024de:	4b2f      	ldr	r3, [pc, #188]	; (800259c <get_command+0x3d8>)
 80024e0:	0018      	movs	r0, r3
 80024e2:	f005 f9f5 	bl	80078d0 <siprintf>
 80024e6:	e06d      	b.n	80025c4 <get_command+0x400>
						}
						else if(buffer[2] == '1'){
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <get_command+0x368>)
 80024ea:	789b      	ldrb	r3, [r3, #2]
 80024ec:	2b31      	cmp	r3, #49	; 0x31
 80024ee:	d10a      	bne.n	8002506 <get_command+0x342>
							waterout[1].set_relay(RESET);
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <get_command+0x378>)
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	2000      	movs	r0, #0
 80024f6:	4798      	blx	r3
							sprintf(STRING2,"%s","RELAY 1 ON\n");
 80024f8:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <get_command+0x3dc>)
 80024fa:	4917      	ldr	r1, [pc, #92]	; (8002558 <get_command+0x394>)
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <get_command+0x3d8>)
 80024fe:	0018      	movs	r0, r3
 8002500:	f005 f9e6 	bl	80078d0 <siprintf>
 8002504:	e05e      	b.n	80025c4 <get_command+0x400>
						}
						else if(buffer[2] == '2'){
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <get_command+0x368>)
 8002508:	789b      	ldrb	r3, [r3, #2]
 800250a:	2b32      	cmp	r3, #50	; 0x32
 800250c:	d14c      	bne.n	80025a8 <get_command+0x3e4>
							waterout[0].set_relay(SET);
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <get_command+0x378>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	2001      	movs	r0, #1
 8002514:	4798      	blx	r3
							sprintf(STRING2,"%s","RELAY 0 OFF\n");
 8002516:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <get_command+0x3e0>)
 8002518:	490f      	ldr	r1, [pc, #60]	; (8002558 <get_command+0x394>)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <get_command+0x3d8>)
 800251c:	0018      	movs	r0, r3
 800251e:	f005 f9d7 	bl	80078d0 <siprintf>
 8002522:	e04f      	b.n	80025c4 <get_command+0x400>
 8002524:	20000604 	.word	0x20000604
 8002528:	20002654 	.word	0x20002654
 800252c:	20002660 	.word	0x20002660
 8002530:	2000265c 	.word	0x2000265c
 8002534:	08008274 	.word	0x08008274
 8002538:	20002658 	.word	0x20002658
 800253c:	20000000 	.word	0x20000000
 8002540:	08008278 	.word	0x08008278
 8002544:	08008288 	.word	0x08008288
 8002548:	2000266c 	.word	0x2000266c
 800254c:	08008294 	.word	0x08008294
 8002550:	08008298 	.word	0x08008298
 8002554:	080082a8 	.word	0x080082a8
 8002558:	080082c0 	.word	0x080082c0
 800255c:	080082c4 	.word	0x080082c4
 8002560:	080082d8 	.word	0x080082d8
 8002564:	080082ec 	.word	0x080082ec
 8002568:	08008300 	.word	0x08008300
 800256c:	08008314 	.word	0x08008314
 8002570:	50000400 	.word	0x50000400
 8002574:	08008328 	.word	0x08008328
 8002578:	08008338 	.word	0x08008338
 800257c:	08008348 	.word	0x08008348
 8002580:	08008358 	.word	0x08008358
 8002584:	08008368 	.word	0x08008368
 8002588:	50000800 	.word	0x50000800
 800258c:	08008374 	.word	0x08008374
 8002590:	08008380 	.word	0x08008380
 8002594:	0800838c 	.word	0x0800838c
 8002598:	08008398 	.word	0x08008398
 800259c:	200026a0 	.word	0x200026a0
 80025a0:	080083a4 	.word	0x080083a4
 80025a4:	080083b0 	.word	0x080083b0
						}
						else if(buffer[2] == '3'){
 80025a8:	4be0      	ldr	r3, [pc, #896]	; (800292c <get_command+0x768>)
 80025aa:	789b      	ldrb	r3, [r3, #2]
 80025ac:	2b33      	cmp	r3, #51	; 0x33
 80025ae:	d109      	bne.n	80025c4 <get_command+0x400>
							waterout[1].set_relay(SET);
 80025b0:	4bdf      	ldr	r3, [pc, #892]	; (8002930 <get_command+0x76c>)
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	2001      	movs	r0, #1
 80025b6:	4798      	blx	r3
							sprintf(STRING2,"%s","RELAY 1 OFF\n");
 80025b8:	4ade      	ldr	r2, [pc, #888]	; (8002934 <get_command+0x770>)
 80025ba:	49df      	ldr	r1, [pc, #892]	; (8002938 <get_command+0x774>)
 80025bc:	4bdf      	ldr	r3, [pc, #892]	; (800293c <get_command+0x778>)
 80025be:	0018      	movs	r0, r3
 80025c0:	f005 f986 	bl	80078d0 <siprintf>
						}
						state2 = 2;
 80025c4:	4bde      	ldr	r3, [pc, #888]	; (8002940 <get_command+0x77c>)
 80025c6:	2202      	movs	r2, #2
 80025c8:	601a      	str	r2, [r3, #0]
						setTimer(0, 100);
 80025ca:	2164      	movs	r1, #100	; 0x64
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7ff fad9 	bl	8001b84 <setTimer>
 80025d2:	e18c      	b.n	80028ee <get_command+0x72a>
					}
					else if(buffer[1] == 'T') // NHIET DO
 80025d4:	4bd5      	ldr	r3, [pc, #852]	; (800292c <get_command+0x768>)
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	2b54      	cmp	r3, #84	; 0x54
 80025da:	d000      	beq.n	80025de <get_command+0x41a>
 80025dc:	e097      	b.n	800270e <get_command+0x54a>
					{
						if(buffer[2] == '0'){
 80025de:	4bd3      	ldr	r3, [pc, #844]	; (800292c <get_command+0x768>)
 80025e0:	789b      	ldrb	r3, [r3, #2]
 80025e2:	2b30      	cmp	r3, #48	; 0x30
 80025e4:	d110      	bne.n	8002608 <get_command+0x444>
							sprintf(STRING3,"%s %d %s","TEMP 0: ", (int)waterout[0].temp()," \n");
 80025e6:	4bd2      	ldr	r3, [pc, #840]	; (8002930 <get_command+0x76c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4798      	blx	r3
 80025ec:	1c03      	adds	r3, r0, #0
 80025ee:	1c18      	adds	r0, r3, #0
 80025f0:	f7fd ff06 	bl	8000400 <__aeabi_f2iz>
 80025f4:	0004      	movs	r4, r0
 80025f6:	4ad3      	ldr	r2, [pc, #844]	; (8002944 <get_command+0x780>)
 80025f8:	49d3      	ldr	r1, [pc, #844]	; (8002948 <get_command+0x784>)
 80025fa:	48d4      	ldr	r0, [pc, #848]	; (800294c <get_command+0x788>)
 80025fc:	4bd4      	ldr	r3, [pc, #848]	; (8002950 <get_command+0x78c>)
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	0023      	movs	r3, r4
 8002602:	f005 f965 	bl	80078d0 <siprintf>
 8002606:	e07a      	b.n	80026fe <get_command+0x53a>
						}
						else if(buffer[2] == '1'){
 8002608:	4bc8      	ldr	r3, [pc, #800]	; (800292c <get_command+0x768>)
 800260a:	789b      	ldrb	r3, [r3, #2]
 800260c:	2b31      	cmp	r3, #49	; 0x31
 800260e:	d110      	bne.n	8002632 <get_command+0x46e>
							sprintf(STRING3,"%s %d %s","TEMP 1: ", (int)waterout[1].temp()," \n");
 8002610:	4bc7      	ldr	r3, [pc, #796]	; (8002930 <get_command+0x76c>)
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	4798      	blx	r3
 8002616:	1c03      	adds	r3, r0, #0
 8002618:	1c18      	adds	r0, r3, #0
 800261a:	f7fd fef1 	bl	8000400 <__aeabi_f2iz>
 800261e:	0004      	movs	r4, r0
 8002620:	4acc      	ldr	r2, [pc, #816]	; (8002954 <get_command+0x790>)
 8002622:	49c9      	ldr	r1, [pc, #804]	; (8002948 <get_command+0x784>)
 8002624:	48c9      	ldr	r0, [pc, #804]	; (800294c <get_command+0x788>)
 8002626:	4bca      	ldr	r3, [pc, #808]	; (8002950 <get_command+0x78c>)
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	0023      	movs	r3, r4
 800262c:	f005 f950 	bl	80078d0 <siprintf>
 8002630:	e065      	b.n	80026fe <get_command+0x53a>
						}
						else if(buffer[2] == 'S'){
 8002632:	4bbe      	ldr	r3, [pc, #760]	; (800292c <get_command+0x768>)
 8002634:	789b      	ldrb	r3, [r3, #2]
 8002636:	2b53      	cmp	r3, #83	; 0x53
 8002638:	d161      	bne.n	80026fe <get_command+0x53a>
							char *substring = buffer + 3;
 800263a:	4bc7      	ldr	r3, [pc, #796]	; (8002958 <get_command+0x794>)
 800263c:	61fb      	str	r3, [r7, #28]

							uint8_t number = 0;
 800263e:	232f      	movs	r3, #47	; 0x2f
 8002640:	2218      	movs	r2, #24
 8002642:	189b      	adds	r3, r3, r2
 8002644:	19db      	adds	r3, r3, r7
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
							uint64_t multiplier = 1;
 800264a:	2201      	movs	r2, #1
 800264c:	2300      	movs	r3, #0
 800264e:	63ba      	str	r2, [r7, #56]	; 0x38
 8002650:	63fb      	str	r3, [r7, #60]	; 0x3c

							for (int i = count - 1; i >= 0; i--) {
 8002652:	4bc2      	ldr	r3, [pc, #776]	; (800295c <get_command+0x798>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3b01      	subs	r3, #1
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
 800265a:	e03a      	b.n	80026d2 <get_command+0x50e>
								if (substring[i] >= '0' && substring[i] <= '9') {
 800265c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	18d3      	adds	r3, r2, r3
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b2f      	cmp	r3, #47	; 0x2f
 8002666:	d931      	bls.n	80026cc <get_command+0x508>
 8002668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	18d3      	adds	r3, r2, r3
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b39      	cmp	r3, #57	; 0x39
 8002672:	d82b      	bhi.n	80026cc <get_command+0x508>
									number += (substring[i] - '0') * multiplier;
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	18d3      	adds	r3, r2, r3
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	3b30      	subs	r3, #48	; 0x30
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	17db      	asrs	r3, r3, #31
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	7a39      	ldrb	r1, [r7, #8]
 8002686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268a:	1c13      	adds	r3, r2, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	434b      	muls	r3, r1
 8002690:	b2d9      	uxtb	r1, r3
 8002692:	222f      	movs	r2, #47	; 0x2f
 8002694:	2018      	movs	r0, #24
 8002696:	1813      	adds	r3, r2, r0
 8002698:	19db      	adds	r3, r3, r7
 800269a:	1812      	adds	r2, r2, r0
 800269c:	19d2      	adds	r2, r2, r7
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	188a      	adds	r2, r1, r2
 80026a2:	701a      	strb	r2, [r3, #0]
									multiplier *= 10;
 80026a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026a8:	0002      	movs	r2, r0
 80026aa:	000b      	movs	r3, r1
 80026ac:	0f94      	lsrs	r4, r2, #30
 80026ae:	009d      	lsls	r5, r3, #2
 80026b0:	617d      	str	r5, [r7, #20]
 80026b2:	697d      	ldr	r5, [r7, #20]
 80026b4:	4325      	orrs	r5, r4
 80026b6:	617d      	str	r5, [r7, #20]
 80026b8:	0093      	lsls	r3, r2, #2
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	1812      	adds	r2, r2, r0
 80026c2:	414b      	adcs	r3, r1
 80026c4:	1892      	adds	r2, r2, r2
 80026c6:	415b      	adcs	r3, r3
 80026c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
							for (int i = count - 1; i >= 0; i--) {
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ce:	3b01      	subs	r3, #1
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
 80026d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	dac1      	bge.n	800265c <get_command+0x498>
								}
							}
							set_temp(number);
 80026d8:	242f      	movs	r4, #47	; 0x2f
 80026da:	2518      	movs	r5, #24
 80026dc:	1963      	adds	r3, r4, r5
 80026de:	19db      	adds	r3, r3, r7
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7ff f8e2 	bl	80018ac <set_temp>
							sprintf(STRING3,"%s %d %s","SET TEMP: ", number ," \n");
 80026e8:	1963      	adds	r3, r4, r5
 80026ea:	19db      	adds	r3, r3, r7
 80026ec:	781c      	ldrb	r4, [r3, #0]
 80026ee:	4a9c      	ldr	r2, [pc, #624]	; (8002960 <get_command+0x79c>)
 80026f0:	4995      	ldr	r1, [pc, #596]	; (8002948 <get_command+0x784>)
 80026f2:	4896      	ldr	r0, [pc, #600]	; (800294c <get_command+0x788>)
 80026f4:	4b96      	ldr	r3, [pc, #600]	; (8002950 <get_command+0x78c>)
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	0023      	movs	r3, r4
 80026fa:	f005 f8e9 	bl	80078d0 <siprintf>
						}
						state2 = 3;
 80026fe:	4b90      	ldr	r3, [pc, #576]	; (8002940 <get_command+0x77c>)
 8002700:	2203      	movs	r2, #3
 8002702:	601a      	str	r2, [r3, #0]
						setTimer(0, 100);
 8002704:	2164      	movs	r1, #100	; 0x64
 8002706:	2000      	movs	r0, #0
 8002708:	f7ff fa3c 	bl	8001b84 <setTimer>
 800270c:	e0ef      	b.n	80028ee <get_command+0x72a>
					}
					else if(buffer[1] == 'F') // DONG CHAY
 800270e:	4b87      	ldr	r3, [pc, #540]	; (800292c <get_command+0x768>)
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	2b46      	cmp	r3, #70	; 0x46
 8002714:	d128      	bne.n	8002768 <get_command+0x5a4>
					{
							if(buffer[2] == '0'){
 8002716:	4b85      	ldr	r3, [pc, #532]	; (800292c <get_command+0x768>)
 8002718:	789b      	ldrb	r3, [r3, #2]
 800271a:	2b30      	cmp	r3, #48	; 0x30
 800271c:	d10c      	bne.n	8002738 <get_command+0x574>
								sprintf(STRING4,"%s %d %s","PULSE FLOW 0: ", (int)fn_pulse(0)," \n");
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe ff24 	bl	800156c <fn_pulse>
 8002724:	0004      	movs	r4, r0
 8002726:	4a8f      	ldr	r2, [pc, #572]	; (8002964 <get_command+0x7a0>)
 8002728:	4987      	ldr	r1, [pc, #540]	; (8002948 <get_command+0x784>)
 800272a:	488f      	ldr	r0, [pc, #572]	; (8002968 <get_command+0x7a4>)
 800272c:	4b88      	ldr	r3, [pc, #544]	; (8002950 <get_command+0x78c>)
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	0023      	movs	r3, r4
 8002732:	f005 f8cd 	bl	80078d0 <siprintf>
 8002736:	e00f      	b.n	8002758 <get_command+0x594>
							}
							else if(buffer[2] == '1'){
 8002738:	4b7c      	ldr	r3, [pc, #496]	; (800292c <get_command+0x768>)
 800273a:	789b      	ldrb	r3, [r3, #2]
 800273c:	2b31      	cmp	r3, #49	; 0x31
 800273e:	d10b      	bne.n	8002758 <get_command+0x594>
								sprintf(STRING4,"%s %d %s","PULSE FLOW 1: ", (int)fn_pulse(1)," \n");
 8002740:	2001      	movs	r0, #1
 8002742:	f7fe ff13 	bl	800156c <fn_pulse>
 8002746:	0004      	movs	r4, r0
 8002748:	4a88      	ldr	r2, [pc, #544]	; (800296c <get_command+0x7a8>)
 800274a:	497f      	ldr	r1, [pc, #508]	; (8002948 <get_command+0x784>)
 800274c:	4886      	ldr	r0, [pc, #536]	; (8002968 <get_command+0x7a4>)
 800274e:	4b80      	ldr	r3, [pc, #512]	; (8002950 <get_command+0x78c>)
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	0023      	movs	r3, r4
 8002754:	f005 f8bc 	bl	80078d0 <siprintf>
							}
//						if(isTimer_timeout(2)){
//							setTimer(2, 500);
//						}
						state2 = 4;
 8002758:	4b79      	ldr	r3, [pc, #484]	; (8002940 <get_command+0x77c>)
 800275a:	2204      	movs	r2, #4
 800275c:	601a      	str	r2, [r3, #0]
						setTimer(0, 100);
 800275e:	2164      	movs	r1, #100	; 0x64
 8002760:	2000      	movs	r0, #0
 8002762:	f7ff fa0f 	bl	8001b84 <setTimer>
 8002766:	e0c2      	b.n	80028ee <get_command+0x72a>
					}
					else if(buffer[1] == 'W') // MUC NUOC
 8002768:	4b70      	ldr	r3, [pc, #448]	; (800292c <get_command+0x768>)
 800276a:	785b      	ldrb	r3, [r3, #1]
 800276c:	2b57      	cmp	r3, #87	; 0x57
 800276e:	d136      	bne.n	80027de <get_command+0x61a>
					{
						if(buffer[2] == '0'){
 8002770:	4b6e      	ldr	r3, [pc, #440]	; (800292c <get_command+0x768>)
 8002772:	789b      	ldrb	r3, [r3, #2]
 8002774:	2b30      	cmp	r3, #48	; 0x30
 8002776:	d113      	bne.n	80027a0 <get_command+0x5dc>
							sprintf(STRING5,"%s %d - %d %s","WATER LEVEL 0: ", waterout[0].water_level_0()
 8002778:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <get_command+0x76c>)
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4798      	blx	r3
 800277e:	0003      	movs	r3, r0
 8002780:	001d      	movs	r5, r3
									,waterout[0].water_level_1()," \n");
 8002782:	4b6b      	ldr	r3, [pc, #428]	; (8002930 <get_command+0x76c>)
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4798      	blx	r3
 8002788:	0003      	movs	r3, r0
							sprintf(STRING5,"%s %d - %d %s","WATER LEVEL 0: ", waterout[0].water_level_0()
 800278a:	001c      	movs	r4, r3
 800278c:	4a78      	ldr	r2, [pc, #480]	; (8002970 <get_command+0x7ac>)
 800278e:	4979      	ldr	r1, [pc, #484]	; (8002974 <get_command+0x7b0>)
 8002790:	4879      	ldr	r0, [pc, #484]	; (8002978 <get_command+0x7b4>)
 8002792:	4b6f      	ldr	r3, [pc, #444]	; (8002950 <get_command+0x78c>)
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	9400      	str	r4, [sp, #0]
 8002798:	002b      	movs	r3, r5
 800279a:	f005 f899 	bl	80078d0 <siprintf>
 800279e:	e016      	b.n	80027ce <get_command+0x60a>

						}
						else if(buffer[2] == '1'){
 80027a0:	4b62      	ldr	r3, [pc, #392]	; (800292c <get_command+0x768>)
 80027a2:	789b      	ldrb	r3, [r3, #2]
 80027a4:	2b31      	cmp	r3, #49	; 0x31
 80027a6:	d112      	bne.n	80027ce <get_command+0x60a>
							sprintf(STRING5,"%s %d - %d %s","WATER LEVEL 1: ", waterout[1].water_level_0()
 80027a8:	4b61      	ldr	r3, [pc, #388]	; (8002930 <get_command+0x76c>)
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	4798      	blx	r3
 80027ae:	0003      	movs	r3, r0
 80027b0:	001d      	movs	r5, r3
									,waterout[1].water_level_1()," \n");
 80027b2:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <get_command+0x76c>)
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	4798      	blx	r3
 80027b8:	0003      	movs	r3, r0
							sprintf(STRING5,"%s %d - %d %s","WATER LEVEL 1: ", waterout[1].water_level_0()
 80027ba:	001c      	movs	r4, r3
 80027bc:	4a6f      	ldr	r2, [pc, #444]	; (800297c <get_command+0x7b8>)
 80027be:	496d      	ldr	r1, [pc, #436]	; (8002974 <get_command+0x7b0>)
 80027c0:	486d      	ldr	r0, [pc, #436]	; (8002978 <get_command+0x7b4>)
 80027c2:	4b63      	ldr	r3, [pc, #396]	; (8002950 <get_command+0x78c>)
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	9400      	str	r4, [sp, #0]
 80027c8:	002b      	movs	r3, r5
 80027ca:	f005 f881 	bl	80078d0 <siprintf>
						}
						state2 = 5;
 80027ce:	4b5c      	ldr	r3, [pc, #368]	; (8002940 <get_command+0x77c>)
 80027d0:	2205      	movs	r2, #5
 80027d2:	601a      	str	r2, [r3, #0]
						setTimer(0, 100);
 80027d4:	2164      	movs	r1, #100	; 0x64
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7ff f9d4 	bl	8001b84 <setTimer>
 80027dc:	e087      	b.n	80028ee <get_command+0x72a>
					}
					else if (buffer[1] == 'L') {
 80027de:	4b53      	ldr	r3, [pc, #332]	; (800292c <get_command+0x768>)
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	2b4c      	cmp	r3, #76	; 0x4c
 80027e4:	d000      	beq.n	80027e8 <get_command+0x624>
 80027e6:	e082      	b.n	80028ee <get_command+0x72a>
						char *substring = buffer + 3;
 80027e8:	4b5b      	ldr	r3, [pc, #364]	; (8002958 <get_command+0x794>)
 80027ea:	623b      	str	r3, [r7, #32]

						uint8_t number = 0;
 80027ec:	231b      	movs	r3, #27
 80027ee:	2218      	movs	r2, #24
 80027f0:	189b      	adds	r3, r3, r2
 80027f2:	19db      	adds	r3, r3, r7
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
						uint64_t multiplier = 1;
 80027f8:	2201      	movs	r2, #1
 80027fa:	2300      	movs	r3, #0
 80027fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c

						for (int i = count - 1; i >= 0; i--) {
 8002800:	4b56      	ldr	r3, [pc, #344]	; (800295c <get_command+0x798>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3b01      	subs	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
 8002808:	e036      	b.n	8002878 <get_command+0x6b4>
						    if (substring[i] >= '0' && substring[i] <= '9') {
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	6a3a      	ldr	r2, [r7, #32]
 800280e:	18d3      	adds	r3, r2, r3
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b2f      	cmp	r3, #47	; 0x2f
 8002814:	d92d      	bls.n	8002872 <get_command+0x6ae>
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	6a3a      	ldr	r2, [r7, #32]
 800281a:	18d3      	adds	r3, r2, r3
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b39      	cmp	r3, #57	; 0x39
 8002820:	d827      	bhi.n	8002872 <get_command+0x6ae>
						            number += (substring[i] - '0') * multiplier;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	18d3      	adds	r3, r2, r3
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	3b30      	subs	r3, #48	; 0x30
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	17db      	asrs	r3, r3, #31
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	7839      	ldrb	r1, [r7, #0]
 8002834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	1c13      	adds	r3, r2, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	434b      	muls	r3, r1
 800283e:	b2d9      	uxtb	r1, r3
 8002840:	221b      	movs	r2, #27
 8002842:	2018      	movs	r0, #24
 8002844:	1813      	adds	r3, r2, r0
 8002846:	19db      	adds	r3, r3, r7
 8002848:	1812      	adds	r2, r2, r0
 800284a:	19d2      	adds	r2, r2, r7
 800284c:	7812      	ldrb	r2, [r2, #0]
 800284e:	188a      	adds	r2, r1, r2
 8002850:	701a      	strb	r2, [r3, #0]
						            multiplier *= 10;
 8002852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002856:	0002      	movs	r2, r0
 8002858:	000b      	movs	r3, r1
 800285a:	0f96      	lsrs	r6, r2, #30
 800285c:	009d      	lsls	r5, r3, #2
 800285e:	4335      	orrs	r5, r6
 8002860:	0094      	lsls	r4, r2, #2
 8002862:	0002      	movs	r2, r0
 8002864:	000b      	movs	r3, r1
 8002866:	1912      	adds	r2, r2, r4
 8002868:	416b      	adcs	r3, r5
 800286a:	1892      	adds	r2, r2, r2
 800286c:	415b      	adcs	r3, r3
 800286e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
						for (int i = count - 1; i >= 0; i--) {
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	3b01      	subs	r3, #1
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	2b00      	cmp	r3, #0
 800287c:	dac5      	bge.n	800280a <get_command+0x646>
						    }
						}
						if(buffer[2] == '0'){
 800287e:	4b2b      	ldr	r3, [pc, #172]	; (800292c <get_command+0x768>)
 8002880:	789b      	ldrb	r3, [r3, #2]
 8002882:	2b30      	cmp	r3, #48	; 0x30
 8002884:	d114      	bne.n	80028b0 <get_command+0x6ec>
							SYSTEM_output_water(number, 0);
 8002886:	241b      	movs	r4, #27
 8002888:	2518      	movs	r5, #24
 800288a:	1963      	adds	r3, r4, r5
 800288c:	19db      	adds	r3, r3, r7
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2100      	movs	r1, #0
 8002892:	0018      	movs	r0, r3
 8002894:	f7fd feca 	bl	800062c <SYSTEM_output_water>
							sprintf(STRING6,"%s %d %s","SET LITER 0: ", number ," \n");
 8002898:	1963      	adds	r3, r4, r5
 800289a:	19db      	adds	r3, r3, r7
 800289c:	781c      	ldrb	r4, [r3, #0]
 800289e:	4a38      	ldr	r2, [pc, #224]	; (8002980 <get_command+0x7bc>)
 80028a0:	4929      	ldr	r1, [pc, #164]	; (8002948 <get_command+0x784>)
 80028a2:	4838      	ldr	r0, [pc, #224]	; (8002984 <get_command+0x7c0>)
 80028a4:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <get_command+0x78c>)
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	0023      	movs	r3, r4
 80028aa:	f005 f811 	bl	80078d0 <siprintf>
 80028ae:	e017      	b.n	80028e0 <get_command+0x71c>
						}else if(buffer[2] == '1'){
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <get_command+0x768>)
 80028b2:	789b      	ldrb	r3, [r3, #2]
 80028b4:	2b31      	cmp	r3, #49	; 0x31
 80028b6:	d113      	bne.n	80028e0 <get_command+0x71c>
							SYSTEM_output_water(number, 1);
 80028b8:	241b      	movs	r4, #27
 80028ba:	2518      	movs	r5, #24
 80028bc:	1963      	adds	r3, r4, r5
 80028be:	19db      	adds	r3, r3, r7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2101      	movs	r1, #1
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7fd feb1 	bl	800062c <SYSTEM_output_water>
							sprintf(STRING6,"%s %d %s","SET LITER 1: ", number ," \n");
 80028ca:	1963      	adds	r3, r4, r5
 80028cc:	19db      	adds	r3, r3, r7
 80028ce:	781c      	ldrb	r4, [r3, #0]
 80028d0:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <get_command+0x7c4>)
 80028d2:	491d      	ldr	r1, [pc, #116]	; (8002948 <get_command+0x784>)
 80028d4:	482b      	ldr	r0, [pc, #172]	; (8002984 <get_command+0x7c0>)
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <get_command+0x78c>)
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	0023      	movs	r3, r4
 80028dc:	f004 fff8 	bl	80078d0 <siprintf>
						}
						state2 = 6;
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <get_command+0x77c>)
 80028e2:	2206      	movs	r2, #6
 80028e4:	601a      	str	r2, [r3, #0]
						setTimer(0, 100);
 80028e6:	2164      	movs	r1, #100	; 0x64
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7ff f94b 	bl	8001b84 <setTimer>
					}
					count = 0;
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <get_command+0x798>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
					state1 = INIT;
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <get_command+0x7c8>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
				}

				if(buffer[count] == '!')
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <get_command+0x798>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a0b      	ldr	r2, [pc, #44]	; (800292c <get_command+0x768>)
 8002900:	5cd3      	ldrb	r3, [r2, r3]
 8002902:	2b21      	cmp	r3, #33	; 0x21
 8002904:	d10b      	bne.n	800291e <get_command+0x75a>
				{
					buffer[0] = '!';
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <get_command+0x768>)
 8002908:	2221      	movs	r2, #33	; 0x21
 800290a:	701a      	strb	r2, [r3, #0]
					count = 1;
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <get_command+0x798>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]
					setTimer(2, 500);
 8002912:	23fa      	movs	r3, #250	; 0xfa
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	0019      	movs	r1, r3
 8002918:	2002      	movs	r0, #2
 800291a:	f7ff f933 	bl	8001b84 <setTimer>
				}
				count++;
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <get_command+0x798>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <get_command+0x798>)
 8002926:	601a      	str	r2, [r3, #0]
				break;
 8002928:	e03c      	b.n	80029a4 <get_command+0x7e0>
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	20002660 	.word	0x20002660
 8002930:	20000000 	.word	0x20000000
 8002934:	080083c0 	.word	0x080083c0
 8002938:	080082c0 	.word	0x080082c0
 800293c:	200026a0 	.word	0x200026a0
 8002940:	20002658 	.word	0x20002658
 8002944:	080083d0 	.word	0x080083d0
 8002948:	08008288 	.word	0x08008288
 800294c:	200026d4 	.word	0x200026d4
 8002950:	08008294 	.word	0x08008294
 8002954:	080083dc 	.word	0x080083dc
 8002958:	20002663 	.word	0x20002663
 800295c:	2000265c 	.word	0x2000265c
 8002960:	080083e8 	.word	0x080083e8
 8002964:	080083f4 	.word	0x080083f4
 8002968:	20002708 	.word	0x20002708
 800296c:	08008404 	.word	0x08008404
 8002970:	08008414 	.word	0x08008414
 8002974:	08008424 	.word	0x08008424
 8002978:	2000273c 	.word	0x2000273c
 800297c:	08008434 	.word	0x08008434
 8002980:	08008444 	.word	0x08008444
 8002984:	20002770 	.word	0x20002770
 8002988:	08008454 	.word	0x08008454
 800298c:	20002654 	.word	0x20002654
			default:
				UART_send(UART_3, "DEFAULT\n", sizeof("DEFAULT\n"));
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <get_command+0x7e8>)
 8002992:	2209      	movs	r2, #9
 8002994:	0019      	movs	r1, r3
 8002996:	2002      	movs	r0, #2
 8002998:	f7ff fa42 	bl	8001e20 <UART_send>
				break;
 800299c:	e002      	b.n	80029a4 <get_command+0x7e0>
		}
	}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	e000      	b.n	80029a4 <get_command+0x7e0>
				break;
 80029a2:	46c0      	nop			; (mov r8, r8)
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b013      	add	sp, #76	; 0x4c
 80029aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ac:	08008464 	.word	0x08008464

080029b0 <fsm_uart>:

void fsm_uart()
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	switch (state2) {
 80029b4:	4b44      	ldr	r3, [pc, #272]	; (8002ac8 <fsm_uart+0x118>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b06      	cmp	r3, #6
 80029ba:	d900      	bls.n	80029be <fsm_uart+0xe>
 80029bc:	e071      	b.n	8002aa2 <fsm_uart+0xf2>
 80029be:	009a      	lsls	r2, r3, #2
 80029c0:	4b42      	ldr	r3, [pc, #264]	; (8002acc <fsm_uart+0x11c>)
 80029c2:	18d3      	adds	r3, r2, r3
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	469f      	mov	pc, r3
		case 0:
			break;
		case 1:
			if(isTimer_timeout(0)){
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7ff f8f3 	bl	8001bb4 <isTimer_timeout>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d100      	bne.n	80029d4 <fsm_uart+0x24>
 80029d2:	e06a      	b.n	8002aaa <fsm_uart+0xfa>
				UART_send(UART_3, STRING1, sizeof(STRING2));
 80029d4:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <fsm_uart+0x120>)
 80029d6:	2232      	movs	r2, #50	; 0x32
 80029d8:	0019      	movs	r1, r3
 80029da:	2002      	movs	r0, #2
 80029dc:	f7ff fa20 	bl	8001e20 <UART_send>
				setTimer(0, 500);
 80029e0:	23fa      	movs	r3, #250	; 0xfa
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	0019      	movs	r1, r3
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7ff f8cc 	bl	8001b84 <setTimer>
			}
			break;
 80029ec:	e05d      	b.n	8002aaa <fsm_uart+0xfa>
		case 2:
			if(isTimer_timeout(0)){
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7ff f8e0 	bl	8001bb4 <isTimer_timeout>
 80029f4:	1e03      	subs	r3, r0, #0
 80029f6:	d05a      	beq.n	8002aae <fsm_uart+0xfe>
				UART_send(UART_3, STRING2, sizeof(STRING2));
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <fsm_uart+0x124>)
 80029fa:	2232      	movs	r2, #50	; 0x32
 80029fc:	0019      	movs	r1, r3
 80029fe:	2002      	movs	r0, #2
 8002a00:	f7ff fa0e 	bl	8001e20 <UART_send>
				setTimer(0, 500);
 8002a04:	23fa      	movs	r3, #250	; 0xfa
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	0019      	movs	r1, r3
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7ff f8ba 	bl	8001b84 <setTimer>
			}
			break;
 8002a10:	e04d      	b.n	8002aae <fsm_uart+0xfe>
		case 3:
			if(isTimer_timeout(0)){
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7ff f8ce 	bl	8001bb4 <isTimer_timeout>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d04a      	beq.n	8002ab2 <fsm_uart+0x102>
				UART_send(UART_3, STRING3, sizeof(STRING3));
 8002a1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <fsm_uart+0x128>)
 8002a1e:	2232      	movs	r2, #50	; 0x32
 8002a20:	0019      	movs	r1, r3
 8002a22:	2002      	movs	r0, #2
 8002a24:	f7ff f9fc 	bl	8001e20 <UART_send>
				setTimer(0, 500);
 8002a28:	23fa      	movs	r3, #250	; 0xfa
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7ff f8a8 	bl	8001b84 <setTimer>
			}
			break;
 8002a34:	e03d      	b.n	8002ab2 <fsm_uart+0x102>
		case 4:
			if(isTimer_timeout(0)){
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7ff f8bc 	bl	8001bb4 <isTimer_timeout>
 8002a3c:	1e03      	subs	r3, r0, #0
 8002a3e:	d03a      	beq.n	8002ab6 <fsm_uart+0x106>
				UART_send(UART_3, STRING4, sizeof(STRING4));
 8002a40:	4b26      	ldr	r3, [pc, #152]	; (8002adc <fsm_uart+0x12c>)
 8002a42:	2232      	movs	r2, #50	; 0x32
 8002a44:	0019      	movs	r1, r3
 8002a46:	2002      	movs	r0, #2
 8002a48:	f7ff f9ea 	bl	8001e20 <UART_send>
				setTimer(0, 500);
 8002a4c:	23fa      	movs	r3, #250	; 0xfa
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	0019      	movs	r1, r3
 8002a52:	2000      	movs	r0, #0
 8002a54:	f7ff f896 	bl	8001b84 <setTimer>
			}
			break;
 8002a58:	e02d      	b.n	8002ab6 <fsm_uart+0x106>
		case 5:
			if(isTimer_timeout(0)){
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7ff f8aa 	bl	8001bb4 <isTimer_timeout>
 8002a60:	1e03      	subs	r3, r0, #0
 8002a62:	d02a      	beq.n	8002aba <fsm_uart+0x10a>
				UART_send(UART_3, STRING5, sizeof(STRING5));
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <fsm_uart+0x130>)
 8002a66:	2232      	movs	r2, #50	; 0x32
 8002a68:	0019      	movs	r1, r3
 8002a6a:	2002      	movs	r0, #2
 8002a6c:	f7ff f9d8 	bl	8001e20 <UART_send>
				setTimer(0, 500);
 8002a70:	23fa      	movs	r3, #250	; 0xfa
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	0019      	movs	r1, r3
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7ff f884 	bl	8001b84 <setTimer>
			}
			break;
 8002a7c:	e01d      	b.n	8002aba <fsm_uart+0x10a>
		case 6:
			if(isTimer_timeout(0)){
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7ff f898 	bl	8001bb4 <isTimer_timeout>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d01a      	beq.n	8002abe <fsm_uart+0x10e>
				UART_send(UART_3, STRING6, sizeof(STRING6));
 8002a88:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <fsm_uart+0x134>)
 8002a8a:	2232      	movs	r2, #50	; 0x32
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f7ff f9c6 	bl	8001e20 <UART_send>
				setTimer(0, 500);
 8002a94:	23fa      	movs	r3, #250	; 0xfa
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	0019      	movs	r1, r3
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7ff f872 	bl	8001b84 <setTimer>
			}
			break;
 8002aa0:	e00d      	b.n	8002abe <fsm_uart+0x10e>
		default:
			break;
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	e00c      	b.n	8002ac0 <fsm_uart+0x110>
			break;
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	e00a      	b.n	8002ac0 <fsm_uart+0x110>
			break;
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	e008      	b.n	8002ac0 <fsm_uart+0x110>
			break;
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	e006      	b.n	8002ac0 <fsm_uart+0x110>
			break;
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	e004      	b.n	8002ac0 <fsm_uart+0x110>
			break;
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	e002      	b.n	8002ac0 <fsm_uart+0x110>
			break;
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	e000      	b.n	8002ac0 <fsm_uart+0x110>
			break;
 8002abe:	46c0      	nop			; (mov r8, r8)
	}
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	20002658 	.word	0x20002658
 8002acc:	08008488 	.word	0x08008488
 8002ad0:	2000266c 	.word	0x2000266c
 8002ad4:	200026a0 	.word	0x200026a0
 8002ad8:	200026d4 	.word	0x200026d4
 8002adc:	20002708 	.word	0x20002708
 8002ae0:	2000273c 	.word	0x2000273c
 8002ae4:	20002770 	.word	0x20002770

08002ae8 <fsm_run>:

void fsm_run(){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	SCH_Dispatch_Tasks();
 8002aec:	f000 fb38 	bl	8003160 <SCH_Dispatch_Tasks>
	get_command();
 8002af0:	f7ff fb68 	bl	80021c4 <get_command>
	fsm_uart();
 8002af4:	f7ff ff5c 	bl	80029b0 <fsm_uart>
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b02:	f000 fd23 	bl	800354c <HAL_Init>

  /* USER CODE BEGIN Init */
  UART_init();
 8002b06:	f7ff f8b1 	bl	8001c6c <UART_init>
  TIM_init();
 8002b0a:	f7fe fff3 	bl	8001af4 <TIM_init>
  ADC_init();
 8002b0e:	f7fe fedd 	bl	80018cc <ADC_init>
  GPIO_init();
 8002b12:	f7fe ff1f 	bl	8001954 <GPIO_init>
  SYSTEM_init();
 8002b16:	f7fd fd1b 	bl	8000550 <SYSTEM_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b1a:	f000 f807 	bl	8002b2c <SystemClock_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  SYSTEM_check();
 8002b1e:	f7fd fda3 	bl	8000668 <SYSTEM_check>
	  SYSTEM_run();
 8002b22:	f7fd fdc2 	bl	80006aa <SYSTEM_run>
	  fsm_run();
 8002b26:	f7ff ffdf 	bl	8002ae8 <fsm_run>
	  SYSTEM_check();
 8002b2a:	e7f8      	b.n	8002b1e <main+0x20>

08002b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b093      	sub	sp, #76	; 0x4c
 8002b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b32:	2414      	movs	r4, #20
 8002b34:	193b      	adds	r3, r7, r4
 8002b36:	0018      	movs	r0, r3
 8002b38:	2334      	movs	r3, #52	; 0x34
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	f004 febe 	bl	80078be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	0018      	movs	r0, r3
 8002b46:	2310      	movs	r3, #16
 8002b48:	001a      	movs	r2, r3
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	f004 feb7 	bl	80078be <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	0018      	movs	r0, r3
 8002b56:	f001 fed1 	bl	80048fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b5a:	193b      	adds	r3, r7, r4
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b60:	193b      	adds	r3, r7, r4
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	0052      	lsls	r2, r2, #1
 8002b66:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	2240      	movs	r2, #64	; 0x40
 8002b72:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f001 ff09 	bl	8004994 <HAL_RCC_OscConfig>
 8002b82:	1e03      	subs	r3, r0, #0
 8002b84:	d001      	beq.n	8002b8a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002b86:	f000 f819 	bl	8002bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	2200      	movs	r2, #0
 8002b94:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f002 fa04 	bl	8004fb4 <HAL_RCC_ClockConfig>
 8002bac:	1e03      	subs	r3, r0, #0
 8002bae:	d001      	beq.n	8002bb4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002bb0:	f000 f804 	bl	8002bbc <Error_Handler>
  }
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b013      	add	sp, #76	; 0x4c
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc0:	b672      	cpsid	i
}
 8002bc2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <Error_Handler+0x8>
	...

08002bc8 <SCH_Update>:

void SCH_Init(void){
	// Do nothing
}

void SCH_Update(void){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <SCH_Update+0x44>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <SCH_Update+0x44>)
 8002bd4:	601a      	str	r2, [r3, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <SCH_Update+0x48>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d013      	beq.n	8002c06 <SCH_Update+0x3e>
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <SCH_Update+0x48>)
 8002be0:	7b1b      	ldrb	r3, [r3, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <SCH_Update+0x48>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <SCH_Update+0x48>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	1e5a      	subs	r2, r3, #1
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <SCH_Update+0x48>)
 8002bf6:	605a      	str	r2, [r3, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <SCH_Update+0x48>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <SCH_Update+0x48>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20002ac8 	.word	0x20002ac8
 8002c10:	200027a4 	.word	0x200027a4

08002c14 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8002c14:	b5b0      	push	{r4, r5, r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8002c20:	211f      	movs	r1, #31
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
	uint32_t sumDelay = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e15d      	b.n	8002ef4 <SCH_Add_Task+0x2e0>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 8002c38:	201f      	movs	r0, #31
 8002c3a:	183b      	adds	r3, r7, r0
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	49b7      	ldr	r1, [pc, #732]	; (8002f1c <SCH_Add_Task+0x308>)
 8002c40:	0013      	movs	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	189b      	adds	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	18cb      	adds	r3, r1, r3
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	18d3      	adds	r3, r2, r3
 8002c52:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d800      	bhi.n	8002c5e <SCH_Add_Task+0x4a>
 8002c5c:	e0da      	b.n	8002e14 <SCH_Add_Task+0x200>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 8002c5e:	183b      	adds	r3, r7, r0
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	49ae      	ldr	r1, [pc, #696]	; (8002f1c <SCH_Add_Task+0x308>)
 8002c64:	0013      	movs	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	189b      	adds	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	18cb      	adds	r3, r1, r3
 8002c6e:	3304      	adds	r3, #4
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	18d3      	adds	r3, r2, r3
 8002c7a:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 8002c7c:	183b      	adds	r3, r7, r0
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	69b9      	ldr	r1, [r7, #24]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ac9      	subs	r1, r1, r3
 8002c86:	48a5      	ldr	r0, [pc, #660]	; (8002f1c <SCH_Add_Task+0x308>)
 8002c88:	0013      	movs	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	189b      	adds	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	18c3      	adds	r3, r0, r3
 8002c92:	3304      	adds	r3, #4
 8002c94:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8002c96:	2317      	movs	r3, #23
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2227      	movs	r2, #39	; 0x27
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e055      	b.n	8002d4c <SCH_Add_Task+0x138>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8002ca0:	2417      	movs	r4, #23
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	1e59      	subs	r1, r3, #1
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	489b      	ldr	r0, [pc, #620]	; (8002f1c <SCH_Add_Task+0x308>)
 8002cae:	000b      	movs	r3, r1
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	185b      	adds	r3, r3, r1
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	5818      	ldr	r0, [r3, r0]
 8002cb8:	4998      	ldr	r1, [pc, #608]	; (8002f1c <SCH_Add_Task+0x308>)
 8002cba:	0013      	movs	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	189b      	adds	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	5058      	str	r0, [r3, r1]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 8002cc4:	193b      	adds	r3, r7, r4
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	1e59      	subs	r1, r3, #1
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	4893      	ldr	r0, [pc, #588]	; (8002f1c <SCH_Add_Task+0x308>)
 8002cd0:	000b      	movs	r3, r1
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	185b      	adds	r3, r3, r1
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	18c3      	adds	r3, r0, r3
 8002cda:	3308      	adds	r3, #8
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	488f      	ldr	r0, [pc, #572]	; (8002f1c <SCH_Add_Task+0x308>)
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	189b      	adds	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	18c3      	adds	r3, r0, r3
 8002cea:	3308      	adds	r3, #8
 8002cec:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8002cee:	193b      	adds	r3, r7, r4
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	1e59      	subs	r1, r3, #1
 8002cf4:	193b      	adds	r3, r7, r4
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	4888      	ldr	r0, [pc, #544]	; (8002f1c <SCH_Add_Task+0x308>)
 8002cfa:	000b      	movs	r3, r1
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	185b      	adds	r3, r3, r1
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	18c3      	adds	r3, r0, r3
 8002d04:	3304      	adds	r3, #4
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	4884      	ldr	r0, [pc, #528]	; (8002f1c <SCH_Add_Task+0x308>)
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	18c3      	adds	r3, r0, r3
 8002d14:	3304      	adds	r3, #4
 8002d16:	6019      	str	r1, [r3, #0]
//					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8002d18:	193b      	adds	r3, r7, r4
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	1e59      	subs	r1, r3, #1
 8002d1e:	193b      	adds	r3, r7, r4
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	487e      	ldr	r0, [pc, #504]	; (8002f1c <SCH_Add_Task+0x308>)
 8002d24:	000b      	movs	r3, r1
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	185b      	adds	r3, r3, r1
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	18c3      	adds	r3, r0, r3
 8002d2e:	3310      	adds	r3, #16
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	487a      	ldr	r0, [pc, #488]	; (8002f1c <SCH_Add_Task+0x308>)
 8002d34:	0013      	movs	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	189b      	adds	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	18c3      	adds	r3, r0, r3
 8002d3e:	3310      	adds	r3, #16
 8002d40:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	2317      	movs	r3, #23
 8002d4e:	18fa      	adds	r2, r7, r3
 8002d50:	201f      	movs	r0, #31
 8002d52:	183b      	adds	r3, r7, r0
 8002d54:	7812      	ldrb	r2, [r2, #0]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d8a1      	bhi.n	8002ca0 <SCH_Add_Task+0x8c>
				}
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8002d5c:	183b      	adds	r3, r7, r0
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	496e      	ldr	r1, [pc, #440]	; (8002f1c <SCH_Add_Task+0x308>)
 8002d62:	0013      	movs	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	189b      	adds	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	505a      	str	r2, [r3, r1]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 8002d6e:	183b      	adds	r3, r7, r0
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	496a      	ldr	r1, [pc, #424]	; (8002f1c <SCH_Add_Task+0x308>)
 8002d74:	0013      	movs	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	189b      	adds	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	18cb      	adds	r3, r1, r3
 8002d7e:	3304      	adds	r3, #4
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8002d84:	183b      	adds	r3, r7, r0
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	4964      	ldr	r1, [pc, #400]	; (8002f1c <SCH_Add_Task+0x308>)
 8002d8a:	0013      	movs	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	18cb      	adds	r3, r1, r3
 8002d94:	3308      	adds	r3, #8
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8002d9a:	183b      	adds	r3, r7, r0
 8002d9c:	781a      	ldrb	r2, [r3, #0]
 8002d9e:	495f      	ldr	r1, [pc, #380]	; (8002f1c <SCH_Add_Task+0x308>)
 8002da0:	0013      	movs	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	189b      	adds	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	18cb      	adds	r3, r1, r3
 8002daa:	3304      	adds	r3, #4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10b      	bne.n	8002dca <SCH_Add_Task+0x1b6>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 8002db2:	183b      	adds	r3, r7, r0
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	4959      	ldr	r1, [pc, #356]	; (8002f1c <SCH_Add_Task+0x308>)
 8002db8:	0013      	movs	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	189b      	adds	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	18cb      	adds	r3, r1, r3
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e00b      	b.n	8002de2 <SCH_Add_Task+0x1ce>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 8002dca:	231f      	movs	r3, #31
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	4952      	ldr	r1, [pc, #328]	; (8002f1c <SCH_Add_Task+0x308>)
 8002dd2:	0013      	movs	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	189b      	adds	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	18cb      	adds	r3, r1, r3
 8002ddc:	330c      	adds	r3, #12
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8002de2:	251f      	movs	r5, #31
 8002de4:	197b      	adds	r3, r7, r5
 8002de6:	781c      	ldrb	r4, [r3, #0]
 8002de8:	f000 f9e6 	bl	80031b8 <Get_New_Task_ID>
 8002dec:	0001      	movs	r1, r0
 8002dee:	4a4b      	ldr	r2, [pc, #300]	; (8002f1c <SCH_Add_Task+0x308>)
 8002df0:	0023      	movs	r3, r4
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	191b      	adds	r3, r3, r4
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	18d3      	adds	r3, r2, r3
 8002dfa:	3310      	adds	r3, #16
 8002dfc:	6019      	str	r1, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 8002dfe:	197b      	adds	r3, r7, r5
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	4946      	ldr	r1, [pc, #280]	; (8002f1c <SCH_Add_Task+0x308>)
 8002e04:	0013      	movs	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	189b      	adds	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	18cb      	adds	r3, r1, r3
 8002e0e:	3310      	adds	r3, #16
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	e07f      	b.n	8002f14 <SCH_Add_Task+0x300>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 8002e14:	241f      	movs	r4, #31
 8002e16:	193b      	adds	r3, r7, r4
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	4940      	ldr	r1, [pc, #256]	; (8002f1c <SCH_Add_Task+0x308>)
 8002e1c:	0013      	movs	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	189b      	adds	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	585b      	ldr	r3, [r3, r1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d15e      	bne.n	8002ee8 <SCH_Add_Task+0x2d4>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	493b      	ldr	r1, [pc, #236]	; (8002f1c <SCH_Add_Task+0x308>)
 8002e30:	0013      	movs	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	189b      	adds	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	505a      	str	r2, [r3, r1]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	1ac9      	subs	r1, r1, r3
 8002e46:	4835      	ldr	r0, [pc, #212]	; (8002f1c <SCH_Add_Task+0x308>)
 8002e48:	0013      	movs	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	189b      	adds	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	18c3      	adds	r3, r0, r3
 8002e52:	3304      	adds	r3, #4
 8002e54:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8002e56:	0020      	movs	r0, r4
 8002e58:	183b      	adds	r3, r7, r0
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	492f      	ldr	r1, [pc, #188]	; (8002f1c <SCH_Add_Task+0x308>)
 8002e5e:	0013      	movs	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	189b      	adds	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	18cb      	adds	r3, r1, r3
 8002e68:	3308      	adds	r3, #8
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8002e6e:	183b      	adds	r3, r7, r0
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	492a      	ldr	r1, [pc, #168]	; (8002f1c <SCH_Add_Task+0x308>)
 8002e74:	0013      	movs	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	189b      	adds	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	18cb      	adds	r3, r1, r3
 8002e7e:	3304      	adds	r3, #4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <SCH_Add_Task+0x28a>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 8002e86:	183b      	adds	r3, r7, r0
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	4924      	ldr	r1, [pc, #144]	; (8002f1c <SCH_Add_Task+0x308>)
 8002e8c:	0013      	movs	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	189b      	adds	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	18cb      	adds	r3, r1, r3
 8002e96:	330c      	adds	r3, #12
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	e00b      	b.n	8002eb6 <SCH_Add_Task+0x2a2>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8002e9e:	231f      	movs	r3, #31
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	491d      	ldr	r1, [pc, #116]	; (8002f1c <SCH_Add_Task+0x308>)
 8002ea6:	0013      	movs	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	18cb      	adds	r3, r1, r3
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8002eb6:	251f      	movs	r5, #31
 8002eb8:	197b      	adds	r3, r7, r5
 8002eba:	781c      	ldrb	r4, [r3, #0]
 8002ebc:	f000 f97c 	bl	80031b8 <Get_New_Task_ID>
 8002ec0:	0001      	movs	r1, r0
 8002ec2:	4a16      	ldr	r2, [pc, #88]	; (8002f1c <SCH_Add_Task+0x308>)
 8002ec4:	0023      	movs	r3, r4
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	191b      	adds	r3, r3, r4
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	18d3      	adds	r3, r2, r3
 8002ece:	3310      	adds	r3, #16
 8002ed0:	6019      	str	r1, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 8002ed2:	197b      	adds	r3, r7, r5
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	4911      	ldr	r1, [pc, #68]	; (8002f1c <SCH_Add_Task+0x308>)
 8002ed8:	0013      	movs	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	189b      	adds	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	18cb      	adds	r3, r1, r3
 8002ee2:	3310      	adds	r3, #16
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	e015      	b.n	8002f14 <SCH_Add_Task+0x300>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8002ee8:	211f      	movs	r1, #31
 8002eea:	187b      	adds	r3, r7, r1
 8002eec:	781a      	ldrb	r2, [r3, #0]
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	3201      	adds	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	221f      	movs	r2, #31
 8002ef6:	18bb      	adds	r3, r7, r2
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b27      	cmp	r3, #39	; 0x27
 8002efc:	d800      	bhi.n	8002f00 <SCH_Add_Task+0x2ec>
 8002efe:	e69b      	b.n	8002c38 <SCH_Add_Task+0x24>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 8002f00:	18bb      	adds	r3, r7, r2
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	4905      	ldr	r1, [pc, #20]	; (8002f1c <SCH_Add_Task+0x308>)
 8002f06:	0013      	movs	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	18cb      	adds	r3, r1, r3
 8002f10:	3310      	adds	r3, #16
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b008      	add	sp, #32
 8002f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1c:	200027a4 	.word	0x200027a4

08002f20 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8002f28:	230d      	movs	r3, #13
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d100      	bne.n	8002f38 <SCH_Delete_Task+0x18>
 8002f36:	e109      	b.n	800314c <SCH_Delete_Task+0x22c>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8002f38:	230f      	movs	r3, #15
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e0fe      	b.n	8003140 <SCH_Delete_Task+0x220>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 8002f42:	200f      	movs	r0, #15
 8002f44:	183b      	adds	r3, r7, r0
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	4984      	ldr	r1, [pc, #528]	; (800315c <SCH_Delete_Task+0x23c>)
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	189b      	adds	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	18cb      	adds	r3, r1, r3
 8002f54:	3310      	adds	r3, #16
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d000      	beq.n	8002f60 <SCH_Delete_Task+0x40>
 8002f5e:	e0e9      	b.n	8003134 <SCH_Delete_Task+0x214>
				Return_code = 1;
 8002f60:	230d      	movs	r3, #13
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 8002f68:	183b      	adds	r3, r7, r0
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d030      	beq.n	8002fd2 <SCH_Delete_Task+0xb2>
 8002f70:	183b      	adds	r3, r7, r0
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b26      	cmp	r3, #38	; 0x26
 8002f76:	d82c      	bhi.n	8002fd2 <SCH_Delete_Task+0xb2>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8002f78:	183b      	adds	r3, r7, r0
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	4977      	ldr	r1, [pc, #476]	; (800315c <SCH_Delete_Task+0x23c>)
 8002f80:	0013      	movs	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	189b      	adds	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	585b      	ldr	r3, [r3, r1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d021      	beq.n	8002fd2 <SCH_Delete_Task+0xb2>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 8002f8e:	183b      	adds	r3, r7, r0
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	4971      	ldr	r1, [pc, #452]	; (800315c <SCH_Delete_Task+0x23c>)
 8002f96:	0013      	movs	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	18cb      	adds	r3, r1, r3
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	0004      	movs	r4, r0
 8002fa6:	183b      	adds	r3, r7, r0
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	486c      	ldr	r0, [pc, #432]	; (800315c <SCH_Delete_Task+0x23c>)
 8002fac:	0013      	movs	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	189b      	adds	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	18c3      	adds	r3, r0, r3
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	193a      	adds	r2, r7, r4
 8002fbc:	7812      	ldrb	r2, [r2, #0]
 8002fbe:	3201      	adds	r2, #1
 8002fc0:	18c9      	adds	r1, r1, r3
 8002fc2:	4866      	ldr	r0, [pc, #408]	; (800315c <SCH_Delete_Task+0x23c>)
 8002fc4:	0013      	movs	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	189b      	adds	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	18c3      	adds	r3, r0, r3
 8002fce:	3304      	adds	r3, #4
 8002fd0:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8002fd2:	230e      	movs	r3, #14
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	18ba      	adds	r2, r7, r2
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e06b      	b.n	80030b8 <SCH_Delete_Task+0x198>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8002fe0:	240e      	movs	r4, #14
 8002fe2:	193b      	adds	r3, r7, r4
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	1c59      	adds	r1, r3, #1
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	485b      	ldr	r0, [pc, #364]	; (800315c <SCH_Delete_Task+0x23c>)
 8002fee:	000b      	movs	r3, r1
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	185b      	adds	r3, r3, r1
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	5818      	ldr	r0, [r3, r0]
 8002ff8:	4958      	ldr	r1, [pc, #352]	; (800315c <SCH_Delete_Task+0x23c>)
 8002ffa:	0013      	movs	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	189b      	adds	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	5058      	str	r0, [r3, r1]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 8003004:	193b      	adds	r3, r7, r4
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	1c59      	adds	r1, r3, #1
 800300a:	193b      	adds	r3, r7, r4
 800300c:	781a      	ldrb	r2, [r3, #0]
 800300e:	4853      	ldr	r0, [pc, #332]	; (800315c <SCH_Delete_Task+0x23c>)
 8003010:	000b      	movs	r3, r1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	185b      	adds	r3, r3, r1
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	18c3      	adds	r3, r0, r3
 800301a:	3308      	adds	r3, #8
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	484f      	ldr	r0, [pc, #316]	; (800315c <SCH_Delete_Task+0x23c>)
 8003020:	0013      	movs	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	189b      	adds	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	18c3      	adds	r3, r0, r3
 800302a:	3308      	adds	r3, #8
 800302c:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 800302e:	193b      	adds	r3, r7, r4
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	1c59      	adds	r1, r3, #1
 8003034:	193b      	adds	r3, r7, r4
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	4848      	ldr	r0, [pc, #288]	; (800315c <SCH_Delete_Task+0x23c>)
 800303a:	000b      	movs	r3, r1
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	185b      	adds	r3, r3, r1
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	18c3      	adds	r3, r0, r3
 8003044:	3304      	adds	r3, #4
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	4844      	ldr	r0, [pc, #272]	; (800315c <SCH_Delete_Task+0x23c>)
 800304a:	0013      	movs	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	189b      	adds	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	18c3      	adds	r3, r0, r3
 8003054:	3304      	adds	r3, #4
 8003056:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8003058:	193b      	adds	r3, r7, r4
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	1c59      	adds	r1, r3, #1
 800305e:	193b      	adds	r3, r7, r4
 8003060:	781a      	ldrb	r2, [r3, #0]
 8003062:	483e      	ldr	r0, [pc, #248]	; (800315c <SCH_Delete_Task+0x23c>)
 8003064:	000b      	movs	r3, r1
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	185b      	adds	r3, r3, r1
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	18c3      	adds	r3, r0, r3
 800306e:	330c      	adds	r3, #12
 8003070:	7818      	ldrb	r0, [r3, #0]
 8003072:	493a      	ldr	r1, [pc, #232]	; (800315c <SCH_Delete_Task+0x23c>)
 8003074:	0013      	movs	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	189b      	adds	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	18cb      	adds	r3, r1, r3
 800307e:	330c      	adds	r3, #12
 8003080:	1c02      	adds	r2, r0, #0
 8003082:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8003084:	193b      	adds	r3, r7, r4
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	193b      	adds	r3, r7, r4
 800308c:	781a      	ldrb	r2, [r3, #0]
 800308e:	4833      	ldr	r0, [pc, #204]	; (800315c <SCH_Delete_Task+0x23c>)
 8003090:	000b      	movs	r3, r1
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	185b      	adds	r3, r3, r1
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	18c3      	adds	r3, r0, r3
 800309a:	3310      	adds	r3, #16
 800309c:	6819      	ldr	r1, [r3, #0]
 800309e:	482f      	ldr	r0, [pc, #188]	; (800315c <SCH_Delete_Task+0x23c>)
 80030a0:	0013      	movs	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	18c3      	adds	r3, r0, r3
 80030aa:	3310      	adds	r3, #16
 80030ac:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	193b      	adds	r3, r7, r4
 80030b4:	3201      	adds	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	200e      	movs	r0, #14
 80030ba:	183b      	adds	r3, r7, r0
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b26      	cmp	r3, #38	; 0x26
 80030c0:	d98e      	bls.n	8002fe0 <SCH_Delete_Task+0xc0>
				}
				SCH_tasks_G[j].pTask = 0;
 80030c2:	183b      	adds	r3, r7, r0
 80030c4:	781a      	ldrb	r2, [r3, #0]
 80030c6:	4925      	ldr	r1, [pc, #148]	; (800315c <SCH_Delete_Task+0x23c>)
 80030c8:	0013      	movs	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	189b      	adds	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	2200      	movs	r2, #0
 80030d2:	505a      	str	r2, [r3, r1]
				SCH_tasks_G[j].Period = 0;
 80030d4:	183b      	adds	r3, r7, r0
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	4920      	ldr	r1, [pc, #128]	; (800315c <SCH_Delete_Task+0x23c>)
 80030da:	0013      	movs	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	189b      	adds	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	18cb      	adds	r3, r1, r3
 80030e4:	3308      	adds	r3, #8
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 80030ea:	183b      	adds	r3, r7, r0
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	491b      	ldr	r1, [pc, #108]	; (800315c <SCH_Delete_Task+0x23c>)
 80030f0:	0013      	movs	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	189b      	adds	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	18cb      	adds	r3, r1, r3
 80030fa:	3304      	adds	r3, #4
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8003100:	183b      	adds	r3, r7, r0
 8003102:	781a      	ldrb	r2, [r3, #0]
 8003104:	4915      	ldr	r1, [pc, #84]	; (800315c <SCH_Delete_Task+0x23c>)
 8003106:	0013      	movs	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	189b      	adds	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	18cb      	adds	r3, r1, r3
 8003110:	330c      	adds	r3, #12
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 8003116:	183b      	adds	r3, r7, r0
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	4910      	ldr	r1, [pc, #64]	; (800315c <SCH_Delete_Task+0x23c>)
 800311c:	0013      	movs	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	189b      	adds	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	18cb      	adds	r3, r1, r3
 8003126:	3310      	adds	r3, #16
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
				return Return_code;
 800312c:	230d      	movs	r3, #13
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	e00e      	b.n	8003152 <SCH_Delete_Task+0x232>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8003134:	210f      	movs	r1, #15
 8003136:	187b      	adds	r3, r7, r1
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	187b      	adds	r3, r7, r1
 800313c:	3201      	adds	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	230f      	movs	r3, #15
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b27      	cmp	r3, #39	; 0x27
 8003148:	d800      	bhi.n	800314c <SCH_Delete_Task+0x22c>
 800314a:	e6fa      	b.n	8002f42 <SCH_Delete_Task+0x22>
			}
		}
	}
	return Return_code; // return status
 800314c:	230d      	movs	r3, #13
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	781b      	ldrb	r3, [r3, #0]
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b005      	add	sp, #20
 8003158:	bd90      	pop	{r4, r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	200027a4 	.word	0x200027a4

08003160 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 8003166:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <SCH_Dispatch_Tasks+0x54>)
 8003168:	7b1b      	ldrb	r3, [r3, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01d      	beq.n	80031aa <SCH_Dispatch_Tasks+0x4a>
		(*SCH_tasks_G[0].pTask)(); // Run the task
 800316e:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <SCH_Dispatch_Tasks+0x54>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <SCH_Dispatch_Tasks+0x54>)
 8003176:	2200      	movs	r2, #0
 8003178:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <SCH_Dispatch_Tasks+0x54>)
 800317e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003180:	c313      	stmia	r3!, {r0, r1, r4}
 8003182:	ca03      	ldmia	r2!, {r0, r1}
 8003184:	c303      	stmia	r3!, {r0, r1}
		SCH_Delete_Task(temtask.TaskID);
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	0018      	movs	r0, r3
 800318c:	f7ff fec8 	bl	8002f20 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <SCH_Dispatch_Tasks+0x4a>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	6899      	ldr	r1, [r3, #8]
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	001a      	movs	r2, r3
 80031a6:	f7ff fd35 	bl	8002c14 <SCH_Add_Task>
		}
	}
}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b007      	add	sp, #28
 80031b0:	bd90      	pop	{r4, r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	200027a4 	.word	0x200027a4

080031b8 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	newTaskID++;
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <Get_New_Task_ID+0x2c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <Get_New_Task_ID+0x2c>)
 80031c4:	601a      	str	r2, [r3, #0]
	if(newTaskID == NO_TASK_ID){
 80031c6:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <Get_New_Task_ID+0x2c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <Get_New_Task_ID+0x20>
		newTaskID++;
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <Get_New_Task_ID+0x2c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <Get_New_Task_ID+0x2c>)
 80031d6:	601a      	str	r2, [r3, #0]
	}
	return newTaskID;
 80031d8:	4b02      	ldr	r3, [pc, #8]	; (80031e4 <Get_New_Task_ID+0x2c>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	20002ac4 	.word	0x20002ac4

080031e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_MspInit+0x44>)
 80031f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_MspInit+0x44>)
 80031f4:	2101      	movs	r1, #1
 80031f6:	430a      	orrs	r2, r1
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_MspInit+0x44>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2201      	movs	r2, #1
 8003200:	4013      	ands	r3, r2
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_MspInit+0x44>)
 8003208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <HAL_MspInit+0x44>)
 800320c:	2180      	movs	r1, #128	; 0x80
 800320e:	0549      	lsls	r1, r1, #21
 8003210:	430a      	orrs	r2, r1
 8003212:	63da      	str	r2, [r3, #60]	; 0x3c
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_MspInit+0x44>)
 8003216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	055b      	lsls	r3, r3, #21
 800321c:	4013      	ands	r3, r2
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40021000 	.word	0x40021000

08003230 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b08b      	sub	sp, #44	; 0x2c
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	2414      	movs	r4, #20
 800323a:	193b      	adds	r3, r7, r4
 800323c:	0018      	movs	r0, r3
 800323e:	2314      	movs	r3, #20
 8003240:	001a      	movs	r2, r3
 8003242:	2100      	movs	r1, #0
 8003244:	f004 fb3b 	bl	80078be <memset>
  if(hadc->Instance==ADC1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2d      	ldr	r2, [pc, #180]	; (8003304 <HAL_ADC_MspInit+0xd4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d154      	bne.n	80032fc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <HAL_ADC_MspInit+0xd8>)
 8003254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003256:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <HAL_ADC_MspInit+0xd8>)
 8003258:	2180      	movs	r1, #128	; 0x80
 800325a:	0349      	lsls	r1, r1, #13
 800325c:	430a      	orrs	r2, r1
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <HAL_ADC_MspInit+0xd8>)
 8003262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	035b      	lsls	r3, r3, #13
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326e:	4b26      	ldr	r3, [pc, #152]	; (8003308 <HAL_ADC_MspInit+0xd8>)
 8003270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003272:	4b25      	ldr	r3, [pc, #148]	; (8003308 <HAL_ADC_MspInit+0xd8>)
 8003274:	2101      	movs	r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	635a      	str	r2, [r3, #52]	; 0x34
 800327a:	4b23      	ldr	r3, [pc, #140]	; (8003308 <HAL_ADC_MspInit+0xd8>)
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	2201      	movs	r2, #1
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003286:	193b      	adds	r3, r7, r4
 8003288:	2203      	movs	r2, #3
 800328a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800328c:	193b      	adds	r3, r7, r4
 800328e:	2203      	movs	r2, #3
 8003290:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	193b      	adds	r3, r7, r4
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003298:	193a      	adds	r2, r7, r4
 800329a:	23a0      	movs	r3, #160	; 0xa0
 800329c:	05db      	lsls	r3, r3, #23
 800329e:	0011      	movs	r1, r2
 80032a0:	0018      	movs	r0, r3
 80032a2:	f001 f98d 	bl	80045c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_ADC_MspInit+0xe0>)
 80032aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032ae:	2205      	movs	r2, #5
 80032b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032c6:	2280      	movs	r2, #128	; 0x80
 80032c8:	0052      	lsls	r2, r2, #1
 80032ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	00d2      	lsls	r2, r2, #3
 80032d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032dc:	2200      	movs	r2, #0
 80032de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032e0:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 ff14 	bl	8004110 <HAL_DMA_Init>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80032ec:	f7ff fc66 	bl	8002bbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a06      	ldr	r2, [pc, #24]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032f4:	651a      	str	r2, [r3, #80]	; 0x50
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_ADC_MspInit+0xdc>)
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b00b      	add	sp, #44	; 0x2c
 8003302:	bd90      	pop	{r4, r7, pc}
 8003304:	40012400 	.word	0x40012400
 8003308:	40021000 	.word	0x40021000
 800330c:	20000558 	.word	0x20000558
 8003310:	40020008 	.word	0x40020008

08003314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0d      	ldr	r2, [pc, #52]	; (8003358 <HAL_TIM_Base_MspInit+0x44>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d113      	bne.n	800334e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003326:	4b0d      	ldr	r3, [pc, #52]	; (800335c <HAL_TIM_Base_MspInit+0x48>)
 8003328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <HAL_TIM_Base_MspInit+0x48>)
 800332c:	2102      	movs	r1, #2
 800332e:	430a      	orrs	r2, r1
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_TIM_Base_MspInit+0x48>)
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	2202      	movs	r2, #2
 8003338:	4013      	ands	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800333e:	2200      	movs	r2, #0
 8003340:	2100      	movs	r1, #0
 8003342:	2010      	movs	r0, #16
 8003344:	f000 feb2 	bl	80040ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003348:	2010      	movs	r0, #16
 800334a:	f000 fec4 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	b004      	add	sp, #16
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	40000400 	.word	0x40000400
 800335c:	40021000 	.word	0x40021000

08003360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b08b      	sub	sp, #44	; 0x2c
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	2414      	movs	r4, #20
 800336a:	193b      	adds	r3, r7, r4
 800336c:	0018      	movs	r0, r3
 800336e:	2314      	movs	r3, #20
 8003370:	001a      	movs	r2, r3
 8003372:	2100      	movs	r1, #0
 8003374:	f004 faa3 	bl	80078be <memset>
  if(huart->Instance==USART3)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <HAL_UART_MspInit+0x9c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d138      	bne.n	80033f4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003382:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <HAL_UART_MspInit+0xa0>)
 8003384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_UART_MspInit+0xa0>)
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	02c9      	lsls	r1, r1, #11
 800338c:	430a      	orrs	r2, r1
 800338e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_UART_MspInit+0xa0>)
 8003392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	02db      	lsls	r3, r3, #11
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <HAL_UART_MspInit+0xa0>)
 80033a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a2:	4b17      	ldr	r3, [pc, #92]	; (8003400 <HAL_UART_MspInit+0xa0>)
 80033a4:	2108      	movs	r1, #8
 80033a6:	430a      	orrs	r2, r1
 80033a8:	635a      	str	r2, [r3, #52]	; 0x34
 80033aa:	4b15      	ldr	r3, [pc, #84]	; (8003400 <HAL_UART_MspInit+0xa0>)
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	2208      	movs	r2, #8
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033b6:	193b      	adds	r3, r7, r4
 80033b8:	22c0      	movs	r2, #192	; 0xc0
 80033ba:	0092      	lsls	r2, r2, #2
 80033bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	0021      	movs	r1, r4
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	2202      	movs	r2, #2
 80033c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	187b      	adds	r3, r7, r1
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	2200      	movs	r2, #0
 80033d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	2200      	movs	r2, #0
 80033d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033d8:	187b      	adds	r3, r7, r1
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <HAL_UART_MspInit+0xa4>)
 80033dc:	0019      	movs	r1, r3
 80033de:	0010      	movs	r0, r2
 80033e0:	f001 f8ee 	bl	80045c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80033e4:	2200      	movs	r2, #0
 80033e6:	2100      	movs	r1, #0
 80033e8:	201d      	movs	r0, #29
 80033ea:	f000 fe5f 	bl	80040ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80033ee:	201d      	movs	r0, #29
 80033f0:	f000 fe71 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b00b      	add	sp, #44	; 0x2c
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	40004800 	.word	0x40004800
 8003400:	40021000 	.word	0x40021000
 8003404:	50000c00 	.word	0x50000c00

08003408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800340c:	e7fe      	b.n	800340c <NMI_Handler+0x4>

0800340e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003412:	e7fe      	b.n	8003412 <HardFault_Handler+0x4>

08003414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800342c:	f000 f8f8 	bl	8003620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <DMA1_Channel1_IRQHandler+0x14>)
 800343e:	0018      	movs	r0, r3
 8003440:	f000 ffbc 	bl	80043bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	20000558 	.word	0x20000558

08003450 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <TIM3_IRQHandler+0x14>)
 8003456:	0018      	movs	r0, r3
 8003458:	f002 f804 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	200000ac 	.word	0x200000ac

08003468 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <USART3_4_IRQHandler+0x14>)
 800346e:	0018      	movs	r0, r3
 8003470:	f002 fcfc 	bl	8005e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	20000220 	.word	0x20000220

08003480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003488:	4a14      	ldr	r2, [pc, #80]	; (80034dc <_sbrk+0x5c>)
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <_sbrk+0x60>)
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <_sbrk+0x64>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <_sbrk+0x64>)
 800349e:	4a12      	ldr	r2, [pc, #72]	; (80034e8 <_sbrk+0x68>)
 80034a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <_sbrk+0x64>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	18d3      	adds	r3, r2, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d207      	bcs.n	80034c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034b0:	f004 f9d2 	bl	8007858 <__errno>
 80034b4:	0003      	movs	r3, r0
 80034b6:	220c      	movs	r2, #12
 80034b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	425b      	negs	r3, r3
 80034be:	e009      	b.n	80034d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <_sbrk+0x64>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <_sbrk+0x64>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	18d2      	adds	r2, r2, r3
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <_sbrk+0x64>)
 80034d0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b006      	add	sp, #24
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20009000 	.word	0x20009000
 80034e0:	00000400 	.word	0x00000400
 80034e4:	20002acc 	.word	0x20002acc
 80034e8:	20002ae8 	.word	0x20002ae8

080034ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034f8:	480d      	ldr	r0, [pc, #52]	; (8003530 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80034fc:	f7ff fff6 	bl	80034ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003500:	480c      	ldr	r0, [pc, #48]	; (8003534 <LoopForever+0x6>)
  ldr r1, =_edata
 8003502:	490d      	ldr	r1, [pc, #52]	; (8003538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003504:	4a0d      	ldr	r2, [pc, #52]	; (800353c <LoopForever+0xe>)
  movs r3, #0
 8003506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003508:	e002      	b.n	8003510 <LoopCopyDataInit>

0800350a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800350c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350e:	3304      	adds	r3, #4

08003510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003514:	d3f9      	bcc.n	800350a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003518:	4c0a      	ldr	r4, [pc, #40]	; (8003544 <LoopForever+0x16>)
  movs r3, #0
 800351a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800351c:	e001      	b.n	8003522 <LoopFillZerobss>

0800351e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003520:	3204      	adds	r2, #4

08003522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003524:	d3fb      	bcc.n	800351e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003526:	f004 f99d 	bl	8007864 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800352a:	f7ff fae8 	bl	8002afe <main>

0800352e <LoopForever>:

LoopForever:
  b LoopForever
 800352e:	e7fe      	b.n	800352e <LoopForever>
  ldr   r0, =_estack
 8003530:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003538:	200003e8 	.word	0x200003e8
  ldr r2, =_sidata
 800353c:	08008558 	.word	0x08008558
  ldr r2, =_sbss
 8003540:	200003e8 	.word	0x200003e8
  ldr r4, =_ebss
 8003544:	20002ae4 	.word	0x20002ae4

08003548 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003548:	e7fe      	b.n	8003548 <ADC1_IRQHandler>
	...

0800354c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003552:	1dfb      	adds	r3, r7, #7
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_Init+0x3c>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <HAL_Init+0x3c>)
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	0049      	lsls	r1, r1, #1
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003566:	2003      	movs	r0, #3
 8003568:	f000 f810 	bl	800358c <HAL_InitTick>
 800356c:	1e03      	subs	r3, r0, #0
 800356e:	d003      	beq.n	8003578 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003570:	1dfb      	adds	r3, r7, #7
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	e001      	b.n	800357c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003578:	f7ff fe36 	bl	80031e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800357c:	1dfb      	adds	r3, r7, #7
 800357e:	781b      	ldrb	r3, [r3, #0]
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40022000 	.word	0x40022000

0800358c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003594:	230f      	movs	r3, #15
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_InitTick+0x88>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d02b      	beq.n	80035fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80035a4:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <HAL_InitTick+0x8c>)
 80035a6:	681c      	ldr	r4, [r3, #0]
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <HAL_InitTick+0x88>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	0019      	movs	r1, r3
 80035ae:	23fa      	movs	r3, #250	; 0xfa
 80035b0:	0098      	lsls	r0, r3, #2
 80035b2:	f7fc fdaf 	bl	8000114 <__udivsi3>
 80035b6:	0003      	movs	r3, r0
 80035b8:	0019      	movs	r1, r3
 80035ba:	0020      	movs	r0, r4
 80035bc:	f7fc fdaa 	bl	8000114 <__udivsi3>
 80035c0:	0003      	movs	r3, r0
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 fd97 	bl	80040f6 <HAL_SYSTICK_Config>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d112      	bne.n	80035f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d80a      	bhi.n	80035e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	2301      	movs	r3, #1
 80035d6:	425b      	negs	r3, r3
 80035d8:	2200      	movs	r2, #0
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 fd66 	bl	80040ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_InitTick+0x90>)
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e00d      	b.n	8003604 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80035e8:	230f      	movs	r3, #15
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e008      	b.n	8003604 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035f2:	230f      	movs	r3, #15
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	e003      	b.n	8003604 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035fc:	230f      	movs	r3, #15
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003604:	230f      	movs	r3, #15
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	781b      	ldrb	r3, [r3, #0]
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	b005      	add	sp, #20
 8003610:	bd90      	pop	{r4, r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20000380 	.word	0x20000380
 8003618:	20000378 	.word	0x20000378
 800361c:	2000037c 	.word	0x2000037c

08003620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_IncTick+0x1c>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	001a      	movs	r2, r3
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_IncTick+0x20>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	18d2      	adds	r2, r2, r3
 8003630:	4b03      	ldr	r3, [pc, #12]	; (8003640 <HAL_IncTick+0x20>)
 8003632:	601a      	str	r2, [r3, #0]
}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	20000380 	.word	0x20000380
 8003640:	20002ad0 	.word	0x20002ad0

08003644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  return uwTick;
 8003648:	4b02      	ldr	r3, [pc, #8]	; (8003654 <HAL_GetTick+0x10>)
 800364a:	681b      	ldr	r3, [r3, #0]
}
 800364c:	0018      	movs	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	20002ad0 	.word	0x20002ad0

08003658 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a05      	ldr	r2, [pc, #20]	; (800367c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003668:	401a      	ands	r2, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	601a      	str	r2, [r3, #0]
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	b002      	add	sp, #8
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	fe3fffff 	.word	0xfe3fffff

08003680 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	23e0      	movs	r3, #224	; 0xe0
 800368e:	045b      	lsls	r3, r3, #17
 8003690:	4013      	ands	r3, r2
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b002      	add	sp, #8
 8003698:	bd80      	pop	{r7, pc}

0800369a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	2104      	movs	r1, #4
 80036ae:	400a      	ands	r2, r1
 80036b0:	2107      	movs	r1, #7
 80036b2:	4091      	lsls	r1, r2
 80036b4:	000a      	movs	r2, r1
 80036b6:	43d2      	mvns	r2, r2
 80036b8:	401a      	ands	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2104      	movs	r1, #4
 80036be:	400b      	ands	r3, r1
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4099      	lsls	r1, r3
 80036c4:	000b      	movs	r3, r1
 80036c6:	431a      	orrs	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b004      	add	sp, #16
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	2104      	movs	r1, #4
 80036e6:	400a      	ands	r2, r1
 80036e8:	2107      	movs	r1, #7
 80036ea:	4091      	lsls	r1, r2
 80036ec:	000a      	movs	r2, r1
 80036ee:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2104      	movs	r1, #4
 80036f4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80036f6:	40da      	lsrs	r2, r3
 80036f8:	0013      	movs	r3, r2
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b002      	add	sp, #8
 8003700:	bd80      	pop	{r7, pc}

08003702 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	211f      	movs	r1, #31
 8003716:	400a      	ands	r2, r1
 8003718:	210f      	movs	r1, #15
 800371a:	4091      	lsls	r1, r2
 800371c:	000a      	movs	r2, r1
 800371e:	43d2      	mvns	r2, r2
 8003720:	401a      	ands	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	210f      	movs	r1, #15
 8003728:	4019      	ands	r1, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	201f      	movs	r0, #31
 800372e:	4003      	ands	r3, r0
 8003730:	4099      	lsls	r1, r3
 8003732:	000b      	movs	r3, r1
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}

08003742 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	035b      	lsls	r3, r3, #13
 8003754:	0b5b      	lsrs	r3, r3, #13
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800375c:	46c0      	nop			; (mov r8, r8)
 800375e:	46bd      	mov	sp, r7
 8003760:	b002      	add	sp, #8
 8003762:	bd80      	pop	{r7, pc}

08003764 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	0352      	lsls	r2, r2, #13
 8003776:	0b52      	lsrs	r2, r2, #13
 8003778:	43d2      	mvns	r2, r2
 800377a:	401a      	ands	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}

08003788 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	0212      	lsls	r2, r2, #8
 800379c:	43d2      	mvns	r2, r2
 800379e:	401a      	ands	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	400b      	ands	r3, r1
 80037a8:	4904      	ldr	r1, [pc, #16]	; (80037bc <LL_ADC_SetChannelSamplingTime+0x34>)
 80037aa:	400b      	ands	r3, r1
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b004      	add	sp, #16
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	07ffff00 	.word	0x07ffff00

080037c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	0552      	lsls	r2, r2, #21
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	6fffffe8 	.word	0x6fffffe8

080037e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	055b      	lsls	r3, r3, #21
 80037f8:	401a      	ands	r2, r3
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	055b      	lsls	r3, r3, #21
 80037fe:	429a      	cmp	r2, r3
 8003800:	d101      	bne.n	8003806 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003806:	2300      	movs	r3, #0
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}

08003810 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2201      	movs	r2, #1
 800381e:	4013      	ands	r3, r2
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <LL_ADC_IsEnabled+0x18>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <LL_ADC_IsEnabled+0x1a>
 8003828:	2300      	movs	r3, #0
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}

08003832 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2204      	movs	r2, #4
 8003840:	4013      	ands	r3, r2
 8003842:	2b04      	cmp	r3, #4
 8003844:	d101      	bne.n	800384a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800384a:	2300      	movs	r3, #0
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	b002      	add	sp, #8
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800385c:	231f      	movs	r3, #31
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003864:	2300      	movs	r3, #0
 8003866:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e17f      	b.n	8003b7a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0018      	movs	r0, r3
 8003886:	f7ff fcd3 	bl	8003230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2254      	movs	r2, #84	; 0x54
 8003894:	2100      	movs	r1, #0
 8003896:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	0018      	movs	r0, r3
 800389e:	f7ff ffa3 	bl	80037e8 <LL_ADC_IsInternalRegulatorEnabled>
 80038a2:	1e03      	subs	r3, r0, #0
 80038a4:	d115      	bne.n	80038d2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f7ff ff88 	bl	80037c0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038b0:	4bb4      	ldr	r3, [pc, #720]	; (8003b84 <HAL_ADC_Init+0x330>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	49b4      	ldr	r1, [pc, #720]	; (8003b88 <HAL_ADC_Init+0x334>)
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7fc fc2c 	bl	8000114 <__udivsi3>
 80038bc:	0003      	movs	r3, r0
 80038be:	3301      	adds	r3, #1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80038c4:	e002      	b.n	80038cc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f9      	bne.n	80038c6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	0018      	movs	r0, r3
 80038d8:	f7ff ff86 	bl	80037e8 <LL_ADC_IsInternalRegulatorEnabled>
 80038dc:	1e03      	subs	r3, r0, #0
 80038de:	d10f      	bne.n	8003900 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	2210      	movs	r2, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	2201      	movs	r2, #1
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038f8:	231f      	movs	r3, #31
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0018      	movs	r0, r3
 8003906:	f7ff ff94 	bl	8003832 <LL_ADC_REG_IsConversionOngoing>
 800390a:	0003      	movs	r3, r0
 800390c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003912:	2210      	movs	r2, #16
 8003914:	4013      	ands	r3, r2
 8003916:	d000      	beq.n	800391a <HAL_ADC_Init+0xc6>
 8003918:	e122      	b.n	8003b60 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d000      	beq.n	8003922 <HAL_ADC_Init+0xce>
 8003920:	e11e      	b.n	8003b60 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	4a99      	ldr	r2, [pc, #612]	; (8003b8c <HAL_ADC_Init+0x338>)
 8003928:	4013      	ands	r3, r2
 800392a:	2202      	movs	r2, #2
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	0018      	movs	r0, r3
 8003938:	f7ff ff6a 	bl	8003810 <LL_ADC_IsEnabled>
 800393c:	1e03      	subs	r3, r0, #0
 800393e:	d000      	beq.n	8003942 <HAL_ADC_Init+0xee>
 8003940:	e0ad      	b.n	8003a9e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7e1b      	ldrb	r3, [r3, #24]
 800394a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800394c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7e5b      	ldrb	r3, [r3, #25]
 8003952:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003954:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7e9b      	ldrb	r3, [r3, #26]
 800395a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800395c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_ADC_Init+0x118>
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	015b      	lsls	r3, r3, #5
 800396a:	e000      	b.n	800396e <HAL_ADC_Init+0x11a>
 800396c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800396e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003974:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	da04      	bge.n	8003988 <HAL_ADC_Init+0x134>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	e001      	b.n	800398c <HAL_ADC_Init+0x138>
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800398c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	5c5b      	ldrb	r3, [r3, r1]
 8003994:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003996:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	5c9b      	ldrb	r3, [r3, r2]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d115      	bne.n	80039d4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	7e9b      	ldrb	r3, [r3, #26]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d105      	bne.n	80039bc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2280      	movs	r2, #128	; 0x80
 80039b4:	0252      	lsls	r2, r2, #9
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e00b      	b.n	80039d4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	2220      	movs	r2, #32
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	2201      	movs	r2, #1
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e0:	23e0      	movs	r3, #224	; 0xe0
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80039ea:	4313      	orrs	r3, r2
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4a65      	ldr	r2, [pc, #404]	; (8003b90 <HAL_ADC_Init+0x33c>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	0f9b      	lsrs	r3, r3, #30
 8003a0e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a14:	4313      	orrs	r3, r2
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	223c      	movs	r2, #60	; 0x3c
 8003a20:	5c9b      	ldrb	r3, [r3, r2]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d111      	bne.n	8003a4a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	0f9b      	lsrs	r3, r3, #30
 8003a2c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a32:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003a38:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003a3e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	2201      	movs	r2, #1
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	4a50      	ldr	r2, [pc, #320]	; (8003b94 <HAL_ADC_Init+0x340>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	0019      	movs	r1, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	23c0      	movs	r3, #192	; 0xc0
 8003a66:	061b      	lsls	r3, r3, #24
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d018      	beq.n	8003a9e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	05db      	lsls	r3, r3, #23
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d012      	beq.n	8003a9e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	061b      	lsls	r3, r3, #24
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d00c      	beq.n	8003a9e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003a84:	4b44      	ldr	r3, [pc, #272]	; (8003b98 <HAL_ADC_Init+0x344>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a44      	ldr	r2, [pc, #272]	; (8003b9c <HAL_ADC_Init+0x348>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	23f0      	movs	r3, #240	; 0xf0
 8003a94:	039b      	lsls	r3, r3, #14
 8003a96:	401a      	ands	r2, r3
 8003a98:	4b3f      	ldr	r3, [pc, #252]	; (8003b98 <HAL_ADC_Init+0x344>)
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	001a      	movs	r2, r3
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	f7ff fdf6 	bl	800369a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	493a      	ldr	r1, [pc, #232]	; (8003ba0 <HAL_ADC_Init+0x34c>)
 8003ab8:	001a      	movs	r2, r3
 8003aba:	f7ff fdee 	bl	800369a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2110      	movs	r1, #16
 8003ad2:	4249      	negs	r1, r1
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad8:	e018      	b.n	8003b0c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	039b      	lsls	r3, r3, #14
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d112      	bne.n	8003b0c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	221c      	movs	r2, #28
 8003af6:	4013      	ands	r3, r2
 8003af8:	2210      	movs	r2, #16
 8003afa:	4252      	negs	r2, r2
 8003afc:	409a      	lsls	r2, r3
 8003afe:	0011      	movs	r1, r2
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2100      	movs	r1, #0
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7ff fdde 	bl	80036d4 <LL_ADC_GetSamplingTimeCommonChannels>
 8003b18:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d10b      	bne.n	8003b3a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	4393      	bics	r3, r2
 8003b30:	2201      	movs	r2, #1
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b38:	e01c      	b.n	8003b74 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	2212      	movs	r2, #18
 8003b40:	4393      	bics	r3, r2
 8003b42:	2210      	movs	r2, #16
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003b56:	231f      	movs	r3, #31
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b5e:	e009      	b.n	8003b74 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	2210      	movs	r2, #16
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b6c:	231f      	movs	r3, #31
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003b74:	231f      	movs	r3, #31
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	781b      	ldrb	r3, [r3, #0]
}
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b008      	add	sp, #32
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	20000378 	.word	0x20000378
 8003b88:	00030d40 	.word	0x00030d40
 8003b8c:	fffffefd 	.word	0xfffffefd
 8003b90:	fffe0201 	.word	0xfffe0201
 8003b94:	1ffffc02 	.word	0x1ffffc02
 8003b98:	40012708 	.word	0x40012708
 8003b9c:	ffc3ffff 	.word	0xffc3ffff
 8003ba0:	07ffff04 	.word	0x07ffff04

08003ba4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bae:	2317      	movs	r3, #23
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2254      	movs	r2, #84	; 0x54
 8003bbe:	5c9b      	ldrb	r3, [r3, r2]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x24>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e1c0      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x3a6>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2254      	movs	r2, #84	; 0x54
 8003bcc:	2101      	movs	r1, #1
 8003bce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7ff fe2c 	bl	8003832 <LL_ADC_REG_IsConversionOngoing>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d000      	beq.n	8003be0 <HAL_ADC_ConfigChannel+0x3c>
 8003bde:	e1a3      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d100      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x46>
 8003be8:	e143      	b.n	8003e72 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d004      	beq.n	8003c00 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bfa:	4ac1      	ldr	r2, [pc, #772]	; (8003f00 <HAL_ADC_ConfigChannel+0x35c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d108      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0019      	movs	r1, r3
 8003c0a:	0010      	movs	r0, r2
 8003c0c:	f7ff fd99 	bl	8003742 <LL_ADC_REG_SetSequencerChAdd>
 8003c10:	e0c9      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	211f      	movs	r1, #31
 8003c1c:	400b      	ands	r3, r1
 8003c1e:	210f      	movs	r1, #15
 8003c20:	4099      	lsls	r1, r3
 8003c22:	000b      	movs	r3, r1
 8003c24:	43db      	mvns	r3, r3
 8003c26:	4013      	ands	r3, r2
 8003c28:	0019      	movs	r1, r3
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	035b      	lsls	r3, r3, #13
 8003c30:	0b5b      	lsrs	r3, r3, #13
 8003c32:	d105      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x9c>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	0e9b      	lsrs	r3, r3, #26
 8003c3a:	221f      	movs	r2, #31
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	e098      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	4013      	ands	r3, r2
 8003c48:	d000      	beq.n	8003c4c <HAL_ADC_ConfigChannel+0xa8>
 8003c4a:	e091      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x1cc>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2202      	movs	r2, #2
 8003c52:	4013      	ands	r3, r2
 8003c54:	d000      	beq.n	8003c58 <HAL_ADC_ConfigChannel+0xb4>
 8003c56:	e089      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x1c8>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d000      	beq.n	8003c64 <HAL_ADC_ConfigChannel+0xc0>
 8003c62:	e081      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x1c4>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d000      	beq.n	8003c70 <HAL_ADC_ConfigChannel+0xcc>
 8003c6e:	e079      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x1c0>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2210      	movs	r2, #16
 8003c76:	4013      	ands	r3, r2
 8003c78:	d000      	beq.n	8003c7c <HAL_ADC_ConfigChannel+0xd8>
 8003c7a:	e071      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x1bc>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2220      	movs	r2, #32
 8003c82:	4013      	ands	r3, r2
 8003c84:	d000      	beq.n	8003c88 <HAL_ADC_ConfigChannel+0xe4>
 8003c86:	e069      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x1b8>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2240      	movs	r2, #64	; 0x40
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d000      	beq.n	8003c94 <HAL_ADC_ConfigChannel+0xf0>
 8003c92:	e061      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x1b4>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2280      	movs	r2, #128	; 0x80
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d000      	beq.n	8003ca0 <HAL_ADC_ConfigChannel+0xfc>
 8003c9e:	e059      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x1b0>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d151      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x1ac>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d149      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x1a8>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d141      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x1a4>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d139      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x1a0>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	015b      	lsls	r3, r3, #5
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d131      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x19c>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	019b      	lsls	r3, r3, #6
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d129      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x198>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	01db      	lsls	r3, r3, #7
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d121      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x194>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d119      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x190>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	025b      	lsls	r3, r3, #9
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d111      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x18c>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	029b      	lsls	r3, r3, #10
 8003d14:	4013      	ands	r3, r2
 8003d16:	d109      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x188>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	02db      	lsls	r3, r3, #11
 8003d20:	4013      	ands	r3, r2
 8003d22:	d001      	beq.n	8003d28 <HAL_ADC_ConfigChannel+0x184>
 8003d24:	2312      	movs	r3, #18
 8003d26:	e024      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e022      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d2c:	2311      	movs	r3, #17
 8003d2e:	e020      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d30:	2310      	movs	r3, #16
 8003d32:	e01e      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d34:	230f      	movs	r3, #15
 8003d36:	e01c      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d38:	230e      	movs	r3, #14
 8003d3a:	e01a      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d3c:	230d      	movs	r3, #13
 8003d3e:	e018      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d40:	230c      	movs	r3, #12
 8003d42:	e016      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d44:	230b      	movs	r3, #11
 8003d46:	e014      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d48:	230a      	movs	r3, #10
 8003d4a:	e012      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d4c:	2309      	movs	r3, #9
 8003d4e:	e010      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d50:	2308      	movs	r3, #8
 8003d52:	e00e      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d54:	2307      	movs	r3, #7
 8003d56:	e00c      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d58:	2306      	movs	r3, #6
 8003d5a:	e00a      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d5c:	2305      	movs	r3, #5
 8003d5e:	e008      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d60:	2304      	movs	r3, #4
 8003d62:	e006      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d64:	2303      	movs	r3, #3
 8003d66:	e004      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e002      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1ce>
 8003d70:	2300      	movs	r3, #0
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	6852      	ldr	r2, [r2, #4]
 8003d76:	201f      	movs	r0, #31
 8003d78:	4002      	ands	r2, r0
 8003d7a:	4093      	lsls	r3, r2
 8003d7c:	000a      	movs	r2, r1
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d808      	bhi.n	8003da6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	001a      	movs	r2, r3
 8003da2:	f7ff fcae 	bl	8003702 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6819      	ldr	r1, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	001a      	movs	r2, r3
 8003db4:	f7ff fce8 	bl	8003788 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	db00      	blt.n	8003dc2 <HAL_ADC_ConfigChannel+0x21e>
 8003dc0:	e0bc      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dc2:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <HAL_ADC_ConfigChannel+0x360>)
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff fc5b 	bl	8003680 <LL_ADC_GetCommonPathInternalCh>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a4d      	ldr	r2, [pc, #308]	; (8003f08 <HAL_ADC_ConfigChannel+0x364>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d122      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003de0:	d11d      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	0412      	lsls	r2, r2, #16
 8003de8:	4313      	orrs	r3, r2
 8003dea:	4a46      	ldr	r2, [pc, #280]	; (8003f04 <HAL_ADC_ConfigChannel+0x360>)
 8003dec:	0019      	movs	r1, r3
 8003dee:	0010      	movs	r0, r2
 8003df0:	f7ff fc32 	bl	8003658 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003df4:	4b45      	ldr	r3, [pc, #276]	; (8003f0c <HAL_ADC_ConfigChannel+0x368>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4945      	ldr	r1, [pc, #276]	; (8003f10 <HAL_ADC_ConfigChannel+0x36c>)
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7fc f98a 	bl	8000114 <__udivsi3>
 8003e00:	0003      	movs	r3, r0
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	0013      	movs	r3, r2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	189b      	adds	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e0e:	e002      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f9      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e1c:	e08e      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a3c      	ldr	r2, [pc, #240]	; (8003f14 <HAL_ADC_ConfigChannel+0x370>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d10e      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	045b      	lsls	r3, r3, #17
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d109      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	0452      	lsls	r2, r2, #17
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	4a32      	ldr	r2, [pc, #200]	; (8003f04 <HAL_ADC_ConfigChannel+0x360>)
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	0010      	movs	r0, r2
 8003e40:	f7ff fc0a 	bl	8003658 <LL_ADC_SetCommonPathInternalCh>
 8003e44:	e07a      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a33      	ldr	r2, [pc, #204]	; (8003f18 <HAL_ADC_ConfigChannel+0x374>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d000      	beq.n	8003e52 <HAL_ADC_ConfigChannel+0x2ae>
 8003e50:	e074      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	03db      	lsls	r3, r3, #15
 8003e58:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e5a:	d000      	beq.n	8003e5e <HAL_ADC_ConfigChannel+0x2ba>
 8003e5c:	e06e      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	03d2      	lsls	r2, r2, #15
 8003e64:	4313      	orrs	r3, r2
 8003e66:	4a27      	ldr	r2, [pc, #156]	; (8003f04 <HAL_ADC_ConfigChannel+0x360>)
 8003e68:	0019      	movs	r1, r3
 8003e6a:	0010      	movs	r0, r2
 8003e6c:	f7ff fbf4 	bl	8003658 <LL_ADC_SetCommonPathInternalCh>
 8003e70:	e064      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d004      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e82:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <HAL_ADC_ConfigChannel+0x35c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d107      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	0019      	movs	r1, r3
 8003e92:	0010      	movs	r0, r2
 8003e94:	f7ff fc66 	bl	8003764 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	da4d      	bge.n	8003f3c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ea0:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <HAL_ADC_ConfigChannel+0x360>)
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f7ff fbec 	bl	8003680 <LL_ADC_GetCommonPathInternalCh>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <HAL_ADC_ConfigChannel+0x364>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d108      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4a18      	ldr	r2, [pc, #96]	; (8003f1c <HAL_ADC_ConfigChannel+0x378>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	4a11      	ldr	r2, [pc, #68]	; (8003f04 <HAL_ADC_ConfigChannel+0x360>)
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	0010      	movs	r0, r2
 8003ec2:	f7ff fbc9 	bl	8003658 <LL_ADC_SetCommonPathInternalCh>
 8003ec6:	e039      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a11      	ldr	r2, [pc, #68]	; (8003f14 <HAL_ADC_ConfigChannel+0x370>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d108      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <HAL_ADC_ConfigChannel+0x37c>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <HAL_ADC_ConfigChannel+0x360>)
 8003eda:	0019      	movs	r1, r3
 8003edc:	0010      	movs	r0, r2
 8003ede:	f7ff fbbb 	bl	8003658 <LL_ADC_SetCommonPathInternalCh>
 8003ee2:	e02b      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <HAL_ADC_ConfigChannel+0x374>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d126      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4a0c      	ldr	r2, [pc, #48]	; (8003f24 <HAL_ADC_ConfigChannel+0x380>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	4a03      	ldr	r2, [pc, #12]	; (8003f04 <HAL_ADC_ConfigChannel+0x360>)
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	0010      	movs	r0, r2
 8003efa:	f7ff fbad 	bl	8003658 <LL_ADC_SetCommonPathInternalCh>
 8003efe:	e01d      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x398>
 8003f00:	80000004 	.word	0x80000004
 8003f04:	40012708 	.word	0x40012708
 8003f08:	b0001000 	.word	0xb0001000
 8003f0c:	20000378 	.word	0x20000378
 8003f10:	00030d40 	.word	0x00030d40
 8003f14:	b8004000 	.word	0xb8004000
 8003f18:	b4002000 	.word	0xb4002000
 8003f1c:	ff7fffff 	.word	0xff7fffff
 8003f20:	feffffff 	.word	0xfeffffff
 8003f24:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f34:	2317      	movs	r3, #23
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2254      	movs	r2, #84	; 0x54
 8003f40:	2100      	movs	r1, #0
 8003f42:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003f44:	2317      	movs	r3, #23
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b006      	add	sp, #24
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)

08003f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	1dfb      	adds	r3, r7, #7
 8003f5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f60:	1dfb      	adds	r3, r7, #7
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b7f      	cmp	r3, #127	; 0x7f
 8003f66:	d809      	bhi.n	8003f7c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f68:	1dfb      	adds	r3, r7, #7
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	231f      	movs	r3, #31
 8003f70:	401a      	ands	r2, r3
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <__NVIC_EnableIRQ+0x30>)
 8003f74:	2101      	movs	r1, #1
 8003f76:	4091      	lsls	r1, r2
 8003f78:	000a      	movs	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b002      	add	sp, #8
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	e000e100 	.word	0xe000e100

08003f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	0002      	movs	r2, r0
 8003f90:	6039      	str	r1, [r7, #0]
 8003f92:	1dfb      	adds	r3, r7, #7
 8003f94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f96:	1dfb      	adds	r3, r7, #7
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f9c:	d828      	bhi.n	8003ff0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f9e:	4a2f      	ldr	r2, [pc, #188]	; (800405c <__NVIC_SetPriority+0xd4>)
 8003fa0:	1dfb      	adds	r3, r7, #7
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b25b      	sxtb	r3, r3
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	33c0      	adds	r3, #192	; 0xc0
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	589b      	ldr	r3, [r3, r2]
 8003fae:	1dfa      	adds	r2, r7, #7
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	0011      	movs	r1, r2
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	00d2      	lsls	r2, r2, #3
 8003fba:	21ff      	movs	r1, #255	; 0xff
 8003fbc:	4091      	lsls	r1, r2
 8003fbe:	000a      	movs	r2, r1
 8003fc0:	43d2      	mvns	r2, r2
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	22ff      	movs	r2, #255	; 0xff
 8003fcc:	401a      	ands	r2, r3
 8003fce:	1dfb      	adds	r3, r7, #7
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	4003      	ands	r3, r0
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fdc:	481f      	ldr	r0, [pc, #124]	; (800405c <__NVIC_SetPriority+0xd4>)
 8003fde:	1dfb      	adds	r3, r7, #7
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	b25b      	sxtb	r3, r3
 8003fe4:	089b      	lsrs	r3, r3, #2
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	33c0      	adds	r3, #192	; 0xc0
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fee:	e031      	b.n	8004054 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ff0:	4a1b      	ldr	r2, [pc, #108]	; (8004060 <__NVIC_SetPriority+0xd8>)
 8003ff2:	1dfb      	adds	r3, r7, #7
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	230f      	movs	r3, #15
 8003ffa:	400b      	ands	r3, r1
 8003ffc:	3b08      	subs	r3, #8
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	3306      	adds	r3, #6
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	18d3      	adds	r3, r2, r3
 8004006:	3304      	adds	r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	1dfa      	adds	r2, r7, #7
 800400c:	7812      	ldrb	r2, [r2, #0]
 800400e:	0011      	movs	r1, r2
 8004010:	2203      	movs	r2, #3
 8004012:	400a      	ands	r2, r1
 8004014:	00d2      	lsls	r2, r2, #3
 8004016:	21ff      	movs	r1, #255	; 0xff
 8004018:	4091      	lsls	r1, r2
 800401a:	000a      	movs	r2, r1
 800401c:	43d2      	mvns	r2, r2
 800401e:	401a      	ands	r2, r3
 8004020:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	019b      	lsls	r3, r3, #6
 8004026:	22ff      	movs	r2, #255	; 0xff
 8004028:	401a      	ands	r2, r3
 800402a:	1dfb      	adds	r3, r7, #7
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	0018      	movs	r0, r3
 8004030:	2303      	movs	r3, #3
 8004032:	4003      	ands	r3, r0
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004038:	4809      	ldr	r0, [pc, #36]	; (8004060 <__NVIC_SetPriority+0xd8>)
 800403a:	1dfb      	adds	r3, r7, #7
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	001c      	movs	r4, r3
 8004040:	230f      	movs	r3, #15
 8004042:	4023      	ands	r3, r4
 8004044:	3b08      	subs	r3, #8
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	430a      	orrs	r2, r1
 800404a:	3306      	adds	r3, #6
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	18c3      	adds	r3, r0, r3
 8004050:	3304      	adds	r3, #4
 8004052:	601a      	str	r2, [r3, #0]
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46bd      	mov	sp, r7
 8004058:	b003      	add	sp, #12
 800405a:	bd90      	pop	{r4, r7, pc}
 800405c:	e000e100 	.word	0xe000e100
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	1e5a      	subs	r2, r3, #1
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	045b      	lsls	r3, r3, #17
 8004074:	429a      	cmp	r2, r3
 8004076:	d301      	bcc.n	800407c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004078:	2301      	movs	r3, #1
 800407a:	e010      	b.n	800409e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <SysTick_Config+0x44>)
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	3a01      	subs	r2, #1
 8004082:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004084:	2301      	movs	r3, #1
 8004086:	425b      	negs	r3, r3
 8004088:	2103      	movs	r1, #3
 800408a:	0018      	movs	r0, r3
 800408c:	f7ff ff7c 	bl	8003f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <SysTick_Config+0x44>)
 8004092:	2200      	movs	r2, #0
 8004094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004096:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <SysTick_Config+0x44>)
 8004098:	2207      	movs	r2, #7
 800409a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800409c:	2300      	movs	r3, #0
}
 800409e:	0018      	movs	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b002      	add	sp, #8
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	e000e010 	.word	0xe000e010

080040ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	210f      	movs	r1, #15
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	1c02      	adds	r2, r0, #0
 80040bc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	187b      	adds	r3, r7, r1
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	b25b      	sxtb	r3, r3
 80040c6:	0011      	movs	r1, r2
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7ff ff5d 	bl	8003f88 <__NVIC_SetPriority>
}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b004      	add	sp, #16
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	0002      	movs	r2, r0
 80040de:	1dfb      	adds	r3, r7, #7
 80040e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040e2:	1dfb      	adds	r3, r7, #7
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7ff ff33 	bl	8003f54 <__NVIC_EnableIRQ>
}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b002      	add	sp, #8
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	0018      	movs	r0, r3
 8004102:	f7ff ffaf 	bl	8004064 <SysTick_Config>
 8004106:	0003      	movs	r3, r0
}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e077      	b.n	8004212 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a3d      	ldr	r2, [pc, #244]	; (800421c <HAL_DMA_Init+0x10c>)
 8004128:	4694      	mov	ip, r2
 800412a:	4463      	add	r3, ip
 800412c:	2114      	movs	r1, #20
 800412e:	0018      	movs	r0, r3
 8004130:	f7fb fff0 	bl	8000114 <__udivsi3>
 8004134:	0003      	movs	r3, r0
 8004136:	009a      	lsls	r2, r3, #2
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2225      	movs	r2, #37	; 0x25
 8004140:	2102      	movs	r1, #2
 8004142:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4934      	ldr	r1, [pc, #208]	; (8004220 <HAL_DMA_Init+0x110>)
 8004150:	400a      	ands	r2, r1
 8004152:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6819      	ldr	r1, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0018      	movs	r0, r3
 800418e:	f000 f9c7 	bl	8004520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	01db      	lsls	r3, r3, #7
 800419a:	429a      	cmp	r2, r3
 800419c:	d102      	bne.n	80041a4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	213f      	movs	r1, #63	; 0x3f
 80041ae:	400a      	ands	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d011      	beq.n	80041e8 <HAL_DMA_Init+0xd8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d80d      	bhi.n	80041e8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	0018      	movs	r0, r3
 80041d0:	f000 f9d2 	bl	8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	e008      	b.n	80041fa <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2225      	movs	r2, #37	; 0x25
 8004204:	2101      	movs	r1, #1
 8004206:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	; 0x24
 800420c:	2100      	movs	r1, #0
 800420e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	0018      	movs	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	b002      	add	sp, #8
 8004218:	bd80      	pop	{r7, pc}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	bffdfff8 	.word	0xbffdfff8
 8004220:	ffff800f 	.word	0xffff800f

08004224 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e050      	b.n	80042d8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2225      	movs	r2, #37	; 0x25
 800423a:	5c9b      	ldrb	r3, [r3, r2]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d008      	beq.n	8004254 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2204      	movs	r2, #4
 8004246:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2224      	movs	r2, #36	; 0x24
 800424c:	2100      	movs	r1, #0
 800424e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e041      	b.n	80042d8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	210e      	movs	r1, #14
 8004260:	438a      	bics	r2, r1
 8004262:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	491c      	ldr	r1, [pc, #112]	; (80042e0 <HAL_DMA_Abort+0xbc>)
 8004270:	400a      	ands	r2, r1
 8004272:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2101      	movs	r1, #1
 8004280:	438a      	bics	r2, r1
 8004282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <HAL_DMA_Abort+0xc0>)
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	221c      	movs	r2, #28
 800428e:	4013      	ands	r3, r2
 8004290:	2201      	movs	r2, #1
 8004292:	409a      	lsls	r2, r3
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <HAL_DMA_Abort+0xc0>)
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00c      	beq.n	80042c6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	490a      	ldr	r1, [pc, #40]	; (80042e0 <HAL_DMA_Abort+0xbc>)
 80042b8:	400a      	ands	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80042c4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2225      	movs	r2, #37	; 0x25
 80042ca:	2101      	movs	r1, #1
 80042cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2224      	movs	r2, #36	; 0x24
 80042d2:	2100      	movs	r1, #0
 80042d4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	0018      	movs	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	b002      	add	sp, #8
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	fffffeff 	.word	0xfffffeff
 80042e4:	40020000 	.word	0x40020000

080042e8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	210f      	movs	r1, #15
 80042f2:	187b      	adds	r3, r7, r1
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2225      	movs	r2, #37	; 0x25
 80042fc:	5c9b      	ldrb	r3, [r3, r2]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d006      	beq.n	8004312 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2204      	movs	r2, #4
 8004308:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800430a:	187b      	adds	r3, r7, r1
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	e049      	b.n	80043a6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	210e      	movs	r1, #14
 800431e:	438a      	bics	r2, r1
 8004320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2101      	movs	r1, #1
 800432e:	438a      	bics	r2, r1
 8004330:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433c:	491d      	ldr	r1, [pc, #116]	; (80043b4 <HAL_DMA_Abort_IT+0xcc>)
 800433e:	400a      	ands	r2, r1
 8004340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004342:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_DMA_Abort_IT+0xd0>)
 8004344:	6859      	ldr	r1, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	221c      	movs	r2, #28
 800434c:	4013      	ands	r3, r2
 800434e:	2201      	movs	r2, #1
 8004350:	409a      	lsls	r2, r3
 8004352:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <HAL_DMA_Abort_IT+0xd0>)
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004360:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00c      	beq.n	8004384 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004374:	490f      	ldr	r1, [pc, #60]	; (80043b4 <HAL_DMA_Abort_IT+0xcc>)
 8004376:	400a      	ands	r2, r1
 8004378:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004382:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2225      	movs	r2, #37	; 0x25
 8004388:	2101      	movs	r1, #1
 800438a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2224      	movs	r2, #36	; 0x24
 8004390:	2100      	movs	r1, #0
 8004392:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	0010      	movs	r0, r2
 80043a4:	4798      	blx	r3
    }
  }
  return status;
 80043a6:	230f      	movs	r3, #15
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	781b      	ldrb	r3, [r3, #0]
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b004      	add	sp, #16
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	fffffeff 	.word	0xfffffeff
 80043b8:	40020000 	.word	0x40020000

080043bc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80043c4:	4b55      	ldr	r3, [pc, #340]	; (800451c <HAL_DMA_IRQHandler+0x160>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	221c      	movs	r2, #28
 80043d8:	4013      	ands	r3, r2
 80043da:	2204      	movs	r2, #4
 80043dc:	409a      	lsls	r2, r3
 80043de:	0013      	movs	r3, r2
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4013      	ands	r3, r2
 80043e4:	d027      	beq.n	8004436 <HAL_DMA_IRQHandler+0x7a>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2204      	movs	r2, #4
 80043ea:	4013      	ands	r3, r2
 80043ec:	d023      	beq.n	8004436 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2220      	movs	r2, #32
 80043f6:	4013      	ands	r3, r2
 80043f8:	d107      	bne.n	800440a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2104      	movs	r1, #4
 8004406:	438a      	bics	r2, r1
 8004408:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800440a:	4b44      	ldr	r3, [pc, #272]	; (800451c <HAL_DMA_IRQHandler+0x160>)
 800440c:	6859      	ldr	r1, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	221c      	movs	r2, #28
 8004414:	4013      	ands	r3, r2
 8004416:	2204      	movs	r2, #4
 8004418:	409a      	lsls	r2, r3
 800441a:	4b40      	ldr	r3, [pc, #256]	; (800451c <HAL_DMA_IRQHandler+0x160>)
 800441c:	430a      	orrs	r2, r1
 800441e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	2b00      	cmp	r3, #0
 8004426:	d100      	bne.n	800442a <HAL_DMA_IRQHandler+0x6e>
 8004428:	e073      	b.n	8004512 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	0010      	movs	r0, r2
 8004432:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004434:	e06d      	b.n	8004512 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	221c      	movs	r2, #28
 800443c:	4013      	ands	r3, r2
 800443e:	2202      	movs	r2, #2
 8004440:	409a      	lsls	r2, r3
 8004442:	0013      	movs	r3, r2
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4013      	ands	r3, r2
 8004448:	d02e      	beq.n	80044a8 <HAL_DMA_IRQHandler+0xec>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2202      	movs	r2, #2
 800444e:	4013      	ands	r3, r2
 8004450:	d02a      	beq.n	80044a8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2220      	movs	r2, #32
 800445a:	4013      	ands	r3, r2
 800445c:	d10b      	bne.n	8004476 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	210a      	movs	r1, #10
 800446a:	438a      	bics	r2, r1
 800446c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2225      	movs	r2, #37	; 0x25
 8004472:	2101      	movs	r1, #1
 8004474:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004476:	4b29      	ldr	r3, [pc, #164]	; (800451c <HAL_DMA_IRQHandler+0x160>)
 8004478:	6859      	ldr	r1, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	221c      	movs	r2, #28
 8004480:	4013      	ands	r3, r2
 8004482:	2202      	movs	r2, #2
 8004484:	409a      	lsls	r2, r3
 8004486:	4b25      	ldr	r3, [pc, #148]	; (800451c <HAL_DMA_IRQHandler+0x160>)
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	2100      	movs	r1, #0
 8004492:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d03a      	beq.n	8004512 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	0010      	movs	r0, r2
 80044a4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80044a6:	e034      	b.n	8004512 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	221c      	movs	r2, #28
 80044ae:	4013      	ands	r3, r2
 80044b0:	2208      	movs	r2, #8
 80044b2:	409a      	lsls	r2, r3
 80044b4:	0013      	movs	r3, r2
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4013      	ands	r3, r2
 80044ba:	d02b      	beq.n	8004514 <HAL_DMA_IRQHandler+0x158>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2208      	movs	r2, #8
 80044c0:	4013      	ands	r3, r2
 80044c2:	d027      	beq.n	8004514 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	210e      	movs	r1, #14
 80044d0:	438a      	bics	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_DMA_IRQHandler+0x160>)
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	221c      	movs	r2, #28
 80044de:	4013      	ands	r3, r2
 80044e0:	2201      	movs	r2, #1
 80044e2:	409a      	lsls	r2, r3
 80044e4:	4b0d      	ldr	r3, [pc, #52]	; (800451c <HAL_DMA_IRQHandler+0x160>)
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2225      	movs	r2, #37	; 0x25
 80044f4:	2101      	movs	r1, #1
 80044f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2224      	movs	r2, #36	; 0x24
 80044fc:	2100      	movs	r1, #0
 80044fe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	0010      	movs	r0, r2
 8004510:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	46c0      	nop			; (mov r8, r8)
}
 8004516:	46bd      	mov	sp, r7
 8004518:	b004      	add	sp, #16
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40020000 	.word	0x40020000

08004520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	4a10      	ldr	r2, [pc, #64]	; (8004570 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004530:	4694      	mov	ip, r2
 8004532:	4463      	add	r3, ip
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	001a      	movs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	001a      	movs	r2, r3
 8004542:	23ff      	movs	r3, #255	; 0xff
 8004544:	4013      	ands	r3, r2
 8004546:	3b08      	subs	r3, #8
 8004548:	2114      	movs	r1, #20
 800454a:	0018      	movs	r0, r3
 800454c:	f7fb fde2 	bl	8000114 <__udivsi3>
 8004550:	0003      	movs	r3, r0
 8004552:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a07      	ldr	r2, [pc, #28]	; (8004574 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004558:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	221f      	movs	r2, #31
 800455e:	4013      	ands	r3, r2
 8004560:	2201      	movs	r2, #1
 8004562:	409a      	lsls	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b004      	add	sp, #16
 800456e:	bd80      	pop	{r7, pc}
 8004570:	10008200 	.word	0x10008200
 8004574:	40020880 	.word	0x40020880

08004578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	223f      	movs	r2, #63	; 0x3f
 8004586:	4013      	ands	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800458e:	4694      	mov	ip, r2
 8004590:	4463      	add	r3, ip
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	001a      	movs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a07      	ldr	r2, [pc, #28]	; (80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800459e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	2203      	movs	r2, #3
 80045a6:	4013      	ands	r3, r2
 80045a8:	2201      	movs	r2, #1
 80045aa:	409a      	lsls	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b004      	add	sp, #16
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	1000823f 	.word	0x1000823f
 80045bc:	40020940 	.word	0x40020940

080045c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ce:	e147      	b.n	8004860 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2101      	movs	r1, #1
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4091      	lsls	r1, r2
 80045da:	000a      	movs	r2, r1
 80045dc:	4013      	ands	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d100      	bne.n	80045e8 <HAL_GPIO_Init+0x28>
 80045e6:	e138      	b.n	800485a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2203      	movs	r2, #3
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d005      	beq.n	8004600 <HAL_GPIO_Init+0x40>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2203      	movs	r2, #3
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d130      	bne.n	8004662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	2203      	movs	r2, #3
 800460c:	409a      	lsls	r2, r3
 800460e:	0013      	movs	r3, r2
 8004610:	43da      	mvns	r2, r3
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4013      	ands	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	409a      	lsls	r2, r3
 8004622:	0013      	movs	r3, r2
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004636:	2201      	movs	r2, #1
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	409a      	lsls	r2, r3
 800463c:	0013      	movs	r3, r2
 800463e:	43da      	mvns	r2, r3
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4013      	ands	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	2201      	movs	r2, #1
 800464e:	401a      	ands	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	409a      	lsls	r2, r3
 8004654:	0013      	movs	r3, r2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2203      	movs	r2, #3
 8004668:	4013      	ands	r3, r2
 800466a:	2b03      	cmp	r3, #3
 800466c:	d017      	beq.n	800469e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	2203      	movs	r2, #3
 800467a:	409a      	lsls	r2, r3
 800467c:	0013      	movs	r3, r2
 800467e:	43da      	mvns	r2, r3
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4013      	ands	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	0013      	movs	r3, r2
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2203      	movs	r2, #3
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d123      	bne.n	80046f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	08da      	lsrs	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3208      	adds	r2, #8
 80046b2:	0092      	lsls	r2, r2, #2
 80046b4:	58d3      	ldr	r3, [r2, r3]
 80046b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2207      	movs	r2, #7
 80046bc:	4013      	ands	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	220f      	movs	r2, #15
 80046c2:	409a      	lsls	r2, r3
 80046c4:	0013      	movs	r3, r2
 80046c6:	43da      	mvns	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4013      	ands	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2107      	movs	r1, #7
 80046d6:	400b      	ands	r3, r1
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	409a      	lsls	r2, r3
 80046dc:	0013      	movs	r3, r2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	08da      	lsrs	r2, r3, #3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3208      	adds	r2, #8
 80046ec:	0092      	lsls	r2, r2, #2
 80046ee:	6939      	ldr	r1, [r7, #16]
 80046f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	2203      	movs	r2, #3
 80046fe:	409a      	lsls	r2, r3
 8004700:	0013      	movs	r3, r2
 8004702:	43da      	mvns	r2, r3
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4013      	ands	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2203      	movs	r2, #3
 8004710:	401a      	ands	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	409a      	lsls	r2, r3
 8004718:	0013      	movs	r3, r2
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	23c0      	movs	r3, #192	; 0xc0
 800472c:	029b      	lsls	r3, r3, #10
 800472e:	4013      	ands	r3, r2
 8004730:	d100      	bne.n	8004734 <HAL_GPIO_Init+0x174>
 8004732:	e092      	b.n	800485a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004734:	4a50      	ldr	r2, [pc, #320]	; (8004878 <HAL_GPIO_Init+0x2b8>)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	089b      	lsrs	r3, r3, #2
 800473a:	3318      	adds	r3, #24
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	589b      	ldr	r3, [r3, r2]
 8004740:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2203      	movs	r2, #3
 8004746:	4013      	ands	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	220f      	movs	r2, #15
 800474c:	409a      	lsls	r2, r3
 800474e:	0013      	movs	r3, r2
 8004750:	43da      	mvns	r2, r3
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4013      	ands	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	23a0      	movs	r3, #160	; 0xa0
 800475c:	05db      	lsls	r3, r3, #23
 800475e:	429a      	cmp	r2, r3
 8004760:	d013      	beq.n	800478a <HAL_GPIO_Init+0x1ca>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a45      	ldr	r2, [pc, #276]	; (800487c <HAL_GPIO_Init+0x2bc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00d      	beq.n	8004786 <HAL_GPIO_Init+0x1c6>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a44      	ldr	r2, [pc, #272]	; (8004880 <HAL_GPIO_Init+0x2c0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d007      	beq.n	8004782 <HAL_GPIO_Init+0x1c2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a43      	ldr	r2, [pc, #268]	; (8004884 <HAL_GPIO_Init+0x2c4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d101      	bne.n	800477e <HAL_GPIO_Init+0x1be>
 800477a:	2303      	movs	r3, #3
 800477c:	e006      	b.n	800478c <HAL_GPIO_Init+0x1cc>
 800477e:	2305      	movs	r3, #5
 8004780:	e004      	b.n	800478c <HAL_GPIO_Init+0x1cc>
 8004782:	2302      	movs	r3, #2
 8004784:	e002      	b.n	800478c <HAL_GPIO_Init+0x1cc>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_GPIO_Init+0x1cc>
 800478a:	2300      	movs	r3, #0
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	2103      	movs	r1, #3
 8004790:	400a      	ands	r2, r1
 8004792:	00d2      	lsls	r2, r2, #3
 8004794:	4093      	lsls	r3, r2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800479c:	4936      	ldr	r1, [pc, #216]	; (8004878 <HAL_GPIO_Init+0x2b8>)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	089b      	lsrs	r3, r3, #2
 80047a2:	3318      	adds	r3, #24
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047aa:	4b33      	ldr	r3, [pc, #204]	; (8004878 <HAL_GPIO_Init+0x2b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	43da      	mvns	r2, r3
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	035b      	lsls	r3, r3, #13
 80047c2:	4013      	ands	r3, r2
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047ce:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <HAL_GPIO_Init+0x2b8>)
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80047d4:	4b28      	ldr	r3, [pc, #160]	; (8004878 <HAL_GPIO_Init+0x2b8>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	43da      	mvns	r2, r3
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	039b      	lsls	r3, r3, #14
 80047ec:	4013      	ands	r3, r2
 80047ee:	d003      	beq.n	80047f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047f8:	4b1f      	ldr	r3, [pc, #124]	; (8004878 <HAL_GPIO_Init+0x2b8>)
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047fe:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <HAL_GPIO_Init+0x2b8>)
 8004800:	2384      	movs	r3, #132	; 0x84
 8004802:	58d3      	ldr	r3, [r2, r3]
 8004804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	43da      	mvns	r2, r3
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4013      	ands	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	2380      	movs	r3, #128	; 0x80
 8004816:	029b      	lsls	r3, r3, #10
 8004818:	4013      	ands	r3, r2
 800481a:	d003      	beq.n	8004824 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004824:	4914      	ldr	r1, [pc, #80]	; (8004878 <HAL_GPIO_Init+0x2b8>)
 8004826:	2284      	movs	r2, #132	; 0x84
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800482c:	4a12      	ldr	r2, [pc, #72]	; (8004878 <HAL_GPIO_Init+0x2b8>)
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	58d3      	ldr	r3, [r2, r3]
 8004832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	43da      	mvns	r2, r3
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4013      	ands	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	025b      	lsls	r3, r3, #9
 8004846:	4013      	ands	r3, r2
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004852:	4909      	ldr	r1, [pc, #36]	; (8004878 <HAL_GPIO_Init+0x2b8>)
 8004854:	2280      	movs	r2, #128	; 0x80
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	3301      	adds	r3, #1
 800485e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	40da      	lsrs	r2, r3
 8004868:	1e13      	subs	r3, r2, #0
 800486a:	d000      	beq.n	800486e <HAL_GPIO_Init+0x2ae>
 800486c:	e6b0      	b.n	80045d0 <HAL_GPIO_Init+0x10>
  }
}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b006      	add	sp, #24
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021800 	.word	0x40021800
 800487c:	50000400 	.word	0x50000400
 8004880:	50000800 	.word	0x50000800
 8004884:	50000c00 	.word	0x50000c00

08004888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	000a      	movs	r2, r1
 8004892:	1cbb      	adds	r3, r7, #2
 8004894:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	1cba      	adds	r2, r7, #2
 800489c:	8812      	ldrh	r2, [r2, #0]
 800489e:	4013      	ands	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80048a2:	230f      	movs	r3, #15
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	2201      	movs	r2, #1
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	e003      	b.n	80048b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ac:	230f      	movs	r3, #15
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	2200      	movs	r2, #0
 80048b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80048b4:	230f      	movs	r3, #15
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	781b      	ldrb	r3, [r3, #0]
}
 80048ba:	0018      	movs	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	b004      	add	sp, #16
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	0008      	movs	r0, r1
 80048cc:	0011      	movs	r1, r2
 80048ce:	1cbb      	adds	r3, r7, #2
 80048d0:	1c02      	adds	r2, r0, #0
 80048d2:	801a      	strh	r2, [r3, #0]
 80048d4:	1c7b      	adds	r3, r7, #1
 80048d6:	1c0a      	adds	r2, r1, #0
 80048d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048da:	1c7b      	adds	r3, r7, #1
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048e2:	1cbb      	adds	r3, r7, #2
 80048e4:	881a      	ldrh	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048ea:	e003      	b.n	80048f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048ec:	1cbb      	adds	r3, r7, #2
 80048ee:	881a      	ldrh	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b002      	add	sp, #8
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004904:	4b19      	ldr	r3, [pc, #100]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a19      	ldr	r2, [pc, #100]	; (8004970 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800490a:	4013      	ands	r3, r2
 800490c:	0019      	movs	r1, r3
 800490e:	4b17      	ldr	r3, [pc, #92]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	430a      	orrs	r2, r1
 8004914:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d11f      	bne.n	8004960 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004920:	4b14      	ldr	r3, [pc, #80]	; (8004974 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	0013      	movs	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	189b      	adds	r3, r3, r2
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	4912      	ldr	r1, [pc, #72]	; (8004978 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800492e:	0018      	movs	r0, r3
 8004930:	f7fb fbf0 	bl	8000114 <__udivsi3>
 8004934:	0003      	movs	r3, r0
 8004936:	3301      	adds	r3, #1
 8004938:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800493a:	e008      	b.n	800494e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3b01      	subs	r3, #1
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e001      	b.n	800494e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e009      	b.n	8004962 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	401a      	ands	r2, r3
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	429a      	cmp	r2, r3
 800495e:	d0ed      	beq.n	800493c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	0018      	movs	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	b004      	add	sp, #16
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	40007000 	.word	0x40007000
 8004970:	fffff9ff 	.word	0xfffff9ff
 8004974:	20000378 	.word	0x20000378
 8004978:	000f4240 	.word	0x000f4240

0800497c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004980:	4b03      	ldr	r3, [pc, #12]	; (8004990 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	23e0      	movs	r3, #224	; 0xe0
 8004986:	01db      	lsls	r3, r3, #7
 8004988:	4013      	ands	r3, r2
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000

08004994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e2f3      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2201      	movs	r2, #1
 80049ac:	4013      	ands	r3, r2
 80049ae:	d100      	bne.n	80049b2 <HAL_RCC_OscConfig+0x1e>
 80049b0:	e07c      	b.n	8004aac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b2:	4bc3      	ldr	r3, [pc, #780]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2238      	movs	r2, #56	; 0x38
 80049b8:	4013      	ands	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049bc:	4bc0      	ldr	r3, [pc, #768]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2203      	movs	r2, #3
 80049c2:	4013      	ands	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d102      	bne.n	80049d2 <HAL_RCC_OscConfig+0x3e>
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d002      	beq.n	80049d8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d10b      	bne.n	80049f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d8:	4bb9      	ldr	r3, [pc, #740]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	4013      	ands	r3, r2
 80049e2:	d062      	beq.n	8004aaa <HAL_RCC_OscConfig+0x116>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d15e      	bne.n	8004aaa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e2ce      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	025b      	lsls	r3, r3, #9
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d107      	bne.n	8004a0c <HAL_RCC_OscConfig+0x78>
 80049fc:	4bb0      	ldr	r3, [pc, #704]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4baf      	ldr	r3, [pc, #700]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004a02:	2180      	movs	r1, #128	; 0x80
 8004a04:	0249      	lsls	r1, r1, #9
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e020      	b.n	8004a4e <HAL_RCC_OscConfig+0xba>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	23a0      	movs	r3, #160	; 0xa0
 8004a12:	02db      	lsls	r3, r3, #11
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d10e      	bne.n	8004a36 <HAL_RCC_OscConfig+0xa2>
 8004a18:	4ba9      	ldr	r3, [pc, #676]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4ba8      	ldr	r3, [pc, #672]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	02c9      	lsls	r1, r1, #11
 8004a22:	430a      	orrs	r2, r1
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	4ba6      	ldr	r3, [pc, #664]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4ba5      	ldr	r3, [pc, #660]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	0249      	lsls	r1, r1, #9
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e00b      	b.n	8004a4e <HAL_RCC_OscConfig+0xba>
 8004a36:	4ba2      	ldr	r3, [pc, #648]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4ba1      	ldr	r3, [pc, #644]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004a3c:	49a1      	ldr	r1, [pc, #644]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004a3e:	400a      	ands	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	4b9f      	ldr	r3, [pc, #636]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b9e      	ldr	r3, [pc, #632]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004a48:	499f      	ldr	r1, [pc, #636]	; (8004cc8 <HAL_RCC_OscConfig+0x334>)
 8004a4a:	400a      	ands	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d014      	beq.n	8004a80 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a56:	f7fe fdf5 	bl	8003644 <HAL_GetTick>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a60:	f7fe fdf0 	bl	8003644 <HAL_GetTick>
 8004a64:	0002      	movs	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e28d      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a72:	4b93      	ldr	r3, [pc, #588]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	029b      	lsls	r3, r3, #10
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0xcc>
 8004a7e:	e015      	b.n	8004aac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fe fde0 	bl	8003644 <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a8a:	f7fe fddb 	bl	8003644 <HAL_GetTick>
 8004a8e:	0002      	movs	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b64      	cmp	r3, #100	; 0x64
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e278      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a9c:	4b88      	ldr	r3, [pc, #544]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	029b      	lsls	r3, r3, #10
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d1f0      	bne.n	8004a8a <HAL_RCC_OscConfig+0xf6>
 8004aa8:	e000      	b.n	8004aac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aaa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d100      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x124>
 8004ab6:	e099      	b.n	8004bec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ab8:	4b81      	ldr	r3, [pc, #516]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2238      	movs	r2, #56	; 0x38
 8004abe:	4013      	ands	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ac2:	4b7f      	ldr	r3, [pc, #508]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	4013      	ands	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d102      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x144>
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d002      	beq.n	8004ade <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d135      	bne.n	8004b4a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ade:	4b78      	ldr	r3, [pc, #480]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	2380      	movs	r3, #128	; 0x80
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d005      	beq.n	8004af6 <HAL_RCC_OscConfig+0x162>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e24b      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af6:	4b72      	ldr	r3, [pc, #456]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4a74      	ldr	r2, [pc, #464]	; (8004ccc <HAL_RCC_OscConfig+0x338>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	0019      	movs	r1, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	021a      	lsls	r2, r3, #8
 8004b06:	4b6e      	ldr	r3, [pc, #440]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d112      	bne.n	8004b38 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b12:	4b6b      	ldr	r3, [pc, #428]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a6e      	ldr	r2, [pc, #440]	; (8004cd0 <HAL_RCC_OscConfig+0x33c>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	4b67      	ldr	r3, [pc, #412]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004b22:	430a      	orrs	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004b26:	4b66      	ldr	r3, [pc, #408]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	0adb      	lsrs	r3, r3, #11
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	4013      	ands	r3, r2
 8004b30:	4a68      	ldr	r2, [pc, #416]	; (8004cd4 <HAL_RCC_OscConfig+0x340>)
 8004b32:	40da      	lsrs	r2, r3
 8004b34:	4b68      	ldr	r3, [pc, #416]	; (8004cd8 <HAL_RCC_OscConfig+0x344>)
 8004b36:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b38:	4b68      	ldr	r3, [pc, #416]	; (8004cdc <HAL_RCC_OscConfig+0x348>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7fe fd25 	bl	800358c <HAL_InitTick>
 8004b42:	1e03      	subs	r3, r0, #0
 8004b44:	d051      	beq.n	8004bea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e221      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d030      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b52:	4b5b      	ldr	r3, [pc, #364]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a5e      	ldr	r2, [pc, #376]	; (8004cd0 <HAL_RCC_OscConfig+0x33c>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	4b57      	ldr	r3, [pc, #348]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004b62:	430a      	orrs	r2, r1
 8004b64:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004b66:	4b56      	ldr	r3, [pc, #344]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b55      	ldr	r3, [pc, #340]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004b6c:	2180      	movs	r1, #128	; 0x80
 8004b6e:	0049      	lsls	r1, r1, #1
 8004b70:	430a      	orrs	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fe fd66 	bl	8003644 <HAL_GetTick>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b7e:	f7fe fd61 	bl	8003644 <HAL_GetTick>
 8004b82:	0002      	movs	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e1fe      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b90:	4b4b      	ldr	r3, [pc, #300]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9c:	4b48      	ldr	r3, [pc, #288]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a4a      	ldr	r2, [pc, #296]	; (8004ccc <HAL_RCC_OscConfig+0x338>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	021a      	lsls	r2, r3, #8
 8004bac:	4b44      	ldr	r3, [pc, #272]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
 8004bb2:	e01b      	b.n	8004bec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004bb4:	4b42      	ldr	r3, [pc, #264]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4b41      	ldr	r3, [pc, #260]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004bba:	4949      	ldr	r1, [pc, #292]	; (8004ce0 <HAL_RCC_OscConfig+0x34c>)
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fe fd40 	bl	8003644 <HAL_GetTick>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bca:	f7fe fd3b 	bl	8003644 <HAL_GetTick>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e1d8      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bdc:	4b38      	ldr	r3, [pc, #224]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4013      	ands	r3, r2
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0x236>
 8004be8:	e000      	b.n	8004bec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d047      	beq.n	8004c86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004bf6:	4b32      	ldr	r3, [pc, #200]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2238      	movs	r2, #56	; 0x38
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b18      	cmp	r3, #24
 8004c00:	d10a      	bne.n	8004c18 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004c02:	4b2f      	ldr	r3, [pc, #188]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c06:	2202      	movs	r2, #2
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d03c      	beq.n	8004c86 <HAL_RCC_OscConfig+0x2f2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d138      	bne.n	8004c86 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e1ba      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d019      	beq.n	8004c54 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004c20:	4b27      	ldr	r3, [pc, #156]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004c22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c24:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004c26:	2101      	movs	r1, #1
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fe fd0a 	bl	8003644 <HAL_GetTick>
 8004c30:	0003      	movs	r3, r0
 8004c32:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c36:	f7fe fd05 	bl	8003644 <HAL_GetTick>
 8004c3a:	0002      	movs	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e1a2      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c48:	4b1d      	ldr	r3, [pc, #116]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d0f1      	beq.n	8004c36 <HAL_RCC_OscConfig+0x2a2>
 8004c52:	e018      	b.n	8004c86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004c54:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004c56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c58:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	438a      	bics	r2, r1
 8004c5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7fe fcf0 	bl	8003644 <HAL_GetTick>
 8004c64:	0003      	movs	r3, r0
 8004c66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6a:	f7fe fceb 	bl	8003644 <HAL_GetTick>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e188      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c7c:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c80:	2202      	movs	r2, #2
 8004c82:	4013      	ands	r3, r2
 8004c84:	d1f1      	bne.n	8004c6a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d100      	bne.n	8004c92 <HAL_RCC_OscConfig+0x2fe>
 8004c90:	e0c6      	b.n	8004e20 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c92:	231f      	movs	r3, #31
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2238      	movs	r2, #56	; 0x38
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d11e      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_RCC_OscConfig+0x32c>)
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004caa:	2202      	movs	r2, #2
 8004cac:	4013      	ands	r3, r2
 8004cae:	d100      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x31e>
 8004cb0:	e0b6      	b.n	8004e20 <HAL_RCC_OscConfig+0x48c>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d000      	beq.n	8004cbc <HAL_RCC_OscConfig+0x328>
 8004cba:	e0b1      	b.n	8004e20 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e166      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	fffeffff 	.word	0xfffeffff
 8004cc8:	fffbffff 	.word	0xfffbffff
 8004ccc:	ffff80ff 	.word	0xffff80ff
 8004cd0:	ffffc7ff 	.word	0xffffc7ff
 8004cd4:	00f42400 	.word	0x00f42400
 8004cd8:	20000378 	.word	0x20000378
 8004cdc:	2000037c 	.word	0x2000037c
 8004ce0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ce4:	4bac      	ldr	r3, [pc, #688]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce8:	2380      	movs	r3, #128	; 0x80
 8004cea:	055b      	lsls	r3, r3, #21
 8004cec:	4013      	ands	r3, r2
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x360>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCC_OscConfig+0x362>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d011      	beq.n	8004d1e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004cfa:	4ba7      	ldr	r3, [pc, #668]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfe:	4ba6      	ldr	r3, [pc, #664]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004d00:	2180      	movs	r1, #128	; 0x80
 8004d02:	0549      	lsls	r1, r1, #21
 8004d04:	430a      	orrs	r2, r1
 8004d06:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d08:	4ba3      	ldr	r3, [pc, #652]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	055b      	lsls	r3, r3, #21
 8004d10:	4013      	ands	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004d16:	231f      	movs	r3, #31
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d1e:	4b9f      	ldr	r3, [pc, #636]	; (8004f9c <HAL_RCC_OscConfig+0x608>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	2380      	movs	r3, #128	; 0x80
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	4013      	ands	r3, r2
 8004d28:	d11a      	bne.n	8004d60 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d2a:	4b9c      	ldr	r3, [pc, #624]	; (8004f9c <HAL_RCC_OscConfig+0x608>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b9b      	ldr	r3, [pc, #620]	; (8004f9c <HAL_RCC_OscConfig+0x608>)
 8004d30:	2180      	movs	r1, #128	; 0x80
 8004d32:	0049      	lsls	r1, r1, #1
 8004d34:	430a      	orrs	r2, r1
 8004d36:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004d38:	f7fe fc84 	bl	8003644 <HAL_GetTick>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d42:	f7fe fc7f 	bl	8003644 <HAL_GetTick>
 8004d46:	0002      	movs	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e11c      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d54:	4b91      	ldr	r3, [pc, #580]	; (8004f9c <HAL_RCC_OscConfig+0x608>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d106      	bne.n	8004d76 <HAL_RCC_OscConfig+0x3e2>
 8004d68:	4b8b      	ldr	r3, [pc, #556]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004d6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d6c:	4b8a      	ldr	r3, [pc, #552]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004d6e:	2101      	movs	r1, #1
 8004d70:	430a      	orrs	r2, r1
 8004d72:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d74:	e01c      	b.n	8004db0 <HAL_RCC_OscConfig+0x41c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b05      	cmp	r3, #5
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x404>
 8004d7e:	4b86      	ldr	r3, [pc, #536]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004d80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d82:	4b85      	ldr	r3, [pc, #532]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004d84:	2104      	movs	r1, #4
 8004d86:	430a      	orrs	r2, r1
 8004d88:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d8a:	4b83      	ldr	r3, [pc, #524]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004d8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d8e:	4b82      	ldr	r3, [pc, #520]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004d90:	2101      	movs	r1, #1
 8004d92:	430a      	orrs	r2, r1
 8004d94:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d96:	e00b      	b.n	8004db0 <HAL_RCC_OscConfig+0x41c>
 8004d98:	4b7f      	ldr	r3, [pc, #508]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004d9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d9c:	4b7e      	ldr	r3, [pc, #504]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004d9e:	2101      	movs	r1, #1
 8004da0:	438a      	bics	r2, r1
 8004da2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004da4:	4b7c      	ldr	r3, [pc, #496]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004da6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004da8:	4b7b      	ldr	r3, [pc, #492]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004daa:	2104      	movs	r1, #4
 8004dac:	438a      	bics	r2, r1
 8004dae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d014      	beq.n	8004de2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fe fc44 	bl	8003644 <HAL_GetTick>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dc0:	e009      	b.n	8004dd6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc2:	f7fe fc3f 	bl	8003644 <HAL_GetTick>
 8004dc6:	0002      	movs	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	4a74      	ldr	r2, [pc, #464]	; (8004fa0 <HAL_RCC_OscConfig+0x60c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e0db      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd6:	4b70      	ldr	r3, [pc, #448]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dda:	2202      	movs	r2, #2
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x42e>
 8004de0:	e013      	b.n	8004e0a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de2:	f7fe fc2f 	bl	8003644 <HAL_GetTick>
 8004de6:	0003      	movs	r3, r0
 8004de8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dea:	e009      	b.n	8004e00 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dec:	f7fe fc2a 	bl	8003644 <HAL_GetTick>
 8004df0:	0002      	movs	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	4a6a      	ldr	r2, [pc, #424]	; (8004fa0 <HAL_RCC_OscConfig+0x60c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e0c6      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e00:	4b65      	ldr	r3, [pc, #404]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e04:	2202      	movs	r2, #2
 8004e06:	4013      	ands	r3, r2
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e0a:	231f      	movs	r3, #31
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d105      	bne.n	8004e20 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004e14:	4b60      	ldr	r3, [pc, #384]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e18:	4b5f      	ldr	r3, [pc, #380]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004e1a:	4962      	ldr	r1, [pc, #392]	; (8004fa4 <HAL_RCC_OscConfig+0x610>)
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d100      	bne.n	8004e2a <HAL_RCC_OscConfig+0x496>
 8004e28:	e0b0      	b.n	8004f8c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e2a:	4b5b      	ldr	r3, [pc, #364]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2238      	movs	r2, #56	; 0x38
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d100      	bne.n	8004e38 <HAL_RCC_OscConfig+0x4a4>
 8004e36:	e078      	b.n	8004f2a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d153      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e40:	4b55      	ldr	r3, [pc, #340]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	4b54      	ldr	r3, [pc, #336]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004e46:	4958      	ldr	r1, [pc, #352]	; (8004fa8 <HAL_RCC_OscConfig+0x614>)
 8004e48:	400a      	ands	r2, r1
 8004e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fe fbfa 	bl	8003644 <HAL_GetTick>
 8004e50:	0003      	movs	r3, r0
 8004e52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e56:	f7fe fbf5 	bl	8003644 <HAL_GetTick>
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e092      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e68:	4b4b      	ldr	r3, [pc, #300]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	049b      	lsls	r3, r3, #18
 8004e70:	4013      	ands	r3, r2
 8004e72:	d1f0      	bne.n	8004e56 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e74:	4b48      	ldr	r3, [pc, #288]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4a4c      	ldr	r2, [pc, #304]	; (8004fac <HAL_RCC_OscConfig+0x618>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	4b3e      	ldr	r3, [pc, #248]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea2:	4b3d      	ldr	r3, [pc, #244]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b3c      	ldr	r3, [pc, #240]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004ea8:	2180      	movs	r1, #128	; 0x80
 8004eaa:	0449      	lsls	r1, r1, #17
 8004eac:	430a      	orrs	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004eb0:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	4b38      	ldr	r3, [pc, #224]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	0549      	lsls	r1, r1, #21
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fe fbc1 	bl	8003644 <HAL_GetTick>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fe fbbc 	bl	8003644 <HAL_GetTick>
 8004ecc:	0002      	movs	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e059      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	049b      	lsls	r3, r3, #18
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x534>
 8004ee6:	e051      	b.n	8004f8c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b2a      	ldr	r3, [pc, #168]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004eee:	492e      	ldr	r1, [pc, #184]	; (8004fa8 <HAL_RCC_OscConfig+0x614>)
 8004ef0:	400a      	ands	r2, r1
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fe fba6 	bl	8003644 <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efe:	f7fe fba1 	bl	8003644 <HAL_GetTick>
 8004f02:	0002      	movs	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e03e      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f10:	4b21      	ldr	r3, [pc, #132]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	049b      	lsls	r3, r3, #18
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d1f0      	bne.n	8004efe <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	4b1d      	ldr	r3, [pc, #116]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004f22:	4923      	ldr	r1, [pc, #140]	; (8004fb0 <HAL_RCC_OscConfig+0x61c>)
 8004f24:	400a      	ands	r2, r1
 8004f26:	60da      	str	r2, [r3, #12]
 8004f28:	e030      	b.n	8004f8c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e02b      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004f36:	4b18      	ldr	r3, [pc, #96]	; (8004f98 <HAL_RCC_OscConfig+0x604>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2203      	movs	r2, #3
 8004f40:	401a      	ands	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d11e      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2270      	movs	r2, #112	; 0x70
 8004f4e:	401a      	ands	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d117      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	23fe      	movs	r3, #254	; 0xfe
 8004f5c:	01db      	lsls	r3, r3, #7
 8004f5e:	401a      	ands	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d10e      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	23f8      	movs	r3, #248	; 0xf8
 8004f6e:	039b      	lsls	r3, r3, #14
 8004f70:	401a      	ands	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d106      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	0f5b      	lsrs	r3, r3, #29
 8004f7e:	075a      	lsls	r2, r3, #29
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b008      	add	sp, #32
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40007000 	.word	0x40007000
 8004fa0:	00001388 	.word	0x00001388
 8004fa4:	efffffff 	.word	0xefffffff
 8004fa8:	feffffff 	.word	0xfeffffff
 8004fac:	1fc1808c 	.word	0x1fc1808c
 8004fb0:	effefffc 	.word	0xeffefffc

08004fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0e9      	b.n	800519c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b76      	ldr	r3, [pc, #472]	; (80051a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2207      	movs	r2, #7
 8004fce:	4013      	ands	r3, r2
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d91e      	bls.n	8005014 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b73      	ldr	r3, [pc, #460]	; (80051a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2207      	movs	r2, #7
 8004fdc:	4393      	bics	r3, r2
 8004fde:	0019      	movs	r1, r3
 8004fe0:	4b70      	ldr	r3, [pc, #448]	; (80051a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fe8:	f7fe fb2c 	bl	8003644 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ff0:	e009      	b.n	8005006 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff2:	f7fe fb27 	bl	8003644 <HAL_GetTick>
 8004ff6:	0002      	movs	r2, r0
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	4a6a      	ldr	r2, [pc, #424]	; (80051a8 <HAL_RCC_ClockConfig+0x1f4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e0ca      	b.n	800519c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005006:	4b67      	ldr	r3, [pc, #412]	; (80051a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2207      	movs	r2, #7
 800500c:	4013      	ands	r3, r2
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d1ee      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2202      	movs	r2, #2
 800501a:	4013      	ands	r3, r2
 800501c:	d015      	beq.n	800504a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2204      	movs	r2, #4
 8005024:	4013      	ands	r3, r2
 8005026:	d006      	beq.n	8005036 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005028:	4b60      	ldr	r3, [pc, #384]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	4b5f      	ldr	r3, [pc, #380]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 800502e:	21e0      	movs	r1, #224	; 0xe0
 8005030:	01c9      	lsls	r1, r1, #7
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005036:	4b5d      	ldr	r3, [pc, #372]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4a5d      	ldr	r2, [pc, #372]	; (80051b0 <HAL_RCC_ClockConfig+0x1fc>)
 800503c:	4013      	ands	r3, r2
 800503e:	0019      	movs	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	4b59      	ldr	r3, [pc, #356]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 8005046:	430a      	orrs	r2, r1
 8005048:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2201      	movs	r2, #1
 8005050:	4013      	ands	r3, r2
 8005052:	d057      	beq.n	8005104 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800505c:	4b53      	ldr	r3, [pc, #332]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	029b      	lsls	r3, r3, #10
 8005064:	4013      	ands	r3, r2
 8005066:	d12b      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e097      	b.n	800519c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d107      	bne.n	8005084 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005074:	4b4d      	ldr	r3, [pc, #308]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	2380      	movs	r3, #128	; 0x80
 800507a:	049b      	lsls	r3, r3, #18
 800507c:	4013      	ands	r3, r2
 800507e:	d11f      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e08b      	b.n	800519c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d107      	bne.n	800509c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800508c:	4b47      	ldr	r3, [pc, #284]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4013      	ands	r3, r2
 8005096:	d113      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e07f      	b.n	800519c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d106      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050a4:	4b41      	ldr	r3, [pc, #260]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 80050a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a8:	2202      	movs	r2, #2
 80050aa:	4013      	ands	r3, r2
 80050ac:	d108      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e074      	b.n	800519c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b2:	4b3e      	ldr	r3, [pc, #248]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 80050b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b6:	2202      	movs	r2, #2
 80050b8:	4013      	ands	r3, r2
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e06d      	b.n	800519c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050c0:	4b3a      	ldr	r3, [pc, #232]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2207      	movs	r2, #7
 80050c6:	4393      	bics	r3, r2
 80050c8:	0019      	movs	r1, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	4b37      	ldr	r3, [pc, #220]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 80050d0:	430a      	orrs	r2, r1
 80050d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d4:	f7fe fab6 	bl	8003644 <HAL_GetTick>
 80050d8:	0003      	movs	r3, r0
 80050da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050dc:	e009      	b.n	80050f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050de:	f7fe fab1 	bl	8003644 <HAL_GetTick>
 80050e2:	0002      	movs	r2, r0
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	4a2f      	ldr	r2, [pc, #188]	; (80051a8 <HAL_RCC_ClockConfig+0x1f4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e054      	b.n	800519c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	4b2e      	ldr	r3, [pc, #184]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2238      	movs	r2, #56	; 0x38
 80050f8:	401a      	ands	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	429a      	cmp	r2, r3
 8005102:	d1ec      	bne.n	80050de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005104:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2207      	movs	r2, #7
 800510a:	4013      	ands	r3, r2
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d21e      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005112:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2207      	movs	r2, #7
 8005118:	4393      	bics	r3, r2
 800511a:	0019      	movs	r1, r3
 800511c:	4b21      	ldr	r3, [pc, #132]	; (80051a4 <HAL_RCC_ClockConfig+0x1f0>)
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005124:	f7fe fa8e 	bl	8003644 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800512c:	e009      	b.n	8005142 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512e:	f7fe fa89 	bl	8003644 <HAL_GetTick>
 8005132:	0002      	movs	r2, r0
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	4a1b      	ldr	r2, [pc, #108]	; (80051a8 <HAL_RCC_ClockConfig+0x1f4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e02c      	b.n	800519c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2207      	movs	r2, #7
 8005148:	4013      	ands	r3, r2
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d1ee      	bne.n	800512e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2204      	movs	r2, #4
 8005156:	4013      	ands	r3, r2
 8005158:	d009      	beq.n	800516e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800515a:	4b14      	ldr	r3, [pc, #80]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	4a15      	ldr	r2, [pc, #84]	; (80051b4 <HAL_RCC_ClockConfig+0x200>)
 8005160:	4013      	ands	r3, r2
 8005162:	0019      	movs	r1, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	4b10      	ldr	r3, [pc, #64]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 800516a:	430a      	orrs	r2, r1
 800516c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800516e:	f000 f829 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 8005172:	0001      	movs	r1, r0
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <HAL_RCC_ClockConfig+0x1f8>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	0a1b      	lsrs	r3, r3, #8
 800517a:	220f      	movs	r2, #15
 800517c:	401a      	ands	r2, r3
 800517e:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <HAL_RCC_ClockConfig+0x204>)
 8005180:	0092      	lsls	r2, r2, #2
 8005182:	58d3      	ldr	r3, [r2, r3]
 8005184:	221f      	movs	r2, #31
 8005186:	4013      	ands	r3, r2
 8005188:	000a      	movs	r2, r1
 800518a:	40da      	lsrs	r2, r3
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_RCC_ClockConfig+0x208>)
 800518e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_RCC_ClockConfig+0x20c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	0018      	movs	r0, r3
 8005196:	f7fe f9f9 	bl	800358c <HAL_InitTick>
 800519a:	0003      	movs	r3, r0
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	b004      	add	sp, #16
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40022000 	.word	0x40022000
 80051a8:	00001388 	.word	0x00001388
 80051ac:	40021000 	.word	0x40021000
 80051b0:	fffff0ff 	.word	0xfffff0ff
 80051b4:	ffff8fff 	.word	0xffff8fff
 80051b8:	080084a4 	.word	0x080084a4
 80051bc:	20000378 	.word	0x20000378
 80051c0:	2000037c 	.word	0x2000037c

080051c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051ca:	4b3c      	ldr	r3, [pc, #240]	; (80052bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2238      	movs	r2, #56	; 0x38
 80051d0:	4013      	ands	r3, r2
 80051d2:	d10f      	bne.n	80051f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80051d4:	4b39      	ldr	r3, [pc, #228]	; (80052bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	0adb      	lsrs	r3, r3, #11
 80051da:	2207      	movs	r2, #7
 80051dc:	4013      	ands	r3, r2
 80051de:	2201      	movs	r2, #1
 80051e0:	409a      	lsls	r2, r3
 80051e2:	0013      	movs	r3, r2
 80051e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	4835      	ldr	r0, [pc, #212]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80051ea:	f7fa ff93 	bl	8000114 <__udivsi3>
 80051ee:	0003      	movs	r3, r0
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e05d      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051f4:	4b31      	ldr	r3, [pc, #196]	; (80052bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2238      	movs	r2, #56	; 0x38
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d102      	bne.n	8005206 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005200:	4b30      	ldr	r3, [pc, #192]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	e054      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005206:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2238      	movs	r2, #56	; 0x38
 800520c:	4013      	ands	r3, r2
 800520e:	2b10      	cmp	r3, #16
 8005210:	d138      	bne.n	8005284 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005212:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2203      	movs	r2, #3
 8005218:	4013      	ands	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800521c:	4b27      	ldr	r3, [pc, #156]	; (80052bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	2207      	movs	r2, #7
 8005224:	4013      	ands	r3, r2
 8005226:	3301      	adds	r3, #1
 8005228:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b03      	cmp	r3, #3
 800522e:	d10d      	bne.n	800524c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	4824      	ldr	r0, [pc, #144]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005234:	f7fa ff6e 	bl	8000114 <__udivsi3>
 8005238:	0003      	movs	r3, r0
 800523a:	0019      	movs	r1, r3
 800523c:	4b1f      	ldr	r3, [pc, #124]	; (80052bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	0a1b      	lsrs	r3, r3, #8
 8005242:	227f      	movs	r2, #127	; 0x7f
 8005244:	4013      	ands	r3, r2
 8005246:	434b      	muls	r3, r1
 8005248:	617b      	str	r3, [r7, #20]
        break;
 800524a:	e00d      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	481c      	ldr	r0, [pc, #112]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005250:	f7fa ff60 	bl	8000114 <__udivsi3>
 8005254:	0003      	movs	r3, r0
 8005256:	0019      	movs	r1, r3
 8005258:	4b18      	ldr	r3, [pc, #96]	; (80052bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	0a1b      	lsrs	r3, r3, #8
 800525e:	227f      	movs	r2, #127	; 0x7f
 8005260:	4013      	ands	r3, r2
 8005262:	434b      	muls	r3, r1
 8005264:	617b      	str	r3, [r7, #20]
        break;
 8005266:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005268:	4b14      	ldr	r3, [pc, #80]	; (80052bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	0f5b      	lsrs	r3, r3, #29
 800526e:	2207      	movs	r2, #7
 8005270:	4013      	ands	r3, r2
 8005272:	3301      	adds	r3, #1
 8005274:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	6978      	ldr	r0, [r7, #20]
 800527a:	f7fa ff4b 	bl	8000114 <__udivsi3>
 800527e:	0003      	movs	r3, r0
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e015      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005284:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2238      	movs	r2, #56	; 0x38
 800528a:	4013      	ands	r3, r2
 800528c:	2b20      	cmp	r3, #32
 800528e:	d103      	bne.n	8005298 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	e00b      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005298:	4b08      	ldr	r3, [pc, #32]	; (80052bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2238      	movs	r2, #56	; 0x38
 800529e:	4013      	ands	r3, r2
 80052a0:	2b18      	cmp	r3, #24
 80052a2:	d103      	bne.n	80052ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80052a4:	23fa      	movs	r3, #250	; 0xfa
 80052a6:	01db      	lsls	r3, r3, #7
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	e001      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052b0:	693b      	ldr	r3, [r7, #16]
}
 80052b2:	0018      	movs	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b006      	add	sp, #24
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	40021000 	.word	0x40021000
 80052c0:	00f42400 	.word	0x00f42400
 80052c4:	007a1200 	.word	0x007a1200

080052c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052cc:	4b02      	ldr	r3, [pc, #8]	; (80052d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	20000378 	.word	0x20000378

080052dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052dc:	b5b0      	push	{r4, r5, r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80052e0:	f7ff fff2 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 80052e4:	0004      	movs	r4, r0
 80052e6:	f7ff fb49 	bl	800497c <LL_RCC_GetAPB1Prescaler>
 80052ea:	0003      	movs	r3, r0
 80052ec:	0b1a      	lsrs	r2, r3, #12
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052f0:	0092      	lsls	r2, r2, #2
 80052f2:	58d3      	ldr	r3, [r2, r3]
 80052f4:	221f      	movs	r2, #31
 80052f6:	4013      	ands	r3, r2
 80052f8:	40dc      	lsrs	r4, r3
 80052fa:	0023      	movs	r3, r4
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	bdb0      	pop	{r4, r5, r7, pc}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	080084e4 	.word	0x080084e4

08005308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e04a      	b.n	80053b0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	223d      	movs	r2, #61	; 0x3d
 800531e:	5c9b      	ldrb	r3, [r3, r2]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d107      	bne.n	8005336 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	223c      	movs	r2, #60	; 0x3c
 800532a:	2100      	movs	r1, #0
 800532c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	0018      	movs	r0, r3
 8005332:	f7fd ffef 	bl	8003314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	223d      	movs	r2, #61	; 0x3d
 800533a:	2102      	movs	r1, #2
 800533c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3304      	adds	r3, #4
 8005346:	0019      	movs	r1, r3
 8005348:	0010      	movs	r0, r2
 800534a:	f000 fab3 	bl	80058b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2248      	movs	r2, #72	; 0x48
 8005352:	2101      	movs	r1, #1
 8005354:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	223e      	movs	r2, #62	; 0x3e
 800535a:	2101      	movs	r1, #1
 800535c:	5499      	strb	r1, [r3, r2]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	223f      	movs	r2, #63	; 0x3f
 8005362:	2101      	movs	r1, #1
 8005364:	5499      	strb	r1, [r3, r2]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2240      	movs	r2, #64	; 0x40
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2241      	movs	r2, #65	; 0x41
 8005372:	2101      	movs	r1, #1
 8005374:	5499      	strb	r1, [r3, r2]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2242      	movs	r2, #66	; 0x42
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2243      	movs	r2, #67	; 0x43
 8005382:	2101      	movs	r1, #1
 8005384:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2244      	movs	r2, #68	; 0x44
 800538a:	2101      	movs	r1, #1
 800538c:	5499      	strb	r1, [r3, r2]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2245      	movs	r2, #69	; 0x45
 8005392:	2101      	movs	r1, #1
 8005394:	5499      	strb	r1, [r3, r2]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2246      	movs	r2, #70	; 0x46
 800539a:	2101      	movs	r1, #1
 800539c:	5499      	strb	r1, [r3, r2]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2247      	movs	r2, #71	; 0x47
 80053a2:	2101      	movs	r1, #1
 80053a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	223d      	movs	r2, #61	; 0x3d
 80053aa:	2101      	movs	r1, #1
 80053ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b002      	add	sp, #8
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	223d      	movs	r2, #61	; 0x3d
 80053c4:	5c9b      	ldrb	r3, [r3, r2]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d001      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e03c      	b.n	800544a <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	223d      	movs	r2, #61	; 0x3d
 80053d4:	2102      	movs	r1, #2
 80053d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2101      	movs	r1, #1
 80053e4:	430a      	orrs	r2, r1
 80053e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a19      	ldr	r2, [pc, #100]	; (8005454 <HAL_TIM_Base_Start_IT+0x9c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d009      	beq.n	8005406 <HAL_TIM_Base_Start_IT+0x4e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a18      	ldr	r2, [pc, #96]	; (8005458 <HAL_TIM_Base_Start_IT+0xa0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_TIM_Base_Start_IT+0x4e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a16      	ldr	r2, [pc, #88]	; (800545c <HAL_TIM_Base_Start_IT+0xa4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d116      	bne.n	8005434 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	4a14      	ldr	r2, [pc, #80]	; (8005460 <HAL_TIM_Base_Start_IT+0xa8>)
 800540e:	4013      	ands	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b06      	cmp	r3, #6
 8005416:	d016      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x8e>
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	025b      	lsls	r3, r3, #9
 800541e:	429a      	cmp	r2, r3
 8005420:	d011      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2101      	movs	r1, #1
 800542e:	430a      	orrs	r2, r1
 8005430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005432:	e008      	b.n	8005446 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e000      	b.n	8005448 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005446:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b004      	add	sp, #16
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40000400 	.word	0x40000400
 800545c:	40014000 	.word	0x40014000
 8005460:	00010007 	.word	0x00010007

08005464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2202      	movs	r2, #2
 8005474:	4013      	ands	r3, r2
 8005476:	2b02      	cmp	r3, #2
 8005478:	d124      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2202      	movs	r2, #2
 8005482:	4013      	ands	r3, r2
 8005484:	2b02      	cmp	r3, #2
 8005486:	d11d      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2203      	movs	r2, #3
 800548e:	4252      	negs	r2, r2
 8005490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2203      	movs	r2, #3
 80054a0:	4013      	ands	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	0018      	movs	r0, r3
 80054a8:	f000 f9ec 	bl	8005884 <HAL_TIM_IC_CaptureCallback>
 80054ac:	e007      	b.n	80054be <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	0018      	movs	r0, r3
 80054b2:	f000 f9df 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f000 f9eb 	bl	8005894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2204      	movs	r2, #4
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d125      	bne.n	800551e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2204      	movs	r2, #4
 80054da:	4013      	ands	r3, r2
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d11e      	bne.n	800551e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2205      	movs	r2, #5
 80054e6:	4252      	negs	r2, r2
 80054e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	23c0      	movs	r3, #192	; 0xc0
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4013      	ands	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	0018      	movs	r0, r3
 8005502:	f000 f9bf 	bl	8005884 <HAL_TIM_IC_CaptureCallback>
 8005506:	e007      	b.n	8005518 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	0018      	movs	r0, r3
 800550c:	f000 f9b2 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	0018      	movs	r0, r3
 8005514:	f000 f9be 	bl	8005894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	2208      	movs	r2, #8
 8005526:	4013      	ands	r3, r2
 8005528:	2b08      	cmp	r3, #8
 800552a:	d124      	bne.n	8005576 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	2208      	movs	r2, #8
 8005534:	4013      	ands	r3, r2
 8005536:	2b08      	cmp	r3, #8
 8005538:	d11d      	bne.n	8005576 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2209      	movs	r2, #9
 8005540:	4252      	negs	r2, r2
 8005542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2204      	movs	r2, #4
 8005548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	2203      	movs	r2, #3
 8005552:	4013      	ands	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	0018      	movs	r0, r3
 800555a:	f000 f993 	bl	8005884 <HAL_TIM_IC_CaptureCallback>
 800555e:	e007      	b.n	8005570 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	0018      	movs	r0, r3
 8005564:	f000 f986 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	0018      	movs	r0, r3
 800556c:	f000 f992 	bl	8005894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2210      	movs	r2, #16
 800557e:	4013      	ands	r3, r2
 8005580:	2b10      	cmp	r3, #16
 8005582:	d125      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2210      	movs	r2, #16
 800558c:	4013      	ands	r3, r2
 800558e:	2b10      	cmp	r3, #16
 8005590:	d11e      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2211      	movs	r2, #17
 8005598:	4252      	negs	r2, r2
 800559a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2208      	movs	r2, #8
 80055a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	23c0      	movs	r3, #192	; 0xc0
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4013      	ands	r3, r2
 80055ae:	d004      	beq.n	80055ba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	0018      	movs	r0, r3
 80055b4:	f000 f966 	bl	8005884 <HAL_TIM_IC_CaptureCallback>
 80055b8:	e007      	b.n	80055ca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	0018      	movs	r0, r3
 80055be:	f000 f959 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	0018      	movs	r0, r3
 80055c6:	f000 f965 	bl	8005894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2201      	movs	r2, #1
 80055d8:	4013      	ands	r3, r2
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d10f      	bne.n	80055fe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d108      	bne.n	80055fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2202      	movs	r2, #2
 80055f2:	4252      	negs	r2, r2
 80055f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	0018      	movs	r0, r3
 80055fa:	f7fc fb23 	bl	8001c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2280      	movs	r2, #128	; 0x80
 8005606:	4013      	ands	r3, r2
 8005608:	2b80      	cmp	r3, #128	; 0x80
 800560a:	d10f      	bne.n	800562c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	2280      	movs	r2, #128	; 0x80
 8005614:	4013      	ands	r3, r2
 8005616:	2b80      	cmp	r3, #128	; 0x80
 8005618:	d108      	bne.n	800562c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2281      	movs	r2, #129	; 0x81
 8005620:	4252      	negs	r2, r2
 8005622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	0018      	movs	r0, r3
 8005628:	f000 fac6 	bl	8005bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	2380      	movs	r3, #128	; 0x80
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	401a      	ands	r2, r3
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	429a      	cmp	r2, r3
 800563e:	d10e      	bne.n	800565e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2280      	movs	r2, #128	; 0x80
 8005648:	4013      	ands	r3, r2
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	d107      	bne.n	800565e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <HAL_TIM_IRQHandler+0x260>)
 8005654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	0018      	movs	r0, r3
 800565a:	f000 fab5 	bl	8005bc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2240      	movs	r2, #64	; 0x40
 8005666:	4013      	ands	r3, r2
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d10f      	bne.n	800568c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	2240      	movs	r2, #64	; 0x40
 8005674:	4013      	ands	r3, r2
 8005676:	2b40      	cmp	r3, #64	; 0x40
 8005678:	d108      	bne.n	800568c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2241      	movs	r2, #65	; 0x41
 8005680:	4252      	negs	r2, r2
 8005682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	0018      	movs	r0, r3
 8005688:	f000 f90c 	bl	80058a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2220      	movs	r2, #32
 8005694:	4013      	ands	r3, r2
 8005696:	2b20      	cmp	r3, #32
 8005698:	d10f      	bne.n	80056ba <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d108      	bne.n	80056ba <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2221      	movs	r2, #33	; 0x21
 80056ae:	4252      	negs	r2, r2
 80056b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	0018      	movs	r0, r3
 80056b6:	f000 fa77 	bl	8005ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	46bd      	mov	sp, r7
 80056be:	b002      	add	sp, #8
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	fffffeff 	.word	0xfffffeff

080056c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d2:	230f      	movs	r3, #15
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	223c      	movs	r2, #60	; 0x3c
 80056de:	5c9b      	ldrb	r3, [r3, r2]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_TIM_ConfigClockSource+0x20>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0bc      	b.n	8005862 <HAL_TIM_ConfigClockSource+0x19a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	223c      	movs	r2, #60	; 0x3c
 80056ec:	2101      	movs	r1, #1
 80056ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	223d      	movs	r2, #61	; 0x3d
 80056f4:	2102      	movs	r1, #2
 80056f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4a5a      	ldr	r2, [pc, #360]	; (800586c <HAL_TIM_ConfigClockSource+0x1a4>)
 8005704:	4013      	ands	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a59      	ldr	r2, [pc, #356]	; (8005870 <HAL_TIM_ConfigClockSource+0x1a8>)
 800570c:	4013      	ands	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2280      	movs	r2, #128	; 0x80
 800571e:	0192      	lsls	r2, r2, #6
 8005720:	4293      	cmp	r3, r2
 8005722:	d040      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0xde>
 8005724:	2280      	movs	r2, #128	; 0x80
 8005726:	0192      	lsls	r2, r2, #6
 8005728:	4293      	cmp	r3, r2
 800572a:	d900      	bls.n	800572e <HAL_TIM_ConfigClockSource+0x66>
 800572c:	e088      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 800572e:	2280      	movs	r2, #128	; 0x80
 8005730:	0152      	lsls	r2, r2, #5
 8005732:	4293      	cmp	r3, r2
 8005734:	d100      	bne.n	8005738 <HAL_TIM_ConfigClockSource+0x70>
 8005736:	e088      	b.n	800584a <HAL_TIM_ConfigClockSource+0x182>
 8005738:	2280      	movs	r2, #128	; 0x80
 800573a:	0152      	lsls	r2, r2, #5
 800573c:	4293      	cmp	r3, r2
 800573e:	d900      	bls.n	8005742 <HAL_TIM_ConfigClockSource+0x7a>
 8005740:	e07e      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 8005742:	2b70      	cmp	r3, #112	; 0x70
 8005744:	d018      	beq.n	8005778 <HAL_TIM_ConfigClockSource+0xb0>
 8005746:	d900      	bls.n	800574a <HAL_TIM_ConfigClockSource+0x82>
 8005748:	e07a      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 800574a:	2b60      	cmp	r3, #96	; 0x60
 800574c:	d04f      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x126>
 800574e:	d900      	bls.n	8005752 <HAL_TIM_ConfigClockSource+0x8a>
 8005750:	e076      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 8005752:	2b50      	cmp	r3, #80	; 0x50
 8005754:	d03b      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x106>
 8005756:	d900      	bls.n	800575a <HAL_TIM_ConfigClockSource+0x92>
 8005758:	e072      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 800575a:	2b40      	cmp	r3, #64	; 0x40
 800575c:	d057      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x146>
 800575e:	d900      	bls.n	8005762 <HAL_TIM_ConfigClockSource+0x9a>
 8005760:	e06e      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 8005762:	2b30      	cmp	r3, #48	; 0x30
 8005764:	d063      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x166>
 8005766:	d86b      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 8005768:	2b20      	cmp	r3, #32
 800576a:	d060      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x166>
 800576c:	d868      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d05d      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x166>
 8005772:	2b10      	cmp	r3, #16
 8005774:	d05b      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x166>
 8005776:	e063      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f000 f986 	bl	8005a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2277      	movs	r2, #119	; 0x77
 8005798:	4313      	orrs	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]
      break;
 80057a4:	e052      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6899      	ldr	r1, [r3, #8]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f000 f96f 	bl	8005a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2180      	movs	r1, #128	; 0x80
 80057c6:	01c9      	lsls	r1, r1, #7
 80057c8:	430a      	orrs	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]
      break;
 80057cc:	e03e      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	001a      	movs	r2, r3
 80057dc:	f000 f8e0 	bl	80059a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2150      	movs	r1, #80	; 0x50
 80057e6:	0018      	movs	r0, r3
 80057e8:	f000 f93a 	bl	8005a60 <TIM_ITRx_SetConfig>
      break;
 80057ec:	e02e      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6859      	ldr	r1, [r3, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	001a      	movs	r2, r3
 80057fc:	f000 f8fe 	bl	80059fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2160      	movs	r1, #96	; 0x60
 8005806:	0018      	movs	r0, r3
 8005808:	f000 f92a 	bl	8005a60 <TIM_ITRx_SetConfig>
      break;
 800580c:	e01e      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	6859      	ldr	r1, [r3, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	001a      	movs	r2, r3
 800581c:	f000 f8c0 	bl	80059a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2140      	movs	r1, #64	; 0x40
 8005826:	0018      	movs	r0, r3
 8005828:	f000 f91a 	bl	8005a60 <TIM_ITRx_SetConfig>
      break;
 800582c:	e00e      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	0019      	movs	r1, r3
 8005838:	0010      	movs	r0, r2
 800583a:	f000 f911 	bl	8005a60 <TIM_ITRx_SetConfig>
      break;
 800583e:	e005      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005840:	230f      	movs	r3, #15
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
      break;
 8005848:	e000      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800584a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	223d      	movs	r2, #61	; 0x3d
 8005850:	2101      	movs	r1, #1
 8005852:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	223c      	movs	r2, #60	; 0x3c
 8005858:	2100      	movs	r1, #0
 800585a:	5499      	strb	r1, [r3, r2]

  return status;
 800585c:	230f      	movs	r3, #15
 800585e:	18fb      	adds	r3, r7, r3
 8005860:	781b      	ldrb	r3, [r3, #0]
}
 8005862:	0018      	movs	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	b004      	add	sp, #16
 8005868:	bd80      	pop	{r7, pc}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	ffceff88 	.word	0xffceff88
 8005870:	ffff00ff 	.word	0xffff00ff

08005874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	b002      	add	sp, #8
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800588c:	46c0      	nop			; (mov r8, r8)
 800588e:	46bd      	mov	sp, r7
 8005890:	b002      	add	sp, #8
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800589c:	46c0      	nop			; (mov r8, r8)
 800589e:	46bd      	mov	sp, r7
 80058a0:	b002      	add	sp, #8
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058ac:	46c0      	nop			; (mov r8, r8)
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b002      	add	sp, #8
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a2f      	ldr	r2, [pc, #188]	; (8005984 <TIM_Base_SetConfig+0xd0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_Base_SetConfig+0x20>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a2e      	ldr	r2, [pc, #184]	; (8005988 <TIM_Base_SetConfig+0xd4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d108      	bne.n	80058e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2270      	movs	r2, #112	; 0x70
 80058d8:	4393      	bics	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a26      	ldr	r2, [pc, #152]	; (8005984 <TIM_Base_SetConfig+0xd0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <TIM_Base_SetConfig+0x62>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a25      	ldr	r2, [pc, #148]	; (8005988 <TIM_Base_SetConfig+0xd4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00f      	beq.n	8005916 <TIM_Base_SetConfig+0x62>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a24      	ldr	r2, [pc, #144]	; (800598c <TIM_Base_SetConfig+0xd8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00b      	beq.n	8005916 <TIM_Base_SetConfig+0x62>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a23      	ldr	r2, [pc, #140]	; (8005990 <TIM_Base_SetConfig+0xdc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d007      	beq.n	8005916 <TIM_Base_SetConfig+0x62>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a22      	ldr	r2, [pc, #136]	; (8005994 <TIM_Base_SetConfig+0xe0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d003      	beq.n	8005916 <TIM_Base_SetConfig+0x62>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a21      	ldr	r2, [pc, #132]	; (8005998 <TIM_Base_SetConfig+0xe4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d108      	bne.n	8005928 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a20      	ldr	r2, [pc, #128]	; (800599c <TIM_Base_SetConfig+0xe8>)
 800591a:	4013      	ands	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2280      	movs	r2, #128	; 0x80
 800592c:	4393      	bics	r3, r2
 800592e:	001a      	movs	r2, r3
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a0c      	ldr	r2, [pc, #48]	; (8005984 <TIM_Base_SetConfig+0xd0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_Base_SetConfig+0xba>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a0d      	ldr	r2, [pc, #52]	; (8005990 <TIM_Base_SetConfig+0xdc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <TIM_Base_SetConfig+0xba>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a0c      	ldr	r2, [pc, #48]	; (8005994 <TIM_Base_SetConfig+0xe0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_Base_SetConfig+0xba>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a0b      	ldr	r2, [pc, #44]	; (8005998 <TIM_Base_SetConfig+0xe4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d103      	bne.n	8005976 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	615a      	str	r2, [r3, #20]
}
 800597c:	46c0      	nop			; (mov r8, r8)
 800597e:	46bd      	mov	sp, r7
 8005980:	b004      	add	sp, #16
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40012c00 	.word	0x40012c00
 8005988:	40000400 	.word	0x40000400
 800598c:	40002000 	.word	0x40002000
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800
 800599c:	fffffcff 	.word	0xfffffcff

080059a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	2201      	movs	r2, #1
 80059b8:	4393      	bics	r3, r2
 80059ba:	001a      	movs	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	22f0      	movs	r2, #240	; 0xf0
 80059ca:	4393      	bics	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	220a      	movs	r2, #10
 80059dc:	4393      	bics	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b006      	add	sp, #24
 80059fa:	bd80      	pop	{r7, pc}

080059fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	4393      	bics	r3, r2
 8005a10:	001a      	movs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	4a0d      	ldr	r2, [pc, #52]	; (8005a5c <TIM_TI2_ConfigInputStage+0x60>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	031b      	lsls	r3, r3, #12
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	22a0      	movs	r2, #160	; 0xa0
 8005a38:	4393      	bics	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b006      	add	sp, #24
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	ffff0fff 	.word	0xffff0fff

08005a60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a08      	ldr	r2, [pc, #32]	; (8005a94 <TIM_ITRx_SetConfig+0x34>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	2207      	movs	r2, #7
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	609a      	str	r2, [r3, #8]
}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b004      	add	sp, #16
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	ffcfff8f 	.word	0xffcfff8f

08005a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <TIM_ETR_SetConfig+0x3c>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	021a      	lsls	r2, r3, #8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	609a      	str	r2, [r3, #8]
}
 8005acc:	46c0      	nop			; (mov r8, r8)
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b006      	add	sp, #24
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	ffff00ff 	.word	0xffff00ff

08005ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	223c      	movs	r2, #60	; 0x3c
 8005ae6:	5c9b      	ldrb	r3, [r3, r2]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e04f      	b.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	223c      	movs	r2, #60	; 0x3c
 8005af4:	2101      	movs	r1, #1
 8005af6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	223d      	movs	r2, #61	; 0x3d
 8005afc:	2102      	movs	r1, #2
 8005afe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a20      	ldr	r2, [pc, #128]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d108      	bne.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2270      	movs	r2, #112	; 0x70
 8005b30:	4393      	bics	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a13      	ldr	r2, [pc, #76]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d009      	beq.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a12      	ldr	r2, [pc, #72]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d004      	beq.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a11      	ldr	r2, [pc, #68]	; (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d10c      	bne.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2280      	movs	r2, #128	; 0x80
 8005b68:	4393      	bics	r3, r2
 8005b6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	223d      	movs	r2, #61	; 0x3d
 8005b82:	2101      	movs	r1, #1
 8005b84:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	223c      	movs	r2, #60	; 0x3c
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	0018      	movs	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b004      	add	sp, #16
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	ff0fffff 	.word	0xff0fffff
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40014000 	.word	0x40014000

08005ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bb0:	46c0      	nop			; (mov r8, r8)
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b002      	add	sp, #8
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bc0:	46c0      	nop			; (mov r8, r8)
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b002      	add	sp, #8
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bd0:	46c0      	nop			; (mov r8, r8)
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	b002      	add	sp, #8
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e046      	b.n	8005c78 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2288      	movs	r2, #136	; 0x88
 8005bee:	589b      	ldr	r3, [r3, r2]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d107      	bne.n	8005c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2284      	movs	r2, #132	; 0x84
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7fd fbae 	bl	8003360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2288      	movs	r2, #136	; 0x88
 8005c08:	2124      	movs	r1, #36	; 0x24
 8005c0a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2101      	movs	r1, #1
 8005c18:	438a      	bics	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f000 fc66 	bl	80064f0 <UART_SetConfig>
 8005c24:	0003      	movs	r3, r0
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e024      	b.n	8005c78 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f000 fdfd 	bl	8006838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	490d      	ldr	r1, [pc, #52]	; (8005c80 <HAL_UART_Init+0xa8>)
 8005c4a:	400a      	ands	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	212a      	movs	r1, #42	; 0x2a
 8005c5a:	438a      	bics	r2, r1
 8005c5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2101      	movs	r1, #1
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	0018      	movs	r0, r3
 8005c72:	f000 fe95 	bl	80069a0 <UART_CheckIdleState>
 8005c76:	0003      	movs	r3, r0
}
 8005c78:	0018      	movs	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b002      	add	sp, #8
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	ffffb7ff 	.word	0xffffb7ff

08005c84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	; 0x28
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	1dbb      	adds	r3, r7, #6
 8005c92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2288      	movs	r2, #136	; 0x88
 8005c98:	589b      	ldr	r3, [r3, r2]
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d000      	beq.n	8005ca0 <HAL_UART_Transmit+0x1c>
 8005c9e:	e088      	b.n	8005db2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_UART_Transmit+0x2a>
 8005ca6:	1dbb      	adds	r3, r7, #6
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e080      	b.n	8005db4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	015b      	lsls	r3, r3, #5
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d109      	bne.n	8005cd2 <HAL_UART_Transmit+0x4e>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d105      	bne.n	8005cd2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d001      	beq.n	8005cd2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e070      	b.n	8005db4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2290      	movs	r2, #144	; 0x90
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2288      	movs	r2, #136	; 0x88
 8005cde:	2121      	movs	r1, #33	; 0x21
 8005ce0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ce2:	f7fd fcaf 	bl	8003644 <HAL_GetTick>
 8005ce6:	0003      	movs	r3, r0
 8005ce8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1dba      	adds	r2, r7, #6
 8005cee:	2154      	movs	r1, #84	; 0x54
 8005cf0:	8812      	ldrh	r2, [r2, #0]
 8005cf2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	1dba      	adds	r2, r7, #6
 8005cf8:	2156      	movs	r1, #86	; 0x56
 8005cfa:	8812      	ldrh	r2, [r2, #0]
 8005cfc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	015b      	lsls	r3, r3, #5
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d108      	bne.n	8005d1c <HAL_UART_Transmit+0x98>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d104      	bne.n	8005d1c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	e003      	b.n	8005d24 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d24:	e02c      	b.n	8005d80 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	0013      	movs	r3, r2
 8005d30:	2200      	movs	r2, #0
 8005d32:	2180      	movs	r1, #128	; 0x80
 8005d34:	f000 fe82 	bl	8006a3c <UART_WaitOnFlagUntilTimeout>
 8005d38:	1e03      	subs	r3, r0, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e039      	b.n	8005db4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	001a      	movs	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	05d2      	lsls	r2, r2, #23
 8005d52:	0dd2      	lsrs	r2, r2, #23
 8005d54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	3302      	adds	r3, #2
 8005d5a:	61bb      	str	r3, [r7, #24]
 8005d5c:	e007      	b.n	8005d6e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	781a      	ldrb	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2256      	movs	r2, #86	; 0x56
 8005d72:	5a9b      	ldrh	r3, [r3, r2]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b299      	uxth	r1, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2256      	movs	r2, #86	; 0x56
 8005d7e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2256      	movs	r2, #86	; 0x56
 8005d84:	5a9b      	ldrh	r3, [r3, r2]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1cc      	bne.n	8005d26 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	0013      	movs	r3, r2
 8005d96:	2200      	movs	r2, #0
 8005d98:	2140      	movs	r1, #64	; 0x40
 8005d9a:	f000 fe4f 	bl	8006a3c <UART_WaitOnFlagUntilTimeout>
 8005d9e:	1e03      	subs	r3, r0, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e006      	b.n	8005db4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2288      	movs	r2, #136	; 0x88
 8005daa:	2120      	movs	r1, #32
 8005dac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e000      	b.n	8005db4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005db2:	2302      	movs	r3, #2
  }
}
 8005db4:	0018      	movs	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b008      	add	sp, #32
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	1dbb      	adds	r3, r7, #6
 8005dc8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	228c      	movs	r2, #140	; 0x8c
 8005dce:	589b      	ldr	r3, [r3, r2]
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d145      	bne.n	8005e60 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_UART_Receive_IT+0x26>
 8005dda:	1dbb      	adds	r3, r7, #6
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e03d      	b.n	8005e62 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	2380      	movs	r3, #128	; 0x80
 8005dec:	015b      	lsls	r3, r3, #5
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d109      	bne.n	8005e06 <HAL_UART_Receive_IT+0x4a>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d105      	bne.n	8005e06 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d001      	beq.n	8005e06 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e02d      	b.n	8005e62 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	2380      	movs	r3, #128	; 0x80
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	4013      	ands	r3, r2
 8005e18:	d019      	beq.n	8005e4e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e1e:	613b      	str	r3, [r7, #16]
  return(result);
 8005e20:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e22:	61fb      	str	r3, [r7, #28]
 8005e24:	2301      	movs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f383 8810 	msr	PRIMASK, r3
}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2180      	movs	r1, #128	; 0x80
 8005e3c:	04c9      	lsls	r1, r1, #19
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f383 8810 	msr	PRIMASK, r3
}
 8005e4c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e4e:	1dbb      	adds	r3, r7, #6
 8005e50:	881a      	ldrh	r2, [r3, #0]
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	0018      	movs	r0, r3
 8005e58:	f000 feb8 	bl	8006bcc <UART_Start_Receive_IT>
 8005e5c:	0003      	movs	r3, r0
 8005e5e:	e000      	b.n	8005e62 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005e60:	2302      	movs	r3, #2
  }
}
 8005e62:	0018      	movs	r0, r3
 8005e64:	46bd      	mov	sp, r7
 8005e66:	b008      	add	sp, #32
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e6c:	b5b0      	push	{r4, r5, r7, lr}
 8005e6e:	b0aa      	sub	sp, #168	; 0xa8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	22a4      	movs	r2, #164	; 0xa4
 8005e7c:	18b9      	adds	r1, r7, r2
 8005e7e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	20a0      	movs	r0, #160	; 0xa0
 8005e88:	1839      	adds	r1, r7, r0
 8005e8a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	249c      	movs	r4, #156	; 0x9c
 8005e94:	1939      	adds	r1, r7, r4
 8005e96:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e98:	0011      	movs	r1, r2
 8005e9a:	18bb      	adds	r3, r7, r2
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4aa2      	ldr	r2, [pc, #648]	; (8006128 <HAL_UART_IRQHandler+0x2bc>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2298      	movs	r2, #152	; 0x98
 8005ea4:	18bd      	adds	r5, r7, r2
 8005ea6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005ea8:	18bb      	adds	r3, r7, r2
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11a      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005eb0:	187b      	adds	r3, r7, r1
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d015      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005eba:	183b      	adds	r3, r7, r0
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d105      	bne.n	8005ed0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ec4:	193b      	adds	r3, r7, r4
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	055b      	lsls	r3, r3, #21
 8005ecc:	4013      	ands	r3, r2
 8005ece:	d00a      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d100      	bne.n	8005eda <HAL_UART_IRQHandler+0x6e>
 8005ed8:	e2dc      	b.n	8006494 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	0010      	movs	r0, r2
 8005ee2:	4798      	blx	r3
      }
      return;
 8005ee4:	e2d6      	b.n	8006494 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ee6:	2398      	movs	r3, #152	; 0x98
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d100      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x86>
 8005ef0:	e122      	b.n	8006138 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ef2:	239c      	movs	r3, #156	; 0x9c
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a8c      	ldr	r2, [pc, #560]	; (800612c <HAL_UART_IRQHandler+0x2c0>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	d106      	bne.n	8005f0c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005efe:	23a0      	movs	r3, #160	; 0xa0
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a8a      	ldr	r2, [pc, #552]	; (8006130 <HAL_UART_IRQHandler+0x2c4>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	d100      	bne.n	8005f0c <HAL_UART_IRQHandler+0xa0>
 8005f0a:	e115      	b.n	8006138 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f0c:	23a4      	movs	r3, #164	; 0xa4
 8005f0e:	18fb      	adds	r3, r7, r3
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2201      	movs	r2, #1
 8005f14:	4013      	ands	r3, r2
 8005f16:	d012      	beq.n	8005f3e <HAL_UART_IRQHandler+0xd2>
 8005f18:	23a0      	movs	r3, #160	; 0xa0
 8005f1a:	18fb      	adds	r3, r7, r3
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	2380      	movs	r3, #128	; 0x80
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	4013      	ands	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2290      	movs	r2, #144	; 0x90
 8005f32:	589b      	ldr	r3, [r3, r2]
 8005f34:	2201      	movs	r2, #1
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2190      	movs	r1, #144	; 0x90
 8005f3c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f3e:	23a4      	movs	r3, #164	; 0xa4
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2202      	movs	r2, #2
 8005f46:	4013      	ands	r3, r2
 8005f48:	d011      	beq.n	8005f6e <HAL_UART_IRQHandler+0x102>
 8005f4a:	239c      	movs	r3, #156	; 0x9c
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2201      	movs	r2, #1
 8005f52:	4013      	ands	r3, r2
 8005f54:	d00b      	beq.n	8005f6e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2290      	movs	r2, #144	; 0x90
 8005f62:	589b      	ldr	r3, [r3, r2]
 8005f64:	2204      	movs	r2, #4
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2190      	movs	r1, #144	; 0x90
 8005f6c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6e:	23a4      	movs	r3, #164	; 0xa4
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2204      	movs	r2, #4
 8005f76:	4013      	ands	r3, r2
 8005f78:	d011      	beq.n	8005f9e <HAL_UART_IRQHandler+0x132>
 8005f7a:	239c      	movs	r3, #156	; 0x9c
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2201      	movs	r2, #1
 8005f82:	4013      	ands	r3, r2
 8005f84:	d00b      	beq.n	8005f9e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2290      	movs	r2, #144	; 0x90
 8005f92:	589b      	ldr	r3, [r3, r2]
 8005f94:	2202      	movs	r2, #2
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2190      	movs	r1, #144	; 0x90
 8005f9c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f9e:	23a4      	movs	r3, #164	; 0xa4
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d017      	beq.n	8005fda <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005faa:	23a0      	movs	r3, #160	; 0xa0
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d105      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005fb6:	239c      	movs	r3, #156	; 0x9c
 8005fb8:	18fb      	adds	r3, r7, r3
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a5b      	ldr	r2, [pc, #364]	; (800612c <HAL_UART_IRQHandler+0x2c0>)
 8005fbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fc0:	d00b      	beq.n	8005fda <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2208      	movs	r2, #8
 8005fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2290      	movs	r2, #144	; 0x90
 8005fce:	589b      	ldr	r3, [r3, r2]
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2190      	movs	r1, #144	; 0x90
 8005fd8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fda:	23a4      	movs	r3, #164	; 0xa4
 8005fdc:	18fb      	adds	r3, r7, r3
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	2380      	movs	r3, #128	; 0x80
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	d013      	beq.n	8006010 <HAL_UART_IRQHandler+0x1a4>
 8005fe8:	23a0      	movs	r3, #160	; 0xa0
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	2380      	movs	r3, #128	; 0x80
 8005ff0:	04db      	lsls	r3, r3, #19
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d00c      	beq.n	8006010 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2280      	movs	r2, #128	; 0x80
 8005ffc:	0112      	lsls	r2, r2, #4
 8005ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2290      	movs	r2, #144	; 0x90
 8006004:	589b      	ldr	r3, [r3, r2]
 8006006:	2220      	movs	r2, #32
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2190      	movs	r1, #144	; 0x90
 800600e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2290      	movs	r2, #144	; 0x90
 8006014:	589b      	ldr	r3, [r3, r2]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d100      	bne.n	800601c <HAL_UART_IRQHandler+0x1b0>
 800601a:	e23d      	b.n	8006498 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800601c:	23a4      	movs	r3, #164	; 0xa4
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2220      	movs	r2, #32
 8006024:	4013      	ands	r3, r2
 8006026:	d015      	beq.n	8006054 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006028:	23a0      	movs	r3, #160	; 0xa0
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2220      	movs	r2, #32
 8006030:	4013      	ands	r3, r2
 8006032:	d106      	bne.n	8006042 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006034:	239c      	movs	r3, #156	; 0x9c
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	055b      	lsls	r3, r3, #21
 800603e:	4013      	ands	r3, r2
 8006040:	d008      	beq.n	8006054 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006046:	2b00      	cmp	r3, #0
 8006048:	d004      	beq.n	8006054 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	0010      	movs	r0, r2
 8006052:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2290      	movs	r2, #144	; 0x90
 8006058:	589b      	ldr	r3, [r3, r2]
 800605a:	2194      	movs	r1, #148	; 0x94
 800605c:	187a      	adds	r2, r7, r1
 800605e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2240      	movs	r2, #64	; 0x40
 8006068:	4013      	ands	r3, r2
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d004      	beq.n	8006078 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800606e:	187b      	adds	r3, r7, r1
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2228      	movs	r2, #40	; 0x28
 8006074:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006076:	d04c      	beq.n	8006112 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	0018      	movs	r0, r3
 800607c:	f000 feca 	bl	8006e14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2240      	movs	r2, #64	; 0x40
 8006088:	4013      	ands	r3, r2
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d13c      	bne.n	8006108 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608e:	f3ef 8310 	mrs	r3, PRIMASK
 8006092:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006096:	2090      	movs	r0, #144	; 0x90
 8006098:	183a      	adds	r2, r7, r0
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	2301      	movs	r3, #1
 800609e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060a2:	f383 8810 	msr	PRIMASK, r3
}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2140      	movs	r1, #64	; 0x40
 80060b4:	438a      	bics	r2, r1
 80060b6:	609a      	str	r2, [r3, #8]
 80060b8:	183b      	adds	r3, r7, r0
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c0:	f383 8810 	msr	PRIMASK, r3
}
 80060c4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2280      	movs	r2, #128	; 0x80
 80060ca:	589b      	ldr	r3, [r3, r2]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d016      	beq.n	80060fe <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2280      	movs	r2, #128	; 0x80
 80060d4:	589b      	ldr	r3, [r3, r2]
 80060d6:	4a17      	ldr	r2, [pc, #92]	; (8006134 <HAL_UART_IRQHandler+0x2c8>)
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2280      	movs	r2, #128	; 0x80
 80060de:	589b      	ldr	r3, [r3, r2]
 80060e0:	0018      	movs	r0, r3
 80060e2:	f7fe f901 	bl	80042e8 <HAL_DMA_Abort_IT>
 80060e6:	1e03      	subs	r3, r0, #0
 80060e8:	d01c      	beq.n	8006124 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2280      	movs	r2, #128	; 0x80
 80060ee:	589b      	ldr	r3, [r3, r2]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	2180      	movs	r1, #128	; 0x80
 80060f6:	5852      	ldr	r2, [r2, r1]
 80060f8:	0010      	movs	r0, r2
 80060fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fc:	e012      	b.n	8006124 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	0018      	movs	r0, r3
 8006102:	f000 f9e1 	bl	80064c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006106:	e00d      	b.n	8006124 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	0018      	movs	r0, r3
 800610c:	f000 f9dc 	bl	80064c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006110:	e008      	b.n	8006124 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	0018      	movs	r0, r3
 8006116:	f000 f9d7 	bl	80064c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2290      	movs	r2, #144	; 0x90
 800611e:	2100      	movs	r1, #0
 8006120:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006122:	e1b9      	b.n	8006498 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006124:	46c0      	nop			; (mov r8, r8)
    return;
 8006126:	e1b7      	b.n	8006498 <HAL_UART_IRQHandler+0x62c>
 8006128:	0000080f 	.word	0x0000080f
 800612c:	10000001 	.word	0x10000001
 8006130:	04000120 	.word	0x04000120
 8006134:	08006ee1 	.word	0x08006ee1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800613c:	2b01      	cmp	r3, #1
 800613e:	d000      	beq.n	8006142 <HAL_UART_IRQHandler+0x2d6>
 8006140:	e13e      	b.n	80063c0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006142:	23a4      	movs	r3, #164	; 0xa4
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2210      	movs	r2, #16
 800614a:	4013      	ands	r3, r2
 800614c:	d100      	bne.n	8006150 <HAL_UART_IRQHandler+0x2e4>
 800614e:	e137      	b.n	80063c0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006150:	23a0      	movs	r3, #160	; 0xa0
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2210      	movs	r2, #16
 8006158:	4013      	ands	r3, r2
 800615a:	d100      	bne.n	800615e <HAL_UART_IRQHandler+0x2f2>
 800615c:	e130      	b.n	80063c0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2210      	movs	r2, #16
 8006164:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2240      	movs	r2, #64	; 0x40
 800616e:	4013      	ands	r3, r2
 8006170:	2b40      	cmp	r3, #64	; 0x40
 8006172:	d000      	beq.n	8006176 <HAL_UART_IRQHandler+0x30a>
 8006174:	e0a4      	b.n	80062c0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2280      	movs	r2, #128	; 0x80
 800617a:	589b      	ldr	r3, [r3, r2]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	217e      	movs	r1, #126	; 0x7e
 8006182:	187b      	adds	r3, r7, r1
 8006184:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006186:	187b      	adds	r3, r7, r1
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d100      	bne.n	8006190 <HAL_UART_IRQHandler+0x324>
 800618e:	e185      	b.n	800649c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	225c      	movs	r2, #92	; 0x5c
 8006194:	5a9b      	ldrh	r3, [r3, r2]
 8006196:	187a      	adds	r2, r7, r1
 8006198:	8812      	ldrh	r2, [r2, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d300      	bcc.n	80061a0 <HAL_UART_IRQHandler+0x334>
 800619e:	e17d      	b.n	800649c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	187a      	adds	r2, r7, r1
 80061a4:	215e      	movs	r1, #94	; 0x5e
 80061a6:	8812      	ldrh	r2, [r2, #0]
 80061a8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2280      	movs	r2, #128	; 0x80
 80061ae:	589b      	ldr	r3, [r3, r2]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2220      	movs	r2, #32
 80061b6:	4013      	ands	r3, r2
 80061b8:	d170      	bne.n	800629c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ba:	f3ef 8310 	mrs	r3, PRIMASK
 80061be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80061c4:	2301      	movs	r3, #1
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ca:	f383 8810 	msr	PRIMASK, r3
}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	49b4      	ldr	r1, [pc, #720]	; (80064ac <HAL_UART_IRQHandler+0x640>)
 80061dc:	400a      	ands	r2, r1
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	f383 8810 	msr	PRIMASK, r3
}
 80061ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ec:	f3ef 8310 	mrs	r3, PRIMASK
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f4:	677b      	str	r3, [r7, #116]	; 0x74
 80061f6:	2301      	movs	r3, #1
 80061f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fc:	f383 8810 	msr	PRIMASK, r3
}
 8006200:	46c0      	nop			; (mov r8, r8)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2101      	movs	r1, #1
 800620e:	438a      	bics	r2, r1
 8006210:	609a      	str	r2, [r3, #8]
 8006212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006214:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006218:	f383 8810 	msr	PRIMASK, r3
}
 800621c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800621e:	f3ef 8310 	mrs	r3, PRIMASK
 8006222:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006224:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006226:	673b      	str	r3, [r7, #112]	; 0x70
 8006228:	2301      	movs	r3, #1
 800622a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	f383 8810 	msr	PRIMASK, r3
}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2140      	movs	r1, #64	; 0x40
 8006240:	438a      	bics	r2, r1
 8006242:	609a      	str	r2, [r3, #8]
 8006244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006246:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624a:	f383 8810 	msr	PRIMASK, r3
}
 800624e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	228c      	movs	r2, #140	; 0x8c
 8006254:	2120      	movs	r1, #32
 8006256:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800625e:	f3ef 8310 	mrs	r3, PRIMASK
 8006262:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006264:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006268:	2301      	movs	r3, #1
 800626a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800626e:	f383 8810 	msr	PRIMASK, r3
}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2110      	movs	r1, #16
 8006280:	438a      	bics	r2, r1
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006286:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800628a:	f383 8810 	msr	PRIMASK, r3
}
 800628e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2280      	movs	r2, #128	; 0x80
 8006294:	589b      	ldr	r3, [r3, r2]
 8006296:	0018      	movs	r0, r3
 8006298:	f7fd ffc4 	bl	8004224 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	225c      	movs	r2, #92	; 0x5c
 80062a6:	5a9a      	ldrh	r2, [r3, r2]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	215e      	movs	r1, #94	; 0x5e
 80062ac:	5a5b      	ldrh	r3, [r3, r1]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0011      	movs	r1, r2
 80062b8:	0018      	movs	r0, r3
 80062ba:	f000 f90d 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062be:	e0ed      	b.n	800649c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	225c      	movs	r2, #92	; 0x5c
 80062c4:	5a99      	ldrh	r1, [r3, r2]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	225e      	movs	r2, #94	; 0x5e
 80062ca:	5a9b      	ldrh	r3, [r3, r2]
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	208e      	movs	r0, #142	; 0x8e
 80062d0:	183b      	adds	r3, r7, r0
 80062d2:	1a8a      	subs	r2, r1, r2
 80062d4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	225e      	movs	r2, #94	; 0x5e
 80062da:	5a9b      	ldrh	r3, [r3, r2]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d100      	bne.n	80062e4 <HAL_UART_IRQHandler+0x478>
 80062e2:	e0dd      	b.n	80064a0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80062e4:	183b      	adds	r3, r7, r0
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d100      	bne.n	80062ee <HAL_UART_IRQHandler+0x482>
 80062ec:	e0d8      	b.n	80064a0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ee:	f3ef 8310 	mrs	r3, PRIMASK
 80062f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80062f4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062f6:	2488      	movs	r4, #136	; 0x88
 80062f8:	193a      	adds	r2, r7, r4
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	2301      	movs	r3, #1
 80062fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f383 8810 	msr	PRIMASK, r3
}
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4967      	ldr	r1, [pc, #412]	; (80064b0 <HAL_UART_IRQHandler+0x644>)
 8006314:	400a      	ands	r2, r1
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	193b      	adds	r3, r7, r4
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f383 8810 	msr	PRIMASK, r3
}
 8006324:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006326:	f3ef 8310 	mrs	r3, PRIMASK
 800632a:	61bb      	str	r3, [r7, #24]
  return(result);
 800632c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800632e:	2484      	movs	r4, #132	; 0x84
 8006330:	193a      	adds	r2, r7, r4
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	2301      	movs	r3, #1
 8006336:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f383 8810 	msr	PRIMASK, r3
}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	495a      	ldr	r1, [pc, #360]	; (80064b4 <HAL_UART_IRQHandler+0x648>)
 800634c:	400a      	ands	r2, r1
 800634e:	609a      	str	r2, [r3, #8]
 8006350:	193b      	adds	r3, r7, r4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	f383 8810 	msr	PRIMASK, r3
}
 800635c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	228c      	movs	r2, #140	; 0x8c
 8006362:	2120      	movs	r1, #32
 8006364:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006372:	f3ef 8310 	mrs	r3, PRIMASK
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637a:	2480      	movs	r4, #128	; 0x80
 800637c:	193a      	adds	r2, r7, r4
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	2301      	movs	r3, #1
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	f383 8810 	msr	PRIMASK, r3
}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2110      	movs	r1, #16
 8006398:	438a      	bics	r2, r1
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	193b      	adds	r3, r7, r4
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	f383 8810 	msr	PRIMASK, r3
}
 80063a8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2202      	movs	r2, #2
 80063ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063b0:	183b      	adds	r3, r7, r0
 80063b2:	881a      	ldrh	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	0011      	movs	r1, r2
 80063b8:	0018      	movs	r0, r3
 80063ba:	f000 f88d 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063be:	e06f      	b.n	80064a0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063c0:	23a4      	movs	r3, #164	; 0xa4
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	2380      	movs	r3, #128	; 0x80
 80063c8:	035b      	lsls	r3, r3, #13
 80063ca:	4013      	ands	r3, r2
 80063cc:	d010      	beq.n	80063f0 <HAL_UART_IRQHandler+0x584>
 80063ce:	239c      	movs	r3, #156	; 0x9c
 80063d0:	18fb      	adds	r3, r7, r3
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	2380      	movs	r3, #128	; 0x80
 80063d6:	03db      	lsls	r3, r3, #15
 80063d8:	4013      	ands	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2280      	movs	r2, #128	; 0x80
 80063e2:	0352      	lsls	r2, r2, #13
 80063e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f001 fa1d 	bl	8007828 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ee:	e05a      	b.n	80064a6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80063f0:	23a4      	movs	r3, #164	; 0xa4
 80063f2:	18fb      	adds	r3, r7, r3
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2280      	movs	r2, #128	; 0x80
 80063f8:	4013      	ands	r3, r2
 80063fa:	d016      	beq.n	800642a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80063fc:	23a0      	movs	r3, #160	; 0xa0
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2280      	movs	r2, #128	; 0x80
 8006404:	4013      	ands	r3, r2
 8006406:	d106      	bne.n	8006416 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006408:	239c      	movs	r3, #156	; 0x9c
 800640a:	18fb      	adds	r3, r7, r3
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	2380      	movs	r3, #128	; 0x80
 8006410:	041b      	lsls	r3, r3, #16
 8006412:	4013      	ands	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800641a:	2b00      	cmp	r3, #0
 800641c:	d042      	beq.n	80064a4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	0010      	movs	r0, r2
 8006426:	4798      	blx	r3
    }
    return;
 8006428:	e03c      	b.n	80064a4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800642a:	23a4      	movs	r3, #164	; 0xa4
 800642c:	18fb      	adds	r3, r7, r3
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2240      	movs	r2, #64	; 0x40
 8006432:	4013      	ands	r3, r2
 8006434:	d00a      	beq.n	800644c <HAL_UART_IRQHandler+0x5e0>
 8006436:	23a0      	movs	r3, #160	; 0xa0
 8006438:	18fb      	adds	r3, r7, r3
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2240      	movs	r2, #64	; 0x40
 800643e:	4013      	ands	r3, r2
 8006440:	d004      	beq.n	800644c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	0018      	movs	r0, r3
 8006446:	f000 fd62 	bl	8006f0e <UART_EndTransmit_IT>
    return;
 800644a:	e02c      	b.n	80064a6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800644c:	23a4      	movs	r3, #164	; 0xa4
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	2380      	movs	r3, #128	; 0x80
 8006454:	041b      	lsls	r3, r3, #16
 8006456:	4013      	ands	r3, r2
 8006458:	d00b      	beq.n	8006472 <HAL_UART_IRQHandler+0x606>
 800645a:	23a0      	movs	r3, #160	; 0xa0
 800645c:	18fb      	adds	r3, r7, r3
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	05db      	lsls	r3, r3, #23
 8006464:	4013      	ands	r3, r2
 8006466:	d004      	beq.n	8006472 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	0018      	movs	r0, r3
 800646c:	f001 f9ec 	bl	8007848 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006470:	e019      	b.n	80064a6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006472:	23a4      	movs	r3, #164	; 0xa4
 8006474:	18fb      	adds	r3, r7, r3
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	2380      	movs	r3, #128	; 0x80
 800647a:	045b      	lsls	r3, r3, #17
 800647c:	4013      	ands	r3, r2
 800647e:	d012      	beq.n	80064a6 <HAL_UART_IRQHandler+0x63a>
 8006480:	23a0      	movs	r3, #160	; 0xa0
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	da0d      	bge.n	80064a6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	0018      	movs	r0, r3
 800648e:	f001 f9d3 	bl	8007838 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006492:	e008      	b.n	80064a6 <HAL_UART_IRQHandler+0x63a>
      return;
 8006494:	46c0      	nop			; (mov r8, r8)
 8006496:	e006      	b.n	80064a6 <HAL_UART_IRQHandler+0x63a>
    return;
 8006498:	46c0      	nop			; (mov r8, r8)
 800649a:	e004      	b.n	80064a6 <HAL_UART_IRQHandler+0x63a>
      return;
 800649c:	46c0      	nop			; (mov r8, r8)
 800649e:	e002      	b.n	80064a6 <HAL_UART_IRQHandler+0x63a>
      return;
 80064a0:	46c0      	nop			; (mov r8, r8)
 80064a2:	e000      	b.n	80064a6 <HAL_UART_IRQHandler+0x63a>
    return;
 80064a4:	46c0      	nop			; (mov r8, r8)
  }
}
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b02a      	add	sp, #168	; 0xa8
 80064aa:	bdb0      	pop	{r4, r5, r7, pc}
 80064ac:	fffffeff 	.word	0xfffffeff
 80064b0:	fffffedf 	.word	0xfffffedf
 80064b4:	effffffe 	.word	0xeffffffe

080064b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064c0:	46c0      	nop			; (mov r8, r8)
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b002      	add	sp, #8
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064d0:	46c0      	nop			; (mov r8, r8)
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b002      	add	sp, #8
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	000a      	movs	r2, r1
 80064e2:	1cbb      	adds	r3, r7, #2
 80064e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b002      	add	sp, #8
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064f8:	231a      	movs	r3, #26
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	4313      	orrs	r3, r2
 8006516:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4abc      	ldr	r2, [pc, #752]	; (8006810 <UART_SetConfig+0x320>)
 8006520:	4013      	ands	r3, r2
 8006522:	0019      	movs	r1, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	430a      	orrs	r2, r1
 800652c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	4ab7      	ldr	r2, [pc, #732]	; (8006814 <UART_SetConfig+0x324>)
 8006536:	4013      	ands	r3, r2
 8006538:	0019      	movs	r1, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	4313      	orrs	r3, r2
 8006554:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	4aae      	ldr	r2, [pc, #696]	; (8006818 <UART_SetConfig+0x328>)
 800655e:	4013      	ands	r3, r2
 8006560:	0019      	movs	r1, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	430a      	orrs	r2, r1
 800656a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	220f      	movs	r2, #15
 8006574:	4393      	bics	r3, r2
 8006576:	0019      	movs	r1, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4aa4      	ldr	r2, [pc, #656]	; (800681c <UART_SetConfig+0x32c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d127      	bne.n	80065de <UART_SetConfig+0xee>
 800658e:	4ba4      	ldr	r3, [pc, #656]	; (8006820 <UART_SetConfig+0x330>)
 8006590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006592:	2203      	movs	r2, #3
 8006594:	4013      	ands	r3, r2
 8006596:	2b03      	cmp	r3, #3
 8006598:	d017      	beq.n	80065ca <UART_SetConfig+0xda>
 800659a:	d81b      	bhi.n	80065d4 <UART_SetConfig+0xe4>
 800659c:	2b02      	cmp	r3, #2
 800659e:	d00a      	beq.n	80065b6 <UART_SetConfig+0xc6>
 80065a0:	d818      	bhi.n	80065d4 <UART_SetConfig+0xe4>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <UART_SetConfig+0xbc>
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d00a      	beq.n	80065c0 <UART_SetConfig+0xd0>
 80065aa:	e013      	b.n	80065d4 <UART_SetConfig+0xe4>
 80065ac:	231b      	movs	r3, #27
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	e058      	b.n	8006668 <UART_SetConfig+0x178>
 80065b6:	231b      	movs	r3, #27
 80065b8:	18fb      	adds	r3, r7, r3
 80065ba:	2202      	movs	r2, #2
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	e053      	b.n	8006668 <UART_SetConfig+0x178>
 80065c0:	231b      	movs	r3, #27
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	2204      	movs	r2, #4
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	e04e      	b.n	8006668 <UART_SetConfig+0x178>
 80065ca:	231b      	movs	r3, #27
 80065cc:	18fb      	adds	r3, r7, r3
 80065ce:	2208      	movs	r2, #8
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e049      	b.n	8006668 <UART_SetConfig+0x178>
 80065d4:	231b      	movs	r3, #27
 80065d6:	18fb      	adds	r3, r7, r3
 80065d8:	2210      	movs	r2, #16
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	e044      	b.n	8006668 <UART_SetConfig+0x178>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a90      	ldr	r2, [pc, #576]	; (8006824 <UART_SetConfig+0x334>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d127      	bne.n	8006638 <UART_SetConfig+0x148>
 80065e8:	4b8d      	ldr	r3, [pc, #564]	; (8006820 <UART_SetConfig+0x330>)
 80065ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ec:	220c      	movs	r2, #12
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b0c      	cmp	r3, #12
 80065f2:	d017      	beq.n	8006624 <UART_SetConfig+0x134>
 80065f4:	d81b      	bhi.n	800662e <UART_SetConfig+0x13e>
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d00a      	beq.n	8006610 <UART_SetConfig+0x120>
 80065fa:	d818      	bhi.n	800662e <UART_SetConfig+0x13e>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <UART_SetConfig+0x116>
 8006600:	2b04      	cmp	r3, #4
 8006602:	d00a      	beq.n	800661a <UART_SetConfig+0x12a>
 8006604:	e013      	b.n	800662e <UART_SetConfig+0x13e>
 8006606:	231b      	movs	r3, #27
 8006608:	18fb      	adds	r3, r7, r3
 800660a:	2200      	movs	r2, #0
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e02b      	b.n	8006668 <UART_SetConfig+0x178>
 8006610:	231b      	movs	r3, #27
 8006612:	18fb      	adds	r3, r7, r3
 8006614:	2202      	movs	r2, #2
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	e026      	b.n	8006668 <UART_SetConfig+0x178>
 800661a:	231b      	movs	r3, #27
 800661c:	18fb      	adds	r3, r7, r3
 800661e:	2204      	movs	r2, #4
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	e021      	b.n	8006668 <UART_SetConfig+0x178>
 8006624:	231b      	movs	r3, #27
 8006626:	18fb      	adds	r3, r7, r3
 8006628:	2208      	movs	r2, #8
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	e01c      	b.n	8006668 <UART_SetConfig+0x178>
 800662e:	231b      	movs	r3, #27
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	2210      	movs	r2, #16
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e017      	b.n	8006668 <UART_SetConfig+0x178>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a7a      	ldr	r2, [pc, #488]	; (8006828 <UART_SetConfig+0x338>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d104      	bne.n	800664c <UART_SetConfig+0x15c>
 8006642:	231b      	movs	r3, #27
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	2200      	movs	r2, #0
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	e00d      	b.n	8006668 <UART_SetConfig+0x178>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a76      	ldr	r2, [pc, #472]	; (800682c <UART_SetConfig+0x33c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d104      	bne.n	8006660 <UART_SetConfig+0x170>
 8006656:	231b      	movs	r3, #27
 8006658:	18fb      	adds	r3, r7, r3
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	e003      	b.n	8006668 <UART_SetConfig+0x178>
 8006660:	231b      	movs	r3, #27
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	2210      	movs	r2, #16
 8006666:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	2380      	movs	r3, #128	; 0x80
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	429a      	cmp	r2, r3
 8006672:	d000      	beq.n	8006676 <UART_SetConfig+0x186>
 8006674:	e065      	b.n	8006742 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8006676:	231b      	movs	r3, #27
 8006678:	18fb      	adds	r3, r7, r3
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b08      	cmp	r3, #8
 800667e:	d015      	beq.n	80066ac <UART_SetConfig+0x1bc>
 8006680:	dc18      	bgt.n	80066b4 <UART_SetConfig+0x1c4>
 8006682:	2b04      	cmp	r3, #4
 8006684:	d00d      	beq.n	80066a2 <UART_SetConfig+0x1b2>
 8006686:	dc15      	bgt.n	80066b4 <UART_SetConfig+0x1c4>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <UART_SetConfig+0x1a2>
 800668c:	2b02      	cmp	r3, #2
 800668e:	d005      	beq.n	800669c <UART_SetConfig+0x1ac>
 8006690:	e010      	b.n	80066b4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006692:	f7fe fe23 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8006696:	0003      	movs	r3, r0
 8006698:	617b      	str	r3, [r7, #20]
        break;
 800669a:	e012      	b.n	80066c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800669c:	4b64      	ldr	r3, [pc, #400]	; (8006830 <UART_SetConfig+0x340>)
 800669e:	617b      	str	r3, [r7, #20]
        break;
 80066a0:	e00f      	b.n	80066c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a2:	f7fe fd8f 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 80066a6:	0003      	movs	r3, r0
 80066a8:	617b      	str	r3, [r7, #20]
        break;
 80066aa:	e00a      	b.n	80066c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ac:	2380      	movs	r3, #128	; 0x80
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	617b      	str	r3, [r7, #20]
        break;
 80066b2:	e006      	b.n	80066c2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066b8:	231a      	movs	r3, #26
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	2201      	movs	r2, #1
 80066be:	701a      	strb	r2, [r3, #0]
        break;
 80066c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d100      	bne.n	80066ca <UART_SetConfig+0x1da>
 80066c8:	e08d      	b.n	80067e6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ce:	4b59      	ldr	r3, [pc, #356]	; (8006834 <UART_SetConfig+0x344>)
 80066d0:	0052      	lsls	r2, r2, #1
 80066d2:	5ad3      	ldrh	r3, [r2, r3]
 80066d4:	0019      	movs	r1, r3
 80066d6:	6978      	ldr	r0, [r7, #20]
 80066d8:	f7f9 fd1c 	bl	8000114 <__udivsi3>
 80066dc:	0003      	movs	r3, r0
 80066de:	005a      	lsls	r2, r3, #1
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	18d2      	adds	r2, r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	0019      	movs	r1, r3
 80066ee:	0010      	movs	r0, r2
 80066f0:	f7f9 fd10 	bl	8000114 <__udivsi3>
 80066f4:	0003      	movs	r3, r0
 80066f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b0f      	cmp	r3, #15
 80066fc:	d91c      	bls.n	8006738 <UART_SetConfig+0x248>
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	2380      	movs	r3, #128	; 0x80
 8006702:	025b      	lsls	r3, r3, #9
 8006704:	429a      	cmp	r2, r3
 8006706:	d217      	bcs.n	8006738 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	b29a      	uxth	r2, r3
 800670c:	200e      	movs	r0, #14
 800670e:	183b      	adds	r3, r7, r0
 8006710:	210f      	movs	r1, #15
 8006712:	438a      	bics	r2, r1
 8006714:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	085b      	lsrs	r3, r3, #1
 800671a:	b29b      	uxth	r3, r3
 800671c:	2207      	movs	r2, #7
 800671e:	4013      	ands	r3, r2
 8006720:	b299      	uxth	r1, r3
 8006722:	183b      	adds	r3, r7, r0
 8006724:	183a      	adds	r2, r7, r0
 8006726:	8812      	ldrh	r2, [r2, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	183a      	adds	r2, r7, r0
 8006732:	8812      	ldrh	r2, [r2, #0]
 8006734:	60da      	str	r2, [r3, #12]
 8006736:	e056      	b.n	80067e6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006738:	231a      	movs	r3, #26
 800673a:	18fb      	adds	r3, r7, r3
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	e051      	b.n	80067e6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006742:	231b      	movs	r3, #27
 8006744:	18fb      	adds	r3, r7, r3
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d015      	beq.n	8006778 <UART_SetConfig+0x288>
 800674c:	dc18      	bgt.n	8006780 <UART_SetConfig+0x290>
 800674e:	2b04      	cmp	r3, #4
 8006750:	d00d      	beq.n	800676e <UART_SetConfig+0x27e>
 8006752:	dc15      	bgt.n	8006780 <UART_SetConfig+0x290>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <UART_SetConfig+0x26e>
 8006758:	2b02      	cmp	r3, #2
 800675a:	d005      	beq.n	8006768 <UART_SetConfig+0x278>
 800675c:	e010      	b.n	8006780 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800675e:	f7fe fdbd 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8006762:	0003      	movs	r3, r0
 8006764:	617b      	str	r3, [r7, #20]
        break;
 8006766:	e012      	b.n	800678e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006768:	4b31      	ldr	r3, [pc, #196]	; (8006830 <UART_SetConfig+0x340>)
 800676a:	617b      	str	r3, [r7, #20]
        break;
 800676c:	e00f      	b.n	800678e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800676e:	f7fe fd29 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 8006772:	0003      	movs	r3, r0
 8006774:	617b      	str	r3, [r7, #20]
        break;
 8006776:	e00a      	b.n	800678e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006778:	2380      	movs	r3, #128	; 0x80
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	617b      	str	r3, [r7, #20]
        break;
 800677e:	e006      	b.n	800678e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006784:	231a      	movs	r3, #26
 8006786:	18fb      	adds	r3, r7, r3
 8006788:	2201      	movs	r2, #1
 800678a:	701a      	strb	r2, [r3, #0]
        break;
 800678c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d028      	beq.n	80067e6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006798:	4b26      	ldr	r3, [pc, #152]	; (8006834 <UART_SetConfig+0x344>)
 800679a:	0052      	lsls	r2, r2, #1
 800679c:	5ad3      	ldrh	r3, [r2, r3]
 800679e:	0019      	movs	r1, r3
 80067a0:	6978      	ldr	r0, [r7, #20]
 80067a2:	f7f9 fcb7 	bl	8000114 <__udivsi3>
 80067a6:	0003      	movs	r3, r0
 80067a8:	001a      	movs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	085b      	lsrs	r3, r3, #1
 80067b0:	18d2      	adds	r2, r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	0019      	movs	r1, r3
 80067b8:	0010      	movs	r0, r2
 80067ba:	f7f9 fcab 	bl	8000114 <__udivsi3>
 80067be:	0003      	movs	r3, r0
 80067c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b0f      	cmp	r3, #15
 80067c6:	d90a      	bls.n	80067de <UART_SetConfig+0x2ee>
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	2380      	movs	r3, #128	; 0x80
 80067cc:	025b      	lsls	r3, r3, #9
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d205      	bcs.n	80067de <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60da      	str	r2, [r3, #12]
 80067dc:	e003      	b.n	80067e6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80067de:	231a      	movs	r3, #26
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	2201      	movs	r2, #1
 80067e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	226a      	movs	r2, #106	; 0x6a
 80067ea:	2101      	movs	r1, #1
 80067ec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2268      	movs	r2, #104	; 0x68
 80067f2:	2101      	movs	r1, #1
 80067f4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006802:	231a      	movs	r3, #26
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	781b      	ldrb	r3, [r3, #0]
}
 8006808:	0018      	movs	r0, r3
 800680a:	46bd      	mov	sp, r7
 800680c:	b008      	add	sp, #32
 800680e:	bd80      	pop	{r7, pc}
 8006810:	cfff69f3 	.word	0xcfff69f3
 8006814:	ffffcfff 	.word	0xffffcfff
 8006818:	11fff4ff 	.word	0x11fff4ff
 800681c:	40013800 	.word	0x40013800
 8006820:	40021000 	.word	0x40021000
 8006824:	40004400 	.word	0x40004400
 8006828:	40004800 	.word	0x40004800
 800682c:	40004c00 	.word	0x40004c00
 8006830:	00f42400 	.word	0x00f42400
 8006834:	08008504 	.word	0x08008504

08006838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	2201      	movs	r2, #1
 8006846:	4013      	ands	r3, r2
 8006848:	d00b      	beq.n	8006862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	4a4a      	ldr	r2, [pc, #296]	; (800697c <UART_AdvFeatureConfig+0x144>)
 8006852:	4013      	ands	r3, r2
 8006854:	0019      	movs	r1, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	2202      	movs	r2, #2
 8006868:	4013      	ands	r3, r2
 800686a:	d00b      	beq.n	8006884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	4a43      	ldr	r2, [pc, #268]	; (8006980 <UART_AdvFeatureConfig+0x148>)
 8006874:	4013      	ands	r3, r2
 8006876:	0019      	movs	r1, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	2204      	movs	r2, #4
 800688a:	4013      	ands	r3, r2
 800688c:	d00b      	beq.n	80068a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	4a3b      	ldr	r2, [pc, #236]	; (8006984 <UART_AdvFeatureConfig+0x14c>)
 8006896:	4013      	ands	r3, r2
 8006898:	0019      	movs	r1, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	2208      	movs	r2, #8
 80068ac:	4013      	ands	r3, r2
 80068ae:	d00b      	beq.n	80068c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4a34      	ldr	r2, [pc, #208]	; (8006988 <UART_AdvFeatureConfig+0x150>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	0019      	movs	r1, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	2210      	movs	r2, #16
 80068ce:	4013      	ands	r3, r2
 80068d0:	d00b      	beq.n	80068ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	4a2c      	ldr	r2, [pc, #176]	; (800698c <UART_AdvFeatureConfig+0x154>)
 80068da:	4013      	ands	r3, r2
 80068dc:	0019      	movs	r1, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	2220      	movs	r2, #32
 80068f0:	4013      	ands	r3, r2
 80068f2:	d00b      	beq.n	800690c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	4a25      	ldr	r2, [pc, #148]	; (8006990 <UART_AdvFeatureConfig+0x158>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	0019      	movs	r1, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	2240      	movs	r2, #64	; 0x40
 8006912:	4013      	ands	r3, r2
 8006914:	d01d      	beq.n	8006952 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <UART_AdvFeatureConfig+0x15c>)
 800691e:	4013      	ands	r3, r2
 8006920:	0019      	movs	r1, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006932:	2380      	movs	r3, #128	; 0x80
 8006934:	035b      	lsls	r3, r3, #13
 8006936:	429a      	cmp	r2, r3
 8006938:	d10b      	bne.n	8006952 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4a15      	ldr	r2, [pc, #84]	; (8006998 <UART_AdvFeatureConfig+0x160>)
 8006942:	4013      	ands	r3, r2
 8006944:	0019      	movs	r1, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	2280      	movs	r2, #128	; 0x80
 8006958:	4013      	ands	r3, r2
 800695a:	d00b      	beq.n	8006974 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	4a0e      	ldr	r2, [pc, #56]	; (800699c <UART_AdvFeatureConfig+0x164>)
 8006964:	4013      	ands	r3, r2
 8006966:	0019      	movs	r1, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	605a      	str	r2, [r3, #4]
  }
}
 8006974:	46c0      	nop			; (mov r8, r8)
 8006976:	46bd      	mov	sp, r7
 8006978:	b002      	add	sp, #8
 800697a:	bd80      	pop	{r7, pc}
 800697c:	fffdffff 	.word	0xfffdffff
 8006980:	fffeffff 	.word	0xfffeffff
 8006984:	fffbffff 	.word	0xfffbffff
 8006988:	ffff7fff 	.word	0xffff7fff
 800698c:	ffffefff 	.word	0xffffefff
 8006990:	ffffdfff 	.word	0xffffdfff
 8006994:	ffefffff 	.word	0xffefffff
 8006998:	ff9fffff 	.word	0xff9fffff
 800699c:	fff7ffff 	.word	0xfff7ffff

080069a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2290      	movs	r2, #144	; 0x90
 80069ac:	2100      	movs	r1, #0
 80069ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069b0:	f7fc fe48 	bl	8003644 <HAL_GetTick>
 80069b4:	0003      	movs	r3, r0
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2208      	movs	r2, #8
 80069c0:	4013      	ands	r3, r2
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d10c      	bne.n	80069e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2280      	movs	r2, #128	; 0x80
 80069ca:	0391      	lsls	r1, r2, #14
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4a1a      	ldr	r2, [pc, #104]	; (8006a38 <UART_CheckIdleState+0x98>)
 80069d0:	9200      	str	r2, [sp, #0]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f000 f832 	bl	8006a3c <UART_WaitOnFlagUntilTimeout>
 80069d8:	1e03      	subs	r3, r0, #0
 80069da:	d001      	beq.n	80069e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e026      	b.n	8006a2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2204      	movs	r2, #4
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d10c      	bne.n	8006a08 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2280      	movs	r2, #128	; 0x80
 80069f2:	03d1      	lsls	r1, r2, #15
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4a10      	ldr	r2, [pc, #64]	; (8006a38 <UART_CheckIdleState+0x98>)
 80069f8:	9200      	str	r2, [sp, #0]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f000 f81e 	bl	8006a3c <UART_WaitOnFlagUntilTimeout>
 8006a00:	1e03      	subs	r3, r0, #0
 8006a02:	d001      	beq.n	8006a08 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e012      	b.n	8006a2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2288      	movs	r2, #136	; 0x88
 8006a0c:	2120      	movs	r1, #32
 8006a0e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	228c      	movs	r2, #140	; 0x8c
 8006a14:	2120      	movs	r1, #32
 8006a16:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2284      	movs	r2, #132	; 0x84
 8006a28:	2100      	movs	r1, #0
 8006a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	0018      	movs	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b004      	add	sp, #16
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	01ffffff 	.word	0x01ffffff

08006a3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b094      	sub	sp, #80	; 0x50
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	1dfb      	adds	r3, r7, #7
 8006a4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4c:	e0a7      	b.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a50:	3301      	adds	r3, #1
 8006a52:	d100      	bne.n	8006a56 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006a54:	e0a3      	b.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a56:	f7fc fdf5 	bl	8003644 <HAL_GetTick>
 8006a5a:	0002      	movs	r2, r0
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d302      	bcc.n	8006a6c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d13f      	bne.n	8006aec <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a74:	647b      	str	r3, [r7, #68]	; 0x44
 8006a76:	2301      	movs	r3, #1
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	f383 8810 	msr	PRIMASK, r3
}
 8006a80:	46c0      	nop			; (mov r8, r8)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	494e      	ldr	r1, [pc, #312]	; (8006bc8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006a8e:	400a      	ands	r2, r1
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a94:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	f383 8810 	msr	PRIMASK, r3
}
 8006a9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	f383 8810 	msr	PRIMASK, r3
}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2101      	movs	r1, #1
 8006ac0:	438a      	bics	r2, r1
 8006ac2:	609a      	str	r2, [r3, #8]
 8006ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aca:	f383 8810 	msr	PRIMASK, r3
}
 8006ace:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2288      	movs	r2, #136	; 0x88
 8006ad4:	2120      	movs	r1, #32
 8006ad6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	228c      	movs	r2, #140	; 0x8c
 8006adc:	2120      	movs	r1, #32
 8006ade:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2284      	movs	r2, #132	; 0x84
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e069      	b.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2204      	movs	r2, #4
 8006af4:	4013      	ands	r3, r2
 8006af6:	d052      	beq.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69da      	ldr	r2, [r3, #28]
 8006afe:	2380      	movs	r3, #128	; 0x80
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	401a      	ands	r2, r3
 8006b04:	2380      	movs	r3, #128	; 0x80
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d148      	bne.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2280      	movs	r2, #128	; 0x80
 8006b12:	0112      	lsls	r2, r2, #4
 8006b14:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b16:	f3ef 8310 	mrs	r3, PRIMASK
 8006b1a:	613b      	str	r3, [r7, #16]
  return(result);
 8006b1c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b20:	2301      	movs	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f383 8810 	msr	PRIMASK, r3
}
 8006b2a:	46c0      	nop			; (mov r8, r8)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4924      	ldr	r1, [pc, #144]	; (8006bc8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006b38:	400a      	ands	r2, r1
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f383 8810 	msr	PRIMASK, r3
}
 8006b46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b48:	f3ef 8310 	mrs	r3, PRIMASK
 8006b4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b4e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b52:	2301      	movs	r3, #1
 8006b54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	f383 8810 	msr	PRIMASK, r3
}
 8006b5c:	46c0      	nop			; (mov r8, r8)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2101      	movs	r1, #1
 8006b6a:	438a      	bics	r2, r1
 8006b6c:	609a      	str	r2, [r3, #8]
 8006b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	f383 8810 	msr	PRIMASK, r3
}
 8006b78:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2288      	movs	r2, #136	; 0x88
 8006b7e:	2120      	movs	r1, #32
 8006b80:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	228c      	movs	r2, #140	; 0x8c
 8006b86:	2120      	movs	r1, #32
 8006b88:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2290      	movs	r2, #144	; 0x90
 8006b8e:	2120      	movs	r1, #32
 8006b90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2284      	movs	r2, #132	; 0x84
 8006b96:	2100      	movs	r1, #0
 8006b98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e010      	b.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	425a      	negs	r2, r3
 8006bae:	4153      	adcs	r3, r2
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	001a      	movs	r2, r3
 8006bb4:	1dfb      	adds	r3, r7, #7
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d100      	bne.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x182>
 8006bbc:	e747      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b014      	add	sp, #80	; 0x50
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	fffffe5f 	.word	0xfffffe5f

08006bcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b098      	sub	sp, #96	; 0x60
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	1dbb      	adds	r3, r7, #6
 8006bd8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	1dba      	adds	r2, r7, #6
 8006be4:	215c      	movs	r1, #92	; 0x5c
 8006be6:	8812      	ldrh	r2, [r2, #0]
 8006be8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1dba      	adds	r2, r7, #6
 8006bee:	215e      	movs	r1, #94	; 0x5e
 8006bf0:	8812      	ldrh	r2, [r2, #0]
 8006bf2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	2380      	movs	r3, #128	; 0x80
 8006c00:	015b      	lsls	r3, r3, #5
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d10d      	bne.n	8006c22 <UART_Start_Receive_IT+0x56>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d104      	bne.n	8006c18 <UART_Start_Receive_IT+0x4c>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2260      	movs	r2, #96	; 0x60
 8006c12:	497b      	ldr	r1, [pc, #492]	; (8006e00 <UART_Start_Receive_IT+0x234>)
 8006c14:	5299      	strh	r1, [r3, r2]
 8006c16:	e02e      	b.n	8006c76 <UART_Start_Receive_IT+0xaa>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2260      	movs	r2, #96	; 0x60
 8006c1c:	21ff      	movs	r1, #255	; 0xff
 8006c1e:	5299      	strh	r1, [r3, r2]
 8006c20:	e029      	b.n	8006c76 <UART_Start_Receive_IT+0xaa>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10d      	bne.n	8006c46 <UART_Start_Receive_IT+0x7a>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d104      	bne.n	8006c3c <UART_Start_Receive_IT+0x70>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2260      	movs	r2, #96	; 0x60
 8006c36:	21ff      	movs	r1, #255	; 0xff
 8006c38:	5299      	strh	r1, [r3, r2]
 8006c3a:	e01c      	b.n	8006c76 <UART_Start_Receive_IT+0xaa>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2260      	movs	r2, #96	; 0x60
 8006c40:	217f      	movs	r1, #127	; 0x7f
 8006c42:	5299      	strh	r1, [r3, r2]
 8006c44:	e017      	b.n	8006c76 <UART_Start_Receive_IT+0xaa>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	2380      	movs	r3, #128	; 0x80
 8006c4c:	055b      	lsls	r3, r3, #21
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d10d      	bne.n	8006c6e <UART_Start_Receive_IT+0xa2>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d104      	bne.n	8006c64 <UART_Start_Receive_IT+0x98>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2260      	movs	r2, #96	; 0x60
 8006c5e:	217f      	movs	r1, #127	; 0x7f
 8006c60:	5299      	strh	r1, [r3, r2]
 8006c62:	e008      	b.n	8006c76 <UART_Start_Receive_IT+0xaa>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2260      	movs	r2, #96	; 0x60
 8006c68:	213f      	movs	r1, #63	; 0x3f
 8006c6a:	5299      	strh	r1, [r3, r2]
 8006c6c:	e003      	b.n	8006c76 <UART_Start_Receive_IT+0xaa>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2260      	movs	r2, #96	; 0x60
 8006c72:	2100      	movs	r1, #0
 8006c74:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2290      	movs	r2, #144	; 0x90
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	228c      	movs	r2, #140	; 0x8c
 8006c82:	2122      	movs	r1, #34	; 0x22
 8006c84:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c86:	f3ef 8310 	mrs	r3, PRIMASK
 8006c8a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c90:	2301      	movs	r3, #1
 8006c92:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c96:	f383 8810 	msr	PRIMASK, r3
}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	609a      	str	r2, [r3, #8]
 8006cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cae:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb2:	f383 8810 	msr	PRIMASK, r3
}
 8006cb6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006cbc:	2380      	movs	r3, #128	; 0x80
 8006cbe:	059b      	lsls	r3, r3, #22
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d150      	bne.n	8006d66 <UART_Start_Receive_IT+0x19a>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2268      	movs	r2, #104	; 0x68
 8006cc8:	5a9b      	ldrh	r3, [r3, r2]
 8006cca:	1dba      	adds	r2, r7, #6
 8006ccc:	8812      	ldrh	r2, [r2, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d349      	bcc.n	8006d66 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	2380      	movs	r3, #128	; 0x80
 8006cd8:	015b      	lsls	r3, r3, #5
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d107      	bne.n	8006cee <UART_Start_Receive_IT+0x122>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4a46      	ldr	r2, [pc, #280]	; (8006e04 <UART_Start_Receive_IT+0x238>)
 8006cea:	675a      	str	r2, [r3, #116]	; 0x74
 8006cec:	e002      	b.n	8006cf4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4a45      	ldr	r2, [pc, #276]	; (8006e08 <UART_Start_Receive_IT+0x23c>)
 8006cf2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d019      	beq.n	8006d30 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d06:	2301      	movs	r3, #1
 8006d08:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	f383 8810 	msr	PRIMASK, r3
}
 8006d10:	46c0      	nop			; (mov r8, r8)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2180      	movs	r1, #128	; 0x80
 8006d1e:	0049      	lsls	r1, r1, #1
 8006d20:	430a      	orrs	r2, r1
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2a:	f383 8810 	msr	PRIMASK, r3
}
 8006d2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d30:	f3ef 8310 	mrs	r3, PRIMASK
 8006d34:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d38:	657b      	str	r3, [r7, #84]	; 0x54
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d40:	f383 8810 	msr	PRIMASK, r3
}
 8006d44:	46c0      	nop			; (mov r8, r8)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2180      	movs	r1, #128	; 0x80
 8006d52:	0549      	lsls	r1, r1, #21
 8006d54:	430a      	orrs	r2, r1
 8006d56:	609a      	str	r2, [r3, #8]
 8006d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d5a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	f383 8810 	msr	PRIMASK, r3
}
 8006d62:	46c0      	nop			; (mov r8, r8)
 8006d64:	e047      	b.n	8006df6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	2380      	movs	r3, #128	; 0x80
 8006d6c:	015b      	lsls	r3, r3, #5
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d107      	bne.n	8006d82 <UART_Start_Receive_IT+0x1b6>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a23      	ldr	r2, [pc, #140]	; (8006e0c <UART_Start_Receive_IT+0x240>)
 8006d7e:	675a      	str	r2, [r3, #116]	; 0x74
 8006d80:	e002      	b.n	8006d88 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4a22      	ldr	r2, [pc, #136]	; (8006e10 <UART_Start_Receive_IT+0x244>)
 8006d86:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d019      	beq.n	8006dc4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d90:	f3ef 8310 	mrs	r3, PRIMASK
 8006d94:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d96:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	f383 8810 	msr	PRIMASK, r3
}
 8006da4:	46c0      	nop			; (mov r8, r8)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2190      	movs	r1, #144	; 0x90
 8006db2:	0049      	lsls	r1, r1, #1
 8006db4:	430a      	orrs	r2, r1
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	f383 8810 	msr	PRIMASK, r3
}
 8006dc2:	e018      	b.n	8006df6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8006dc8:	613b      	str	r3, [r7, #16]
  return(result);
 8006dca:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006dcc:	653b      	str	r3, [r7, #80]	; 0x50
 8006dce:	2301      	movs	r3, #1
 8006dd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f383 8810 	msr	PRIMASK, r3
}
 8006dd8:	46c0      	nop			; (mov r8, r8)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2120      	movs	r1, #32
 8006de6:	430a      	orrs	r2, r1
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	f383 8810 	msr	PRIMASK, r3
}
 8006df4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	0018      	movs	r0, r3
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b018      	add	sp, #96	; 0x60
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	000001ff 	.word	0x000001ff
 8006e04:	0800753d 	.word	0x0800753d
 8006e08:	08007251 	.word	0x08007251
 8006e0c:	080070dd 	.word	0x080070dd
 8006e10:	08006f69 	.word	0x08006f69

08006e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08e      	sub	sp, #56	; 0x38
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e20:	617b      	str	r3, [r7, #20]
  return(result);
 8006e22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
 8006e26:	2301      	movs	r3, #1
 8006e28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	f383 8810 	msr	PRIMASK, r3
}
 8006e30:	46c0      	nop			; (mov r8, r8)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4926      	ldr	r1, [pc, #152]	; (8006ed8 <UART_EndRxTransfer+0xc4>)
 8006e3e:	400a      	ands	r2, r1
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	f383 8810 	msr	PRIMASK, r3
}
 8006e4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e52:	623b      	str	r3, [r7, #32]
  return(result);
 8006e54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e56:	633b      	str	r3, [r7, #48]	; 0x30
 8006e58:	2301      	movs	r3, #1
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	f383 8810 	msr	PRIMASK, r3
}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	491b      	ldr	r1, [pc, #108]	; (8006edc <UART_EndRxTransfer+0xc8>)
 8006e70:	400a      	ands	r2, r1
 8006e72:	609a      	str	r2, [r3, #8]
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	f383 8810 	msr	PRIMASK, r3
}
 8006e7e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d118      	bne.n	8006eba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e88:	f3ef 8310 	mrs	r3, PRIMASK
 8006e8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e92:	2301      	movs	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f383 8810 	msr	PRIMASK, r3
}
 8006e9c:	46c0      	nop			; (mov r8, r8)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2110      	movs	r1, #16
 8006eaa:	438a      	bics	r2, r1
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f383 8810 	msr	PRIMASK, r3
}
 8006eb8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	228c      	movs	r2, #140	; 0x8c
 8006ebe:	2120      	movs	r1, #32
 8006ec0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b00e      	add	sp, #56	; 0x38
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	fffffedf 	.word	0xfffffedf
 8006edc:	effffffe 	.word	0xeffffffe

08006ee0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	225e      	movs	r2, #94	; 0x5e
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2256      	movs	r2, #86	; 0x56
 8006efa:	2100      	movs	r1, #0
 8006efc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7ff fae1 	bl	80064c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	b004      	add	sp, #16
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b086      	sub	sp, #24
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f16:	f3ef 8310 	mrs	r3, PRIMASK
 8006f1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	2301      	movs	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f383 8810 	msr	PRIMASK, r3
}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2140      	movs	r1, #64	; 0x40
 8006f38:	438a      	bics	r2, r1
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f383 8810 	msr	PRIMASK, r3
}
 8006f46:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2288      	movs	r2, #136	; 0x88
 8006f4c:	2120      	movs	r1, #32
 8006f4e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f7ff faad 	bl	80064b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	46bd      	mov	sp, r7
 8006f62:	b006      	add	sp, #24
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b090      	sub	sp, #64	; 0x40
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f70:	203e      	movs	r0, #62	; 0x3e
 8006f72:	183b      	adds	r3, r7, r0
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	2160      	movs	r1, #96	; 0x60
 8006f78:	5a52      	ldrh	r2, [r2, r1]
 8006f7a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	228c      	movs	r2, #140	; 0x8c
 8006f80:	589b      	ldr	r3, [r3, r2]
 8006f82:	2b22      	cmp	r3, #34	; 0x22
 8006f84:	d000      	beq.n	8006f88 <UART_RxISR_8BIT+0x20>
 8006f86:	e09a      	b.n	80070be <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f8e:	213c      	movs	r1, #60	; 0x3c
 8006f90:	187b      	adds	r3, r7, r1
 8006f92:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f94:	187b      	adds	r3, r7, r1
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	183b      	adds	r3, r7, r0
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b2d9      	uxtb	r1, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa4:	400a      	ands	r2, r1
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	225e      	movs	r2, #94	; 0x5e
 8006fb8:	5a9b      	ldrh	r3, [r3, r2]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b299      	uxth	r1, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	225e      	movs	r2, #94	; 0x5e
 8006fc4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	225e      	movs	r2, #94	; 0x5e
 8006fca:	5a9b      	ldrh	r3, [r3, r2]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d000      	beq.n	8006fd4 <UART_RxISR_8BIT+0x6c>
 8006fd2:	e07c      	b.n	80070ce <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd8:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fda:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fde:	2301      	movs	r3, #1
 8006fe0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f383 8810 	msr	PRIMASK, r3
}
 8006fe8:	46c0      	nop			; (mov r8, r8)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4938      	ldr	r1, [pc, #224]	; (80070d8 <UART_RxISR_8BIT+0x170>)
 8006ff6:	400a      	ands	r2, r1
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	f383 8810 	msr	PRIMASK, r3
}
 8007004:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007006:	f3ef 8310 	mrs	r3, PRIMASK
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
 8007010:	2301      	movs	r3, #1
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	f383 8810 	msr	PRIMASK, r3
}
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689a      	ldr	r2, [r3, #8]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2101      	movs	r1, #1
 8007028:	438a      	bics	r2, r1
 800702a:	609a      	str	r2, [r3, #8]
 800702c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	f383 8810 	msr	PRIMASK, r3
}
 8007036:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	228c      	movs	r2, #140	; 0x8c
 800703c:	2120      	movs	r1, #32
 800703e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d12f      	bne.n	80070b4 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800705a:	f3ef 8310 	mrs	r3, PRIMASK
 800705e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007060:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007062:	633b      	str	r3, [r7, #48]	; 0x30
 8007064:	2301      	movs	r3, #1
 8007066:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f383 8810 	msr	PRIMASK, r3
}
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2110      	movs	r1, #16
 800707c:	438a      	bics	r2, r1
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f383 8810 	msr	PRIMASK, r3
}
 800708a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	2210      	movs	r2, #16
 8007094:	4013      	ands	r3, r2
 8007096:	2b10      	cmp	r3, #16
 8007098:	d103      	bne.n	80070a2 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2210      	movs	r2, #16
 80070a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	225c      	movs	r2, #92	; 0x5c
 80070a6:	5a9a      	ldrh	r2, [r3, r2]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	0011      	movs	r1, r2
 80070ac:	0018      	movs	r0, r3
 80070ae:	f7ff fa13 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070b2:	e00c      	b.n	80070ce <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	0018      	movs	r0, r3
 80070b8:	f7fa fef0 	bl	8001e9c <HAL_UART_RxCpltCallback>
}
 80070bc:	e007      	b.n	80070ce <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2108      	movs	r1, #8
 80070ca:	430a      	orrs	r2, r1
 80070cc:	619a      	str	r2, [r3, #24]
}
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b010      	add	sp, #64	; 0x40
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	fffffedf 	.word	0xfffffedf

080070dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b090      	sub	sp, #64	; 0x40
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070e4:	203e      	movs	r0, #62	; 0x3e
 80070e6:	183b      	adds	r3, r7, r0
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	2160      	movs	r1, #96	; 0x60
 80070ec:	5a52      	ldrh	r2, [r2, r1]
 80070ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	228c      	movs	r2, #140	; 0x8c
 80070f4:	589b      	ldr	r3, [r3, r2]
 80070f6:	2b22      	cmp	r3, #34	; 0x22
 80070f8:	d000      	beq.n	80070fc <UART_RxISR_16BIT+0x20>
 80070fa:	e09a      	b.n	8007232 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007102:	213c      	movs	r1, #60	; 0x3c
 8007104:	187b      	adds	r3, r7, r1
 8007106:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800710e:	187b      	adds	r3, r7, r1
 8007110:	183a      	adds	r2, r7, r0
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	8812      	ldrh	r2, [r2, #0]
 8007116:	4013      	ands	r3, r2
 8007118:	b29a      	uxth	r2, r3
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007122:	1c9a      	adds	r2, r3, #2
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	225e      	movs	r2, #94	; 0x5e
 800712c:	5a9b      	ldrh	r3, [r3, r2]
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b299      	uxth	r1, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	225e      	movs	r2, #94	; 0x5e
 8007138:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	225e      	movs	r2, #94	; 0x5e
 800713e:	5a9b      	ldrh	r3, [r3, r2]
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d000      	beq.n	8007148 <UART_RxISR_16BIT+0x6c>
 8007146:	e07c      	b.n	8007242 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007148:	f3ef 8310 	mrs	r3, PRIMASK
 800714c:	617b      	str	r3, [r7, #20]
  return(result);
 800714e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
 8007152:	2301      	movs	r3, #1
 8007154:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	f383 8810 	msr	PRIMASK, r3
}
 800715c:	46c0      	nop			; (mov r8, r8)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4938      	ldr	r1, [pc, #224]	; (800724c <UART_RxISR_16BIT+0x170>)
 800716a:	400a      	ands	r2, r1
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007170:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f383 8810 	msr	PRIMASK, r3
}
 8007178:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800717a:	f3ef 8310 	mrs	r3, PRIMASK
 800717e:	623b      	str	r3, [r7, #32]
  return(result);
 8007180:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007182:	633b      	str	r3, [r7, #48]	; 0x30
 8007184:	2301      	movs	r3, #1
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	f383 8810 	msr	PRIMASK, r3
}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2101      	movs	r1, #1
 800719c:	438a      	bics	r2, r1
 800719e:	609a      	str	r2, [r3, #8]
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	f383 8810 	msr	PRIMASK, r3
}
 80071aa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	228c      	movs	r2, #140	; 0x8c
 80071b0:	2120      	movs	r1, #32
 80071b2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d12f      	bne.n	8007228 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ce:	f3ef 8310 	mrs	r3, PRIMASK
 80071d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80071d4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071d8:	2301      	movs	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f383 8810 	msr	PRIMASK, r3
}
 80071e2:	46c0      	nop			; (mov r8, r8)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2110      	movs	r1, #16
 80071f0:	438a      	bics	r2, r1
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f383 8810 	msr	PRIMASK, r3
}
 80071fe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	2210      	movs	r2, #16
 8007208:	4013      	ands	r3, r2
 800720a:	2b10      	cmp	r3, #16
 800720c:	d103      	bne.n	8007216 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2210      	movs	r2, #16
 8007214:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	225c      	movs	r2, #92	; 0x5c
 800721a:	5a9a      	ldrh	r2, [r3, r2]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	0011      	movs	r1, r2
 8007220:	0018      	movs	r0, r3
 8007222:	f7ff f959 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007226:	e00c      	b.n	8007242 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	0018      	movs	r0, r3
 800722c:	f7fa fe36 	bl	8001e9c <HAL_UART_RxCpltCallback>
}
 8007230:	e007      	b.n	8007242 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	699a      	ldr	r2, [r3, #24]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2108      	movs	r1, #8
 800723e:	430a      	orrs	r2, r1
 8007240:	619a      	str	r2, [r3, #24]
}
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	46bd      	mov	sp, r7
 8007246:	b010      	add	sp, #64	; 0x40
 8007248:	bd80      	pop	{r7, pc}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	fffffedf 	.word	0xfffffedf

08007250 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b09c      	sub	sp, #112	; 0x70
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007258:	236a      	movs	r3, #106	; 0x6a
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	2160      	movs	r1, #96	; 0x60
 8007260:	5a52      	ldrh	r2, [r2, r1]
 8007262:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	228c      	movs	r2, #140	; 0x8c
 8007280:	589b      	ldr	r3, [r3, r2]
 8007282:	2b22      	cmp	r3, #34	; 0x22
 8007284:	d000      	beq.n	8007288 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007286:	e144      	b.n	8007512 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007288:	235e      	movs	r3, #94	; 0x5e
 800728a:	18fb      	adds	r3, r7, r3
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	2168      	movs	r1, #104	; 0x68
 8007290:	5a52      	ldrh	r2, [r2, r1]
 8007292:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007294:	e0eb      	b.n	800746e <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800729c:	215c      	movs	r1, #92	; 0x5c
 800729e:	187b      	adds	r3, r7, r1
 80072a0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072a2:	187b      	adds	r3, r7, r1
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	236a      	movs	r3, #106	; 0x6a
 80072aa:	18fb      	adds	r3, r7, r3
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	b2d9      	uxtb	r1, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b4:	400a      	ands	r2, r1
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	225e      	movs	r2, #94	; 0x5e
 80072c8:	5a9b      	ldrh	r3, [r3, r2]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	3b01      	subs	r3, #1
 80072ce:	b299      	uxth	r1, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	225e      	movs	r2, #94	; 0x5e
 80072d4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80072de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e0:	2207      	movs	r2, #7
 80072e2:	4013      	ands	r3, r2
 80072e4:	d049      	beq.n	800737a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e8:	2201      	movs	r2, #1
 80072ea:	4013      	ands	r3, r2
 80072ec:	d010      	beq.n	8007310 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80072ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80072f0:	2380      	movs	r3, #128	; 0x80
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	4013      	ands	r3, r2
 80072f6:	d00b      	beq.n	8007310 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2201      	movs	r2, #1
 80072fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2290      	movs	r2, #144	; 0x90
 8007304:	589b      	ldr	r3, [r3, r2]
 8007306:	2201      	movs	r2, #1
 8007308:	431a      	orrs	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2190      	movs	r1, #144	; 0x90
 800730e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007312:	2202      	movs	r2, #2
 8007314:	4013      	ands	r3, r2
 8007316:	d00f      	beq.n	8007338 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800731a:	2201      	movs	r2, #1
 800731c:	4013      	ands	r3, r2
 800731e:	d00b      	beq.n	8007338 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2202      	movs	r2, #2
 8007326:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2290      	movs	r2, #144	; 0x90
 800732c:	589b      	ldr	r3, [r3, r2]
 800732e:	2204      	movs	r2, #4
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2190      	movs	r1, #144	; 0x90
 8007336:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733a:	2204      	movs	r2, #4
 800733c:	4013      	ands	r3, r2
 800733e:	d00f      	beq.n	8007360 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007342:	2201      	movs	r2, #1
 8007344:	4013      	ands	r3, r2
 8007346:	d00b      	beq.n	8007360 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2204      	movs	r2, #4
 800734e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2290      	movs	r2, #144	; 0x90
 8007354:	589b      	ldr	r3, [r3, r2]
 8007356:	2202      	movs	r2, #2
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2190      	movs	r1, #144	; 0x90
 800735e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2290      	movs	r2, #144	; 0x90
 8007364:	589b      	ldr	r3, [r3, r2]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	0018      	movs	r0, r3
 800736e:	f7ff f8ab 	bl	80064c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2290      	movs	r2, #144	; 0x90
 8007376:	2100      	movs	r1, #0
 8007378:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	225e      	movs	r2, #94	; 0x5e
 800737e:	5a9b      	ldrh	r3, [r3, r2]
 8007380:	b29b      	uxth	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d173      	bne.n	800746e <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007386:	f3ef 8310 	mrs	r3, PRIMASK
 800738a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800738e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007390:	2301      	movs	r3, #1
 8007392:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	f383 8810 	msr	PRIMASK, r3
}
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4961      	ldr	r1, [pc, #388]	; (800752c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80073a8:	400a      	ands	r2, r1
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b2:	f383 8810 	msr	PRIMASK, r3
}
 80073b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b8:	f3ef 8310 	mrs	r3, PRIMASK
 80073bc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073c0:	657b      	str	r3, [r7, #84]	; 0x54
 80073c2:	2301      	movs	r3, #1
 80073c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c8:	f383 8810 	msr	PRIMASK, r3
}
 80073cc:	46c0      	nop			; (mov r8, r8)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4955      	ldr	r1, [pc, #340]	; (8007530 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80073da:	400a      	ands	r2, r1
 80073dc:	609a      	str	r2, [r3, #8]
 80073de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073e0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e4:	f383 8810 	msr	PRIMASK, r3
}
 80073e8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	228c      	movs	r2, #140	; 0x8c
 80073ee:	2120      	movs	r1, #32
 80073f0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007402:	2b01      	cmp	r3, #1
 8007404:	d12f      	bne.n	8007466 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800740c:	f3ef 8310 	mrs	r3, PRIMASK
 8007410:	623b      	str	r3, [r7, #32]
  return(result);
 8007412:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007414:	653b      	str	r3, [r7, #80]	; 0x50
 8007416:	2301      	movs	r3, #1
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	f383 8810 	msr	PRIMASK, r3
}
 8007420:	46c0      	nop			; (mov r8, r8)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2110      	movs	r1, #16
 800742e:	438a      	bics	r2, r1
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007434:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	f383 8810 	msr	PRIMASK, r3
}
 800743c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	2210      	movs	r2, #16
 8007446:	4013      	ands	r3, r2
 8007448:	2b10      	cmp	r3, #16
 800744a:	d103      	bne.n	8007454 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2210      	movs	r2, #16
 8007452:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	225c      	movs	r2, #92	; 0x5c
 8007458:	5a9a      	ldrh	r2, [r3, r2]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	0011      	movs	r1, r2
 800745e:	0018      	movs	r0, r3
 8007460:	f7ff f83a 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
 8007464:	e003      	b.n	800746e <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	0018      	movs	r0, r3
 800746a:	f7fa fd17 	bl	8001e9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800746e:	235e      	movs	r3, #94	; 0x5e
 8007470:	18fb      	adds	r3, r7, r3
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d004      	beq.n	8007482 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800747a:	2220      	movs	r2, #32
 800747c:	4013      	ands	r3, r2
 800747e:	d000      	beq.n	8007482 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007480:	e709      	b.n	8007296 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007482:	204e      	movs	r0, #78	; 0x4e
 8007484:	183b      	adds	r3, r7, r0
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	215e      	movs	r1, #94	; 0x5e
 800748a:	5a52      	ldrh	r2, [r2, r1]
 800748c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800748e:	0001      	movs	r1, r0
 8007490:	187b      	adds	r3, r7, r1
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d044      	beq.n	8007522 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2268      	movs	r2, #104	; 0x68
 800749c:	5a9b      	ldrh	r3, [r3, r2]
 800749e:	187a      	adds	r2, r7, r1
 80074a0:	8812      	ldrh	r2, [r2, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d23d      	bcs.n	8007522 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074a6:	f3ef 8310 	mrs	r3, PRIMASK
 80074aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ac:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80074b0:	2301      	movs	r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f383 8810 	msr	PRIMASK, r3
}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	491b      	ldr	r1, [pc, #108]	; (8007534 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80074c8:	400a      	ands	r2, r1
 80074ca:	609a      	str	r2, [r3, #8]
 80074cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f383 8810 	msr	PRIMASK, r3
}
 80074d6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a17      	ldr	r2, [pc, #92]	; (8007538 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80074dc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074de:	f3ef 8310 	mrs	r3, PRIMASK
 80074e2:	617b      	str	r3, [r7, #20]
  return(result);
 80074e4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074e6:	647b      	str	r3, [r7, #68]	; 0x44
 80074e8:	2301      	movs	r3, #1
 80074ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f383 8810 	msr	PRIMASK, r3
}
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2120      	movs	r1, #32
 8007500:	430a      	orrs	r2, r1
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007506:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f383 8810 	msr	PRIMASK, r3
}
 800750e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007510:	e007      	b.n	8007522 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2108      	movs	r1, #8
 800751e:	430a      	orrs	r2, r1
 8007520:	619a      	str	r2, [r3, #24]
}
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	46bd      	mov	sp, r7
 8007526:	b01c      	add	sp, #112	; 0x70
 8007528:	bd80      	pop	{r7, pc}
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	fffffeff 	.word	0xfffffeff
 8007530:	effffffe 	.word	0xeffffffe
 8007534:	efffffff 	.word	0xefffffff
 8007538:	08006f69 	.word	0x08006f69

0800753c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b09e      	sub	sp, #120	; 0x78
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007544:	2372      	movs	r3, #114	; 0x72
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	2160      	movs	r1, #96	; 0x60
 800754c:	5a52      	ldrh	r2, [r2, r1]
 800754e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	228c      	movs	r2, #140	; 0x8c
 800756c:	589b      	ldr	r3, [r3, r2]
 800756e:	2b22      	cmp	r3, #34	; 0x22
 8007570:	d000      	beq.n	8007574 <UART_RxISR_16BIT_FIFOEN+0x38>
 8007572:	e144      	b.n	80077fe <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007574:	2366      	movs	r3, #102	; 0x66
 8007576:	18fb      	adds	r3, r7, r3
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	2168      	movs	r1, #104	; 0x68
 800757c:	5a52      	ldrh	r2, [r2, r1]
 800757e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007580:	e0eb      	b.n	800775a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007588:	2164      	movs	r1, #100	; 0x64
 800758a:	187b      	adds	r3, r7, r1
 800758c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007592:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007594:	187b      	adds	r3, r7, r1
 8007596:	2272      	movs	r2, #114	; 0x72
 8007598:	18ba      	adds	r2, r7, r2
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	8812      	ldrh	r2, [r2, #0]
 800759e:	4013      	ands	r3, r2
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075aa:	1c9a      	adds	r2, r3, #2
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	225e      	movs	r2, #94	; 0x5e
 80075b4:	5a9b      	ldrh	r3, [r3, r2]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b299      	uxth	r1, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	225e      	movs	r2, #94	; 0x5e
 80075c0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80075ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075cc:	2207      	movs	r2, #7
 80075ce:	4013      	ands	r3, r2
 80075d0:	d049      	beq.n	8007666 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d4:	2201      	movs	r2, #1
 80075d6:	4013      	ands	r3, r2
 80075d8:	d010      	beq.n	80075fc <UART_RxISR_16BIT_FIFOEN+0xc0>
 80075da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075dc:	2380      	movs	r3, #128	; 0x80
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	4013      	ands	r3, r2
 80075e2:	d00b      	beq.n	80075fc <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2201      	movs	r2, #1
 80075ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2290      	movs	r2, #144	; 0x90
 80075f0:	589b      	ldr	r3, [r3, r2]
 80075f2:	2201      	movs	r2, #1
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2190      	movs	r1, #144	; 0x90
 80075fa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075fe:	2202      	movs	r2, #2
 8007600:	4013      	ands	r3, r2
 8007602:	d00f      	beq.n	8007624 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8007604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007606:	2201      	movs	r2, #1
 8007608:	4013      	ands	r3, r2
 800760a:	d00b      	beq.n	8007624 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2202      	movs	r2, #2
 8007612:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2290      	movs	r2, #144	; 0x90
 8007618:	589b      	ldr	r3, [r3, r2]
 800761a:	2204      	movs	r2, #4
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2190      	movs	r1, #144	; 0x90
 8007622:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007626:	2204      	movs	r2, #4
 8007628:	4013      	ands	r3, r2
 800762a:	d00f      	beq.n	800764c <UART_RxISR_16BIT_FIFOEN+0x110>
 800762c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800762e:	2201      	movs	r2, #1
 8007630:	4013      	ands	r3, r2
 8007632:	d00b      	beq.n	800764c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2204      	movs	r2, #4
 800763a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2290      	movs	r2, #144	; 0x90
 8007640:	589b      	ldr	r3, [r3, r2]
 8007642:	2202      	movs	r2, #2
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2190      	movs	r1, #144	; 0x90
 800764a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2290      	movs	r2, #144	; 0x90
 8007650:	589b      	ldr	r3, [r3, r2]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d007      	beq.n	8007666 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	0018      	movs	r0, r3
 800765a:	f7fe ff35 	bl	80064c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2290      	movs	r2, #144	; 0x90
 8007662:	2100      	movs	r1, #0
 8007664:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	225e      	movs	r2, #94	; 0x5e
 800766a:	5a9b      	ldrh	r3, [r3, r2]
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d173      	bne.n	800775a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007672:	f3ef 8310 	mrs	r3, PRIMASK
 8007676:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800767a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800767c:	2301      	movs	r3, #1
 800767e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007682:	f383 8810 	msr	PRIMASK, r3
}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4961      	ldr	r1, [pc, #388]	; (8007818 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8007694:	400a      	ands	r2, r1
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800769a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	f383 8810 	msr	PRIMASK, r3
}
 80076a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a4:	f3ef 8310 	mrs	r3, PRIMASK
 80076a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80076aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80076ae:	2301      	movs	r3, #1
 80076b0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076b4:	f383 8810 	msr	PRIMASK, r3
}
 80076b8:	46c0      	nop			; (mov r8, r8)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4955      	ldr	r1, [pc, #340]	; (800781c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80076c6:	400a      	ands	r2, r1
 80076c8:	609a      	str	r2, [r3, #8]
 80076ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076cc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076d0:	f383 8810 	msr	PRIMASK, r3
}
 80076d4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	228c      	movs	r2, #140	; 0x8c
 80076da:	2120      	movs	r1, #32
 80076dc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d12f      	bne.n	8007752 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076f8:	f3ef 8310 	mrs	r3, PRIMASK
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007700:	657b      	str	r3, [r7, #84]	; 0x54
 8007702:	2301      	movs	r3, #1
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	f383 8810 	msr	PRIMASK, r3
}
 800770c:	46c0      	nop			; (mov r8, r8)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2110      	movs	r1, #16
 800771a:	438a      	bics	r2, r1
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007720:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	f383 8810 	msr	PRIMASK, r3
}
 8007728:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	2210      	movs	r2, #16
 8007732:	4013      	ands	r3, r2
 8007734:	2b10      	cmp	r3, #16
 8007736:	d103      	bne.n	8007740 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2210      	movs	r2, #16
 800773e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	225c      	movs	r2, #92	; 0x5c
 8007744:	5a9a      	ldrh	r2, [r3, r2]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	0011      	movs	r1, r2
 800774a:	0018      	movs	r0, r3
 800774c:	f7fe fec4 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
 8007750:	e003      	b.n	800775a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	0018      	movs	r0, r3
 8007756:	f7fa fba1 	bl	8001e9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800775a:	2366      	movs	r3, #102	; 0x66
 800775c:	18fb      	adds	r3, r7, r3
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <UART_RxISR_16BIT_FIFOEN+0x232>
 8007764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007766:	2220      	movs	r2, #32
 8007768:	4013      	ands	r3, r2
 800776a:	d000      	beq.n	800776e <UART_RxISR_16BIT_FIFOEN+0x232>
 800776c:	e709      	b.n	8007582 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800776e:	2052      	movs	r0, #82	; 0x52
 8007770:	183b      	adds	r3, r7, r0
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	215e      	movs	r1, #94	; 0x5e
 8007776:	5a52      	ldrh	r2, [r2, r1]
 8007778:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800777a:	0001      	movs	r1, r0
 800777c:	187b      	adds	r3, r7, r1
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d044      	beq.n	800780e <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2268      	movs	r2, #104	; 0x68
 8007788:	5a9b      	ldrh	r3, [r3, r2]
 800778a:	187a      	adds	r2, r7, r1
 800778c:	8812      	ldrh	r2, [r2, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d23d      	bcs.n	800780e <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007792:	f3ef 8310 	mrs	r3, PRIMASK
 8007796:	60fb      	str	r3, [r7, #12]
  return(result);
 8007798:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800779a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800779c:	2301      	movs	r3, #1
 800779e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f383 8810 	msr	PRIMASK, r3
}
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	491b      	ldr	r1, [pc, #108]	; (8007820 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80077b4:	400a      	ands	r2, r1
 80077b6:	609a      	str	r2, [r3, #8]
 80077b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f383 8810 	msr	PRIMASK, r3
}
 80077c2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a17      	ldr	r2, [pc, #92]	; (8007824 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80077c8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ca:	f3ef 8310 	mrs	r3, PRIMASK
 80077ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80077d0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077d4:	2301      	movs	r3, #1
 80077d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	f383 8810 	msr	PRIMASK, r3
}
 80077de:	46c0      	nop			; (mov r8, r8)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2120      	movs	r1, #32
 80077ec:	430a      	orrs	r2, r1
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	f383 8810 	msr	PRIMASK, r3
}
 80077fa:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077fc:	e007      	b.n	800780e <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699a      	ldr	r2, [r3, #24]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2108      	movs	r1, #8
 800780a:	430a      	orrs	r2, r1
 800780c:	619a      	str	r2, [r3, #24]
}
 800780e:	46c0      	nop			; (mov r8, r8)
 8007810:	46bd      	mov	sp, r7
 8007812:	b01e      	add	sp, #120	; 0x78
 8007814:	bd80      	pop	{r7, pc}
 8007816:	46c0      	nop			; (mov r8, r8)
 8007818:	fffffeff 	.word	0xfffffeff
 800781c:	effffffe 	.word	0xeffffffe
 8007820:	efffffff 	.word	0xefffffff
 8007824:	080070dd 	.word	0x080070dd

08007828 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007830:	46c0      	nop			; (mov r8, r8)
 8007832:	46bd      	mov	sp, r7
 8007834:	b002      	add	sp, #8
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007840:	46c0      	nop			; (mov r8, r8)
 8007842:	46bd      	mov	sp, r7
 8007844:	b002      	add	sp, #8
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007850:	46c0      	nop			; (mov r8, r8)
 8007852:	46bd      	mov	sp, r7
 8007854:	b002      	add	sp, #8
 8007856:	bd80      	pop	{r7, pc}

08007858 <__errno>:
 8007858:	4b01      	ldr	r3, [pc, #4]	; (8007860 <__errno+0x8>)
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	4770      	bx	lr
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	20000384 	.word	0x20000384

08007864 <__libc_init_array>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	2600      	movs	r6, #0
 8007868:	4d0c      	ldr	r5, [pc, #48]	; (800789c <__libc_init_array+0x38>)
 800786a:	4c0d      	ldr	r4, [pc, #52]	; (80078a0 <__libc_init_array+0x3c>)
 800786c:	1b64      	subs	r4, r4, r5
 800786e:	10a4      	asrs	r4, r4, #2
 8007870:	42a6      	cmp	r6, r4
 8007872:	d109      	bne.n	8007888 <__libc_init_array+0x24>
 8007874:	2600      	movs	r6, #0
 8007876:	f000 fc8b 	bl	8008190 <_init>
 800787a:	4d0a      	ldr	r5, [pc, #40]	; (80078a4 <__libc_init_array+0x40>)
 800787c:	4c0a      	ldr	r4, [pc, #40]	; (80078a8 <__libc_init_array+0x44>)
 800787e:	1b64      	subs	r4, r4, r5
 8007880:	10a4      	asrs	r4, r4, #2
 8007882:	42a6      	cmp	r6, r4
 8007884:	d105      	bne.n	8007892 <__libc_init_array+0x2e>
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	00b3      	lsls	r3, r6, #2
 800788a:	58eb      	ldr	r3, [r5, r3]
 800788c:	4798      	blx	r3
 800788e:	3601      	adds	r6, #1
 8007890:	e7ee      	b.n	8007870 <__libc_init_array+0xc>
 8007892:	00b3      	lsls	r3, r6, #2
 8007894:	58eb      	ldr	r3, [r5, r3]
 8007896:	4798      	blx	r3
 8007898:	3601      	adds	r6, #1
 800789a:	e7f2      	b.n	8007882 <__libc_init_array+0x1e>
 800789c:	08008550 	.word	0x08008550
 80078a0:	08008550 	.word	0x08008550
 80078a4:	08008550 	.word	0x08008550
 80078a8:	08008554 	.word	0x08008554

080078ac <memcpy>:
 80078ac:	2300      	movs	r3, #0
 80078ae:	b510      	push	{r4, lr}
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d100      	bne.n	80078b6 <memcpy+0xa>
 80078b4:	bd10      	pop	{r4, pc}
 80078b6:	5ccc      	ldrb	r4, [r1, r3]
 80078b8:	54c4      	strb	r4, [r0, r3]
 80078ba:	3301      	adds	r3, #1
 80078bc:	e7f8      	b.n	80078b0 <memcpy+0x4>

080078be <memset>:
 80078be:	0003      	movs	r3, r0
 80078c0:	1882      	adds	r2, r0, r2
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d100      	bne.n	80078c8 <memset+0xa>
 80078c6:	4770      	bx	lr
 80078c8:	7019      	strb	r1, [r3, #0]
 80078ca:	3301      	adds	r3, #1
 80078cc:	e7f9      	b.n	80078c2 <memset+0x4>
	...

080078d0 <siprintf>:
 80078d0:	b40e      	push	{r1, r2, r3}
 80078d2:	b500      	push	{lr}
 80078d4:	490b      	ldr	r1, [pc, #44]	; (8007904 <siprintf+0x34>)
 80078d6:	b09c      	sub	sp, #112	; 0x70
 80078d8:	ab1d      	add	r3, sp, #116	; 0x74
 80078da:	9002      	str	r0, [sp, #8]
 80078dc:	9006      	str	r0, [sp, #24]
 80078de:	9107      	str	r1, [sp, #28]
 80078e0:	9104      	str	r1, [sp, #16]
 80078e2:	4809      	ldr	r0, [pc, #36]	; (8007908 <siprintf+0x38>)
 80078e4:	4909      	ldr	r1, [pc, #36]	; (800790c <siprintf+0x3c>)
 80078e6:	cb04      	ldmia	r3!, {r2}
 80078e8:	9105      	str	r1, [sp, #20]
 80078ea:	6800      	ldr	r0, [r0, #0]
 80078ec:	a902      	add	r1, sp, #8
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	f000 f870 	bl	80079d4 <_svfiprintf_r>
 80078f4:	2300      	movs	r3, #0
 80078f6:	9a02      	ldr	r2, [sp, #8]
 80078f8:	7013      	strb	r3, [r2, #0]
 80078fa:	b01c      	add	sp, #112	; 0x70
 80078fc:	bc08      	pop	{r3}
 80078fe:	b003      	add	sp, #12
 8007900:	4718      	bx	r3
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	7fffffff 	.word	0x7fffffff
 8007908:	20000384 	.word	0x20000384
 800790c:	ffff0208 	.word	0xffff0208

08007910 <__ssputs_r>:
 8007910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007912:	688e      	ldr	r6, [r1, #8]
 8007914:	b085      	sub	sp, #20
 8007916:	0007      	movs	r7, r0
 8007918:	000c      	movs	r4, r1
 800791a:	9203      	str	r2, [sp, #12]
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	429e      	cmp	r6, r3
 8007920:	d83c      	bhi.n	800799c <__ssputs_r+0x8c>
 8007922:	2390      	movs	r3, #144	; 0x90
 8007924:	898a      	ldrh	r2, [r1, #12]
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	421a      	tst	r2, r3
 800792a:	d034      	beq.n	8007996 <__ssputs_r+0x86>
 800792c:	6909      	ldr	r1, [r1, #16]
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	6960      	ldr	r0, [r4, #20]
 8007932:	1a5b      	subs	r3, r3, r1
 8007934:	9302      	str	r3, [sp, #8]
 8007936:	2303      	movs	r3, #3
 8007938:	4343      	muls	r3, r0
 800793a:	0fdd      	lsrs	r5, r3, #31
 800793c:	18ed      	adds	r5, r5, r3
 800793e:	9b01      	ldr	r3, [sp, #4]
 8007940:	9802      	ldr	r0, [sp, #8]
 8007942:	3301      	adds	r3, #1
 8007944:	181b      	adds	r3, r3, r0
 8007946:	106d      	asrs	r5, r5, #1
 8007948:	42ab      	cmp	r3, r5
 800794a:	d900      	bls.n	800794e <__ssputs_r+0x3e>
 800794c:	001d      	movs	r5, r3
 800794e:	0553      	lsls	r3, r2, #21
 8007950:	d532      	bpl.n	80079b8 <__ssputs_r+0xa8>
 8007952:	0029      	movs	r1, r5
 8007954:	0038      	movs	r0, r7
 8007956:	f000 fb49 	bl	8007fec <_malloc_r>
 800795a:	1e06      	subs	r6, r0, #0
 800795c:	d109      	bne.n	8007972 <__ssputs_r+0x62>
 800795e:	230c      	movs	r3, #12
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	2340      	movs	r3, #64	; 0x40
 8007964:	2001      	movs	r0, #1
 8007966:	89a2      	ldrh	r2, [r4, #12]
 8007968:	4240      	negs	r0, r0
 800796a:	4313      	orrs	r3, r2
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	b005      	add	sp, #20
 8007970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007972:	9a02      	ldr	r2, [sp, #8]
 8007974:	6921      	ldr	r1, [r4, #16]
 8007976:	f7ff ff99 	bl	80078ac <memcpy>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	4a14      	ldr	r2, [pc, #80]	; (80079d0 <__ssputs_r+0xc0>)
 800797e:	401a      	ands	r2, r3
 8007980:	2380      	movs	r3, #128	; 0x80
 8007982:	4313      	orrs	r3, r2
 8007984:	81a3      	strh	r3, [r4, #12]
 8007986:	9b02      	ldr	r3, [sp, #8]
 8007988:	6126      	str	r6, [r4, #16]
 800798a:	18f6      	adds	r6, r6, r3
 800798c:	6026      	str	r6, [r4, #0]
 800798e:	6165      	str	r5, [r4, #20]
 8007990:	9e01      	ldr	r6, [sp, #4]
 8007992:	1aed      	subs	r5, r5, r3
 8007994:	60a5      	str	r5, [r4, #8]
 8007996:	9b01      	ldr	r3, [sp, #4]
 8007998:	429e      	cmp	r6, r3
 800799a:	d900      	bls.n	800799e <__ssputs_r+0x8e>
 800799c:	9e01      	ldr	r6, [sp, #4]
 800799e:	0032      	movs	r2, r6
 80079a0:	9903      	ldr	r1, [sp, #12]
 80079a2:	6820      	ldr	r0, [r4, #0]
 80079a4:	f000 faa3 	bl	8007eee <memmove>
 80079a8:	68a3      	ldr	r3, [r4, #8]
 80079aa:	2000      	movs	r0, #0
 80079ac:	1b9b      	subs	r3, r3, r6
 80079ae:	60a3      	str	r3, [r4, #8]
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	199e      	adds	r6, r3, r6
 80079b4:	6026      	str	r6, [r4, #0]
 80079b6:	e7da      	b.n	800796e <__ssputs_r+0x5e>
 80079b8:	002a      	movs	r2, r5
 80079ba:	0038      	movs	r0, r7
 80079bc:	f000 fb8c 	bl	80080d8 <_realloc_r>
 80079c0:	1e06      	subs	r6, r0, #0
 80079c2:	d1e0      	bne.n	8007986 <__ssputs_r+0x76>
 80079c4:	0038      	movs	r0, r7
 80079c6:	6921      	ldr	r1, [r4, #16]
 80079c8:	f000 faa4 	bl	8007f14 <_free_r>
 80079cc:	e7c7      	b.n	800795e <__ssputs_r+0x4e>
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	fffffb7f 	.word	0xfffffb7f

080079d4 <_svfiprintf_r>:
 80079d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079d6:	b0a1      	sub	sp, #132	; 0x84
 80079d8:	9003      	str	r0, [sp, #12]
 80079da:	001d      	movs	r5, r3
 80079dc:	898b      	ldrh	r3, [r1, #12]
 80079de:	000f      	movs	r7, r1
 80079e0:	0016      	movs	r6, r2
 80079e2:	061b      	lsls	r3, r3, #24
 80079e4:	d511      	bpl.n	8007a0a <_svfiprintf_r+0x36>
 80079e6:	690b      	ldr	r3, [r1, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10e      	bne.n	8007a0a <_svfiprintf_r+0x36>
 80079ec:	2140      	movs	r1, #64	; 0x40
 80079ee:	f000 fafd 	bl	8007fec <_malloc_r>
 80079f2:	6038      	str	r0, [r7, #0]
 80079f4:	6138      	str	r0, [r7, #16]
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d105      	bne.n	8007a06 <_svfiprintf_r+0x32>
 80079fa:	230c      	movs	r3, #12
 80079fc:	9a03      	ldr	r2, [sp, #12]
 80079fe:	3801      	subs	r0, #1
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	b021      	add	sp, #132	; 0x84
 8007a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a06:	2340      	movs	r3, #64	; 0x40
 8007a08:	617b      	str	r3, [r7, #20]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	ac08      	add	r4, sp, #32
 8007a0e:	6163      	str	r3, [r4, #20]
 8007a10:	3320      	adds	r3, #32
 8007a12:	7663      	strb	r3, [r4, #25]
 8007a14:	3310      	adds	r3, #16
 8007a16:	76a3      	strb	r3, [r4, #26]
 8007a18:	9507      	str	r5, [sp, #28]
 8007a1a:	0035      	movs	r5, r6
 8007a1c:	782b      	ldrb	r3, [r5, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <_svfiprintf_r+0x52>
 8007a22:	2b25      	cmp	r3, #37	; 0x25
 8007a24:	d147      	bne.n	8007ab6 <_svfiprintf_r+0xe2>
 8007a26:	1bab      	subs	r3, r5, r6
 8007a28:	9305      	str	r3, [sp, #20]
 8007a2a:	42b5      	cmp	r5, r6
 8007a2c:	d00c      	beq.n	8007a48 <_svfiprintf_r+0x74>
 8007a2e:	0032      	movs	r2, r6
 8007a30:	0039      	movs	r1, r7
 8007a32:	9803      	ldr	r0, [sp, #12]
 8007a34:	f7ff ff6c 	bl	8007910 <__ssputs_r>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d100      	bne.n	8007a3e <_svfiprintf_r+0x6a>
 8007a3c:	e0ae      	b.n	8007b9c <_svfiprintf_r+0x1c8>
 8007a3e:	6962      	ldr	r2, [r4, #20]
 8007a40:	9b05      	ldr	r3, [sp, #20]
 8007a42:	4694      	mov	ip, r2
 8007a44:	4463      	add	r3, ip
 8007a46:	6163      	str	r3, [r4, #20]
 8007a48:	782b      	ldrb	r3, [r5, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d100      	bne.n	8007a50 <_svfiprintf_r+0x7c>
 8007a4e:	e0a5      	b.n	8007b9c <_svfiprintf_r+0x1c8>
 8007a50:	2201      	movs	r2, #1
 8007a52:	2300      	movs	r3, #0
 8007a54:	4252      	negs	r2, r2
 8007a56:	6062      	str	r2, [r4, #4]
 8007a58:	a904      	add	r1, sp, #16
 8007a5a:	3254      	adds	r2, #84	; 0x54
 8007a5c:	1852      	adds	r2, r2, r1
 8007a5e:	1c6e      	adds	r6, r5, #1
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	60e3      	str	r3, [r4, #12]
 8007a64:	60a3      	str	r3, [r4, #8]
 8007a66:	7013      	strb	r3, [r2, #0]
 8007a68:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a6a:	2205      	movs	r2, #5
 8007a6c:	7831      	ldrb	r1, [r6, #0]
 8007a6e:	4854      	ldr	r0, [pc, #336]	; (8007bc0 <_svfiprintf_r+0x1ec>)
 8007a70:	f000 fa32 	bl	8007ed8 <memchr>
 8007a74:	1c75      	adds	r5, r6, #1
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d11f      	bne.n	8007aba <_svfiprintf_r+0xe6>
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	06d3      	lsls	r3, r2, #27
 8007a7e:	d504      	bpl.n	8007a8a <_svfiprintf_r+0xb6>
 8007a80:	2353      	movs	r3, #83	; 0x53
 8007a82:	a904      	add	r1, sp, #16
 8007a84:	185b      	adds	r3, r3, r1
 8007a86:	2120      	movs	r1, #32
 8007a88:	7019      	strb	r1, [r3, #0]
 8007a8a:	0713      	lsls	r3, r2, #28
 8007a8c:	d504      	bpl.n	8007a98 <_svfiprintf_r+0xc4>
 8007a8e:	2353      	movs	r3, #83	; 0x53
 8007a90:	a904      	add	r1, sp, #16
 8007a92:	185b      	adds	r3, r3, r1
 8007a94:	212b      	movs	r1, #43	; 0x2b
 8007a96:	7019      	strb	r1, [r3, #0]
 8007a98:	7833      	ldrb	r3, [r6, #0]
 8007a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a9c:	d016      	beq.n	8007acc <_svfiprintf_r+0xf8>
 8007a9e:	0035      	movs	r5, r6
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	200a      	movs	r0, #10
 8007aa4:	68e3      	ldr	r3, [r4, #12]
 8007aa6:	782a      	ldrb	r2, [r5, #0]
 8007aa8:	1c6e      	adds	r6, r5, #1
 8007aaa:	3a30      	subs	r2, #48	; 0x30
 8007aac:	2a09      	cmp	r2, #9
 8007aae:	d94e      	bls.n	8007b4e <_svfiprintf_r+0x17a>
 8007ab0:	2900      	cmp	r1, #0
 8007ab2:	d111      	bne.n	8007ad8 <_svfiprintf_r+0x104>
 8007ab4:	e017      	b.n	8007ae6 <_svfiprintf_r+0x112>
 8007ab6:	3501      	adds	r5, #1
 8007ab8:	e7b0      	b.n	8007a1c <_svfiprintf_r+0x48>
 8007aba:	4b41      	ldr	r3, [pc, #260]	; (8007bc0 <_svfiprintf_r+0x1ec>)
 8007abc:	6822      	ldr	r2, [r4, #0]
 8007abe:	1ac0      	subs	r0, r0, r3
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	4083      	lsls	r3, r0
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	002e      	movs	r6, r5
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	e7ce      	b.n	8007a6a <_svfiprintf_r+0x96>
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	1d19      	adds	r1, r3, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	9107      	str	r1, [sp, #28]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	db01      	blt.n	8007adc <_svfiprintf_r+0x108>
 8007ad8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ada:	e004      	b.n	8007ae6 <_svfiprintf_r+0x112>
 8007adc:	425b      	negs	r3, r3
 8007ade:	60e3      	str	r3, [r4, #12]
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	782b      	ldrb	r3, [r5, #0]
 8007ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8007aea:	d10a      	bne.n	8007b02 <_svfiprintf_r+0x12e>
 8007aec:	786b      	ldrb	r3, [r5, #1]
 8007aee:	2b2a      	cmp	r3, #42	; 0x2a
 8007af0:	d135      	bne.n	8007b5e <_svfiprintf_r+0x18a>
 8007af2:	9b07      	ldr	r3, [sp, #28]
 8007af4:	3502      	adds	r5, #2
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	9207      	str	r2, [sp, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	db2b      	blt.n	8007b58 <_svfiprintf_r+0x184>
 8007b00:	9309      	str	r3, [sp, #36]	; 0x24
 8007b02:	4e30      	ldr	r6, [pc, #192]	; (8007bc4 <_svfiprintf_r+0x1f0>)
 8007b04:	2203      	movs	r2, #3
 8007b06:	0030      	movs	r0, r6
 8007b08:	7829      	ldrb	r1, [r5, #0]
 8007b0a:	f000 f9e5 	bl	8007ed8 <memchr>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d006      	beq.n	8007b20 <_svfiprintf_r+0x14c>
 8007b12:	2340      	movs	r3, #64	; 0x40
 8007b14:	1b80      	subs	r0, r0, r6
 8007b16:	4083      	lsls	r3, r0
 8007b18:	6822      	ldr	r2, [r4, #0]
 8007b1a:	3501      	adds	r5, #1
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	6023      	str	r3, [r4, #0]
 8007b20:	7829      	ldrb	r1, [r5, #0]
 8007b22:	2206      	movs	r2, #6
 8007b24:	4828      	ldr	r0, [pc, #160]	; (8007bc8 <_svfiprintf_r+0x1f4>)
 8007b26:	1c6e      	adds	r6, r5, #1
 8007b28:	7621      	strb	r1, [r4, #24]
 8007b2a:	f000 f9d5 	bl	8007ed8 <memchr>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d03c      	beq.n	8007bac <_svfiprintf_r+0x1d8>
 8007b32:	4b26      	ldr	r3, [pc, #152]	; (8007bcc <_svfiprintf_r+0x1f8>)
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d125      	bne.n	8007b84 <_svfiprintf_r+0x1b0>
 8007b38:	2207      	movs	r2, #7
 8007b3a:	9b07      	ldr	r3, [sp, #28]
 8007b3c:	3307      	adds	r3, #7
 8007b3e:	4393      	bics	r3, r2
 8007b40:	3308      	adds	r3, #8
 8007b42:	9307      	str	r3, [sp, #28]
 8007b44:	6963      	ldr	r3, [r4, #20]
 8007b46:	9a04      	ldr	r2, [sp, #16]
 8007b48:	189b      	adds	r3, r3, r2
 8007b4a:	6163      	str	r3, [r4, #20]
 8007b4c:	e765      	b.n	8007a1a <_svfiprintf_r+0x46>
 8007b4e:	4343      	muls	r3, r0
 8007b50:	0035      	movs	r5, r6
 8007b52:	2101      	movs	r1, #1
 8007b54:	189b      	adds	r3, r3, r2
 8007b56:	e7a6      	b.n	8007aa6 <_svfiprintf_r+0xd2>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	425b      	negs	r3, r3
 8007b5c:	e7d0      	b.n	8007b00 <_svfiprintf_r+0x12c>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	200a      	movs	r0, #10
 8007b62:	001a      	movs	r2, r3
 8007b64:	3501      	adds	r5, #1
 8007b66:	6063      	str	r3, [r4, #4]
 8007b68:	7829      	ldrb	r1, [r5, #0]
 8007b6a:	1c6e      	adds	r6, r5, #1
 8007b6c:	3930      	subs	r1, #48	; 0x30
 8007b6e:	2909      	cmp	r1, #9
 8007b70:	d903      	bls.n	8007b7a <_svfiprintf_r+0x1a6>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0c5      	beq.n	8007b02 <_svfiprintf_r+0x12e>
 8007b76:	9209      	str	r2, [sp, #36]	; 0x24
 8007b78:	e7c3      	b.n	8007b02 <_svfiprintf_r+0x12e>
 8007b7a:	4342      	muls	r2, r0
 8007b7c:	0035      	movs	r5, r6
 8007b7e:	2301      	movs	r3, #1
 8007b80:	1852      	adds	r2, r2, r1
 8007b82:	e7f1      	b.n	8007b68 <_svfiprintf_r+0x194>
 8007b84:	ab07      	add	r3, sp, #28
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	003a      	movs	r2, r7
 8007b8a:	0021      	movs	r1, r4
 8007b8c:	4b10      	ldr	r3, [pc, #64]	; (8007bd0 <_svfiprintf_r+0x1fc>)
 8007b8e:	9803      	ldr	r0, [sp, #12]
 8007b90:	e000      	b.n	8007b94 <_svfiprintf_r+0x1c0>
 8007b92:	bf00      	nop
 8007b94:	9004      	str	r0, [sp, #16]
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	d1d3      	bne.n	8007b44 <_svfiprintf_r+0x170>
 8007b9c:	89bb      	ldrh	r3, [r7, #12]
 8007b9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007ba0:	065b      	lsls	r3, r3, #25
 8007ba2:	d400      	bmi.n	8007ba6 <_svfiprintf_r+0x1d2>
 8007ba4:	e72d      	b.n	8007a02 <_svfiprintf_r+0x2e>
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	4240      	negs	r0, r0
 8007baa:	e72a      	b.n	8007a02 <_svfiprintf_r+0x2e>
 8007bac:	ab07      	add	r3, sp, #28
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	003a      	movs	r2, r7
 8007bb2:	0021      	movs	r1, r4
 8007bb4:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <_svfiprintf_r+0x1fc>)
 8007bb6:	9803      	ldr	r0, [sp, #12]
 8007bb8:	f000 f87c 	bl	8007cb4 <_printf_i>
 8007bbc:	e7ea      	b.n	8007b94 <_svfiprintf_r+0x1c0>
 8007bbe:	46c0      	nop			; (mov r8, r8)
 8007bc0:	0800851c 	.word	0x0800851c
 8007bc4:	08008522 	.word	0x08008522
 8007bc8:	08008526 	.word	0x08008526
 8007bcc:	00000000 	.word	0x00000000
 8007bd0:	08007911 	.word	0x08007911

08007bd4 <_printf_common>:
 8007bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bd6:	0015      	movs	r5, r2
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	688a      	ldr	r2, [r1, #8]
 8007bdc:	690b      	ldr	r3, [r1, #16]
 8007bde:	000c      	movs	r4, r1
 8007be0:	9000      	str	r0, [sp, #0]
 8007be2:	4293      	cmp	r3, r2
 8007be4:	da00      	bge.n	8007be8 <_printf_common+0x14>
 8007be6:	0013      	movs	r3, r2
 8007be8:	0022      	movs	r2, r4
 8007bea:	602b      	str	r3, [r5, #0]
 8007bec:	3243      	adds	r2, #67	; 0x43
 8007bee:	7812      	ldrb	r2, [r2, #0]
 8007bf0:	2a00      	cmp	r2, #0
 8007bf2:	d001      	beq.n	8007bf8 <_printf_common+0x24>
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	602b      	str	r3, [r5, #0]
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	069b      	lsls	r3, r3, #26
 8007bfc:	d502      	bpl.n	8007c04 <_printf_common+0x30>
 8007bfe:	682b      	ldr	r3, [r5, #0]
 8007c00:	3302      	adds	r3, #2
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	6822      	ldr	r2, [r4, #0]
 8007c06:	2306      	movs	r3, #6
 8007c08:	0017      	movs	r7, r2
 8007c0a:	401f      	ands	r7, r3
 8007c0c:	421a      	tst	r2, r3
 8007c0e:	d027      	beq.n	8007c60 <_printf_common+0x8c>
 8007c10:	0023      	movs	r3, r4
 8007c12:	3343      	adds	r3, #67	; 0x43
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	1e5a      	subs	r2, r3, #1
 8007c18:	4193      	sbcs	r3, r2
 8007c1a:	6822      	ldr	r2, [r4, #0]
 8007c1c:	0692      	lsls	r2, r2, #26
 8007c1e:	d430      	bmi.n	8007c82 <_printf_common+0xae>
 8007c20:	0022      	movs	r2, r4
 8007c22:	9901      	ldr	r1, [sp, #4]
 8007c24:	9800      	ldr	r0, [sp, #0]
 8007c26:	9e08      	ldr	r6, [sp, #32]
 8007c28:	3243      	adds	r2, #67	; 0x43
 8007c2a:	47b0      	blx	r6
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d025      	beq.n	8007c7c <_printf_common+0xa8>
 8007c30:	2306      	movs	r3, #6
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	682a      	ldr	r2, [r5, #0]
 8007c36:	68e1      	ldr	r1, [r4, #12]
 8007c38:	2500      	movs	r5, #0
 8007c3a:	4003      	ands	r3, r0
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d103      	bne.n	8007c48 <_printf_common+0x74>
 8007c40:	1a8d      	subs	r5, r1, r2
 8007c42:	43eb      	mvns	r3, r5
 8007c44:	17db      	asrs	r3, r3, #31
 8007c46:	401d      	ands	r5, r3
 8007c48:	68a3      	ldr	r3, [r4, #8]
 8007c4a:	6922      	ldr	r2, [r4, #16]
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	dd01      	ble.n	8007c54 <_printf_common+0x80>
 8007c50:	1a9b      	subs	r3, r3, r2
 8007c52:	18ed      	adds	r5, r5, r3
 8007c54:	2700      	movs	r7, #0
 8007c56:	42bd      	cmp	r5, r7
 8007c58:	d120      	bne.n	8007c9c <_printf_common+0xc8>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e010      	b.n	8007c80 <_printf_common+0xac>
 8007c5e:	3701      	adds	r7, #1
 8007c60:	68e3      	ldr	r3, [r4, #12]
 8007c62:	682a      	ldr	r2, [r5, #0]
 8007c64:	1a9b      	subs	r3, r3, r2
 8007c66:	42bb      	cmp	r3, r7
 8007c68:	ddd2      	ble.n	8007c10 <_printf_common+0x3c>
 8007c6a:	0022      	movs	r2, r4
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	9901      	ldr	r1, [sp, #4]
 8007c70:	9800      	ldr	r0, [sp, #0]
 8007c72:	9e08      	ldr	r6, [sp, #32]
 8007c74:	3219      	adds	r2, #25
 8007c76:	47b0      	blx	r6
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d1f0      	bne.n	8007c5e <_printf_common+0x8a>
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	4240      	negs	r0, r0
 8007c80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c82:	2030      	movs	r0, #48	; 0x30
 8007c84:	18e1      	adds	r1, r4, r3
 8007c86:	3143      	adds	r1, #67	; 0x43
 8007c88:	7008      	strb	r0, [r1, #0]
 8007c8a:	0021      	movs	r1, r4
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	3145      	adds	r1, #69	; 0x45
 8007c90:	7809      	ldrb	r1, [r1, #0]
 8007c92:	18a2      	adds	r2, r4, r2
 8007c94:	3243      	adds	r2, #67	; 0x43
 8007c96:	3302      	adds	r3, #2
 8007c98:	7011      	strb	r1, [r2, #0]
 8007c9a:	e7c1      	b.n	8007c20 <_printf_common+0x4c>
 8007c9c:	0022      	movs	r2, r4
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	9901      	ldr	r1, [sp, #4]
 8007ca2:	9800      	ldr	r0, [sp, #0]
 8007ca4:	9e08      	ldr	r6, [sp, #32]
 8007ca6:	321a      	adds	r2, #26
 8007ca8:	47b0      	blx	r6
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	d0e6      	beq.n	8007c7c <_printf_common+0xa8>
 8007cae:	3701      	adds	r7, #1
 8007cb0:	e7d1      	b.n	8007c56 <_printf_common+0x82>
	...

08007cb4 <_printf_i>:
 8007cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb6:	b08b      	sub	sp, #44	; 0x2c
 8007cb8:	9206      	str	r2, [sp, #24]
 8007cba:	000a      	movs	r2, r1
 8007cbc:	3243      	adds	r2, #67	; 0x43
 8007cbe:	9307      	str	r3, [sp, #28]
 8007cc0:	9005      	str	r0, [sp, #20]
 8007cc2:	9204      	str	r2, [sp, #16]
 8007cc4:	7e0a      	ldrb	r2, [r1, #24]
 8007cc6:	000c      	movs	r4, r1
 8007cc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cca:	2a78      	cmp	r2, #120	; 0x78
 8007ccc:	d807      	bhi.n	8007cde <_printf_i+0x2a>
 8007cce:	2a62      	cmp	r2, #98	; 0x62
 8007cd0:	d809      	bhi.n	8007ce6 <_printf_i+0x32>
 8007cd2:	2a00      	cmp	r2, #0
 8007cd4:	d100      	bne.n	8007cd8 <_printf_i+0x24>
 8007cd6:	e0c1      	b.n	8007e5c <_printf_i+0x1a8>
 8007cd8:	2a58      	cmp	r2, #88	; 0x58
 8007cda:	d100      	bne.n	8007cde <_printf_i+0x2a>
 8007cdc:	e08c      	b.n	8007df8 <_printf_i+0x144>
 8007cde:	0026      	movs	r6, r4
 8007ce0:	3642      	adds	r6, #66	; 0x42
 8007ce2:	7032      	strb	r2, [r6, #0]
 8007ce4:	e022      	b.n	8007d2c <_printf_i+0x78>
 8007ce6:	0010      	movs	r0, r2
 8007ce8:	3863      	subs	r0, #99	; 0x63
 8007cea:	2815      	cmp	r0, #21
 8007cec:	d8f7      	bhi.n	8007cde <_printf_i+0x2a>
 8007cee:	f7f8 fa07 	bl	8000100 <__gnu_thumb1_case_shi>
 8007cf2:	0016      	.short	0x0016
 8007cf4:	fff6001f 	.word	0xfff6001f
 8007cf8:	fff6fff6 	.word	0xfff6fff6
 8007cfc:	001ffff6 	.word	0x001ffff6
 8007d00:	fff6fff6 	.word	0xfff6fff6
 8007d04:	fff6fff6 	.word	0xfff6fff6
 8007d08:	003600a8 	.word	0x003600a8
 8007d0c:	fff6009a 	.word	0xfff6009a
 8007d10:	00b9fff6 	.word	0x00b9fff6
 8007d14:	0036fff6 	.word	0x0036fff6
 8007d18:	fff6fff6 	.word	0xfff6fff6
 8007d1c:	009e      	.short	0x009e
 8007d1e:	0026      	movs	r6, r4
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	3642      	adds	r6, #66	; 0x42
 8007d24:	1d11      	adds	r1, r2, #4
 8007d26:	6019      	str	r1, [r3, #0]
 8007d28:	6813      	ldr	r3, [r2, #0]
 8007d2a:	7033      	strb	r3, [r6, #0]
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e0a7      	b.n	8007e80 <_printf_i+0x1cc>
 8007d30:	6808      	ldr	r0, [r1, #0]
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	1d0a      	adds	r2, r1, #4
 8007d36:	0605      	lsls	r5, r0, #24
 8007d38:	d50b      	bpl.n	8007d52 <_printf_i+0x9e>
 8007d3a:	680d      	ldr	r5, [r1, #0]
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	2d00      	cmp	r5, #0
 8007d40:	da03      	bge.n	8007d4a <_printf_i+0x96>
 8007d42:	232d      	movs	r3, #45	; 0x2d
 8007d44:	9a04      	ldr	r2, [sp, #16]
 8007d46:	426d      	negs	r5, r5
 8007d48:	7013      	strb	r3, [r2, #0]
 8007d4a:	4b61      	ldr	r3, [pc, #388]	; (8007ed0 <_printf_i+0x21c>)
 8007d4c:	270a      	movs	r7, #10
 8007d4e:	9303      	str	r3, [sp, #12]
 8007d50:	e01b      	b.n	8007d8a <_printf_i+0xd6>
 8007d52:	680d      	ldr	r5, [r1, #0]
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	0641      	lsls	r1, r0, #25
 8007d58:	d5f1      	bpl.n	8007d3e <_printf_i+0x8a>
 8007d5a:	b22d      	sxth	r5, r5
 8007d5c:	e7ef      	b.n	8007d3e <_printf_i+0x8a>
 8007d5e:	680d      	ldr	r5, [r1, #0]
 8007d60:	6819      	ldr	r1, [r3, #0]
 8007d62:	1d08      	adds	r0, r1, #4
 8007d64:	6018      	str	r0, [r3, #0]
 8007d66:	062e      	lsls	r6, r5, #24
 8007d68:	d501      	bpl.n	8007d6e <_printf_i+0xba>
 8007d6a:	680d      	ldr	r5, [r1, #0]
 8007d6c:	e003      	b.n	8007d76 <_printf_i+0xc2>
 8007d6e:	066d      	lsls	r5, r5, #25
 8007d70:	d5fb      	bpl.n	8007d6a <_printf_i+0xb6>
 8007d72:	680d      	ldr	r5, [r1, #0]
 8007d74:	b2ad      	uxth	r5, r5
 8007d76:	4b56      	ldr	r3, [pc, #344]	; (8007ed0 <_printf_i+0x21c>)
 8007d78:	2708      	movs	r7, #8
 8007d7a:	9303      	str	r3, [sp, #12]
 8007d7c:	2a6f      	cmp	r2, #111	; 0x6f
 8007d7e:	d000      	beq.n	8007d82 <_printf_i+0xce>
 8007d80:	3702      	adds	r7, #2
 8007d82:	0023      	movs	r3, r4
 8007d84:	2200      	movs	r2, #0
 8007d86:	3343      	adds	r3, #67	; 0x43
 8007d88:	701a      	strb	r2, [r3, #0]
 8007d8a:	6863      	ldr	r3, [r4, #4]
 8007d8c:	60a3      	str	r3, [r4, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	db03      	blt.n	8007d9a <_printf_i+0xe6>
 8007d92:	2204      	movs	r2, #4
 8007d94:	6821      	ldr	r1, [r4, #0]
 8007d96:	4391      	bics	r1, r2
 8007d98:	6021      	str	r1, [r4, #0]
 8007d9a:	2d00      	cmp	r5, #0
 8007d9c:	d102      	bne.n	8007da4 <_printf_i+0xf0>
 8007d9e:	9e04      	ldr	r6, [sp, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00c      	beq.n	8007dbe <_printf_i+0x10a>
 8007da4:	9e04      	ldr	r6, [sp, #16]
 8007da6:	0028      	movs	r0, r5
 8007da8:	0039      	movs	r1, r7
 8007daa:	f7f8 fa39 	bl	8000220 <__aeabi_uidivmod>
 8007dae:	9b03      	ldr	r3, [sp, #12]
 8007db0:	3e01      	subs	r6, #1
 8007db2:	5c5b      	ldrb	r3, [r3, r1]
 8007db4:	7033      	strb	r3, [r6, #0]
 8007db6:	002b      	movs	r3, r5
 8007db8:	0005      	movs	r5, r0
 8007dba:	429f      	cmp	r7, r3
 8007dbc:	d9f3      	bls.n	8007da6 <_printf_i+0xf2>
 8007dbe:	2f08      	cmp	r7, #8
 8007dc0:	d109      	bne.n	8007dd6 <_printf_i+0x122>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	07db      	lsls	r3, r3, #31
 8007dc6:	d506      	bpl.n	8007dd6 <_printf_i+0x122>
 8007dc8:	6863      	ldr	r3, [r4, #4]
 8007dca:	6922      	ldr	r2, [r4, #16]
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	dc02      	bgt.n	8007dd6 <_printf_i+0x122>
 8007dd0:	2330      	movs	r3, #48	; 0x30
 8007dd2:	3e01      	subs	r6, #1
 8007dd4:	7033      	strb	r3, [r6, #0]
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	1b9b      	subs	r3, r3, r6
 8007dda:	6123      	str	r3, [r4, #16]
 8007ddc:	9b07      	ldr	r3, [sp, #28]
 8007dde:	0021      	movs	r1, r4
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	9805      	ldr	r0, [sp, #20]
 8007de4:	9b06      	ldr	r3, [sp, #24]
 8007de6:	aa09      	add	r2, sp, #36	; 0x24
 8007de8:	f7ff fef4 	bl	8007bd4 <_printf_common>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d14c      	bne.n	8007e8a <_printf_i+0x1d6>
 8007df0:	2001      	movs	r0, #1
 8007df2:	4240      	negs	r0, r0
 8007df4:	b00b      	add	sp, #44	; 0x2c
 8007df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007df8:	3145      	adds	r1, #69	; 0x45
 8007dfa:	700a      	strb	r2, [r1, #0]
 8007dfc:	4a34      	ldr	r2, [pc, #208]	; (8007ed0 <_printf_i+0x21c>)
 8007dfe:	9203      	str	r2, [sp, #12]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	6821      	ldr	r1, [r4, #0]
 8007e04:	ca20      	ldmia	r2!, {r5}
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	0608      	lsls	r0, r1, #24
 8007e0a:	d516      	bpl.n	8007e3a <_printf_i+0x186>
 8007e0c:	07cb      	lsls	r3, r1, #31
 8007e0e:	d502      	bpl.n	8007e16 <_printf_i+0x162>
 8007e10:	2320      	movs	r3, #32
 8007e12:	4319      	orrs	r1, r3
 8007e14:	6021      	str	r1, [r4, #0]
 8007e16:	2710      	movs	r7, #16
 8007e18:	2d00      	cmp	r5, #0
 8007e1a:	d1b2      	bne.n	8007d82 <_printf_i+0xce>
 8007e1c:	2320      	movs	r3, #32
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	439a      	bics	r2, r3
 8007e22:	6022      	str	r2, [r4, #0]
 8007e24:	e7ad      	b.n	8007d82 <_printf_i+0xce>
 8007e26:	2220      	movs	r2, #32
 8007e28:	6809      	ldr	r1, [r1, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	6022      	str	r2, [r4, #0]
 8007e2e:	0022      	movs	r2, r4
 8007e30:	2178      	movs	r1, #120	; 0x78
 8007e32:	3245      	adds	r2, #69	; 0x45
 8007e34:	7011      	strb	r1, [r2, #0]
 8007e36:	4a27      	ldr	r2, [pc, #156]	; (8007ed4 <_printf_i+0x220>)
 8007e38:	e7e1      	b.n	8007dfe <_printf_i+0x14a>
 8007e3a:	0648      	lsls	r0, r1, #25
 8007e3c:	d5e6      	bpl.n	8007e0c <_printf_i+0x158>
 8007e3e:	b2ad      	uxth	r5, r5
 8007e40:	e7e4      	b.n	8007e0c <_printf_i+0x158>
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	680d      	ldr	r5, [r1, #0]
 8007e46:	1d10      	adds	r0, r2, #4
 8007e48:	6949      	ldr	r1, [r1, #20]
 8007e4a:	6018      	str	r0, [r3, #0]
 8007e4c:	6813      	ldr	r3, [r2, #0]
 8007e4e:	062e      	lsls	r6, r5, #24
 8007e50:	d501      	bpl.n	8007e56 <_printf_i+0x1a2>
 8007e52:	6019      	str	r1, [r3, #0]
 8007e54:	e002      	b.n	8007e5c <_printf_i+0x1a8>
 8007e56:	066d      	lsls	r5, r5, #25
 8007e58:	d5fb      	bpl.n	8007e52 <_printf_i+0x19e>
 8007e5a:	8019      	strh	r1, [r3, #0]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9e04      	ldr	r6, [sp, #16]
 8007e60:	6123      	str	r3, [r4, #16]
 8007e62:	e7bb      	b.n	8007ddc <_printf_i+0x128>
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	1d11      	adds	r1, r2, #4
 8007e68:	6019      	str	r1, [r3, #0]
 8007e6a:	6816      	ldr	r6, [r2, #0]
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	0030      	movs	r0, r6
 8007e70:	6862      	ldr	r2, [r4, #4]
 8007e72:	f000 f831 	bl	8007ed8 <memchr>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d001      	beq.n	8007e7e <_printf_i+0x1ca>
 8007e7a:	1b80      	subs	r0, r0, r6
 8007e7c:	6060      	str	r0, [r4, #4]
 8007e7e:	6863      	ldr	r3, [r4, #4]
 8007e80:	6123      	str	r3, [r4, #16]
 8007e82:	2300      	movs	r3, #0
 8007e84:	9a04      	ldr	r2, [sp, #16]
 8007e86:	7013      	strb	r3, [r2, #0]
 8007e88:	e7a8      	b.n	8007ddc <_printf_i+0x128>
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	0032      	movs	r2, r6
 8007e8e:	9906      	ldr	r1, [sp, #24]
 8007e90:	9805      	ldr	r0, [sp, #20]
 8007e92:	9d07      	ldr	r5, [sp, #28]
 8007e94:	47a8      	blx	r5
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	d0aa      	beq.n	8007df0 <_printf_i+0x13c>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	079b      	lsls	r3, r3, #30
 8007e9e:	d415      	bmi.n	8007ecc <_printf_i+0x218>
 8007ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea2:	68e0      	ldr	r0, [r4, #12]
 8007ea4:	4298      	cmp	r0, r3
 8007ea6:	daa5      	bge.n	8007df4 <_printf_i+0x140>
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	e7a3      	b.n	8007df4 <_printf_i+0x140>
 8007eac:	0022      	movs	r2, r4
 8007eae:	2301      	movs	r3, #1
 8007eb0:	9906      	ldr	r1, [sp, #24]
 8007eb2:	9805      	ldr	r0, [sp, #20]
 8007eb4:	9e07      	ldr	r6, [sp, #28]
 8007eb6:	3219      	adds	r2, #25
 8007eb8:	47b0      	blx	r6
 8007eba:	1c43      	adds	r3, r0, #1
 8007ebc:	d098      	beq.n	8007df0 <_printf_i+0x13c>
 8007ebe:	3501      	adds	r5, #1
 8007ec0:	68e3      	ldr	r3, [r4, #12]
 8007ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ec4:	1a9b      	subs	r3, r3, r2
 8007ec6:	42ab      	cmp	r3, r5
 8007ec8:	dcf0      	bgt.n	8007eac <_printf_i+0x1f8>
 8007eca:	e7e9      	b.n	8007ea0 <_printf_i+0x1ec>
 8007ecc:	2500      	movs	r5, #0
 8007ece:	e7f7      	b.n	8007ec0 <_printf_i+0x20c>
 8007ed0:	0800852d 	.word	0x0800852d
 8007ed4:	0800853e 	.word	0x0800853e

08007ed8 <memchr>:
 8007ed8:	b2c9      	uxtb	r1, r1
 8007eda:	1882      	adds	r2, r0, r2
 8007edc:	4290      	cmp	r0, r2
 8007ede:	d101      	bne.n	8007ee4 <memchr+0xc>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	4770      	bx	lr
 8007ee4:	7803      	ldrb	r3, [r0, #0]
 8007ee6:	428b      	cmp	r3, r1
 8007ee8:	d0fb      	beq.n	8007ee2 <memchr+0xa>
 8007eea:	3001      	adds	r0, #1
 8007eec:	e7f6      	b.n	8007edc <memchr+0x4>

08007eee <memmove>:
 8007eee:	b510      	push	{r4, lr}
 8007ef0:	4288      	cmp	r0, r1
 8007ef2:	d902      	bls.n	8007efa <memmove+0xc>
 8007ef4:	188b      	adds	r3, r1, r2
 8007ef6:	4298      	cmp	r0, r3
 8007ef8:	d303      	bcc.n	8007f02 <memmove+0x14>
 8007efa:	2300      	movs	r3, #0
 8007efc:	e007      	b.n	8007f0e <memmove+0x20>
 8007efe:	5c8b      	ldrb	r3, [r1, r2]
 8007f00:	5483      	strb	r3, [r0, r2]
 8007f02:	3a01      	subs	r2, #1
 8007f04:	d2fb      	bcs.n	8007efe <memmove+0x10>
 8007f06:	bd10      	pop	{r4, pc}
 8007f08:	5ccc      	ldrb	r4, [r1, r3]
 8007f0a:	54c4      	strb	r4, [r0, r3]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d1fa      	bne.n	8007f08 <memmove+0x1a>
 8007f12:	e7f8      	b.n	8007f06 <memmove+0x18>

08007f14 <_free_r>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	0005      	movs	r5, r0
 8007f18:	2900      	cmp	r1, #0
 8007f1a:	d010      	beq.n	8007f3e <_free_r+0x2a>
 8007f1c:	1f0c      	subs	r4, r1, #4
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	da00      	bge.n	8007f26 <_free_r+0x12>
 8007f24:	18e4      	adds	r4, r4, r3
 8007f26:	0028      	movs	r0, r5
 8007f28:	f000 f918 	bl	800815c <__malloc_lock>
 8007f2c:	4a1d      	ldr	r2, [pc, #116]	; (8007fa4 <_free_r+0x90>)
 8007f2e:	6813      	ldr	r3, [r2, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d105      	bne.n	8007f40 <_free_r+0x2c>
 8007f34:	6063      	str	r3, [r4, #4]
 8007f36:	6014      	str	r4, [r2, #0]
 8007f38:	0028      	movs	r0, r5
 8007f3a:	f000 f917 	bl	800816c <__malloc_unlock>
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
 8007f40:	42a3      	cmp	r3, r4
 8007f42:	d908      	bls.n	8007f56 <_free_r+0x42>
 8007f44:	6821      	ldr	r1, [r4, #0]
 8007f46:	1860      	adds	r0, r4, r1
 8007f48:	4283      	cmp	r3, r0
 8007f4a:	d1f3      	bne.n	8007f34 <_free_r+0x20>
 8007f4c:	6818      	ldr	r0, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	1841      	adds	r1, r0, r1
 8007f52:	6021      	str	r1, [r4, #0]
 8007f54:	e7ee      	b.n	8007f34 <_free_r+0x20>
 8007f56:	001a      	movs	r2, r3
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <_free_r+0x4e>
 8007f5e:	42a3      	cmp	r3, r4
 8007f60:	d9f9      	bls.n	8007f56 <_free_r+0x42>
 8007f62:	6811      	ldr	r1, [r2, #0]
 8007f64:	1850      	adds	r0, r2, r1
 8007f66:	42a0      	cmp	r0, r4
 8007f68:	d10b      	bne.n	8007f82 <_free_r+0x6e>
 8007f6a:	6820      	ldr	r0, [r4, #0]
 8007f6c:	1809      	adds	r1, r1, r0
 8007f6e:	1850      	adds	r0, r2, r1
 8007f70:	6011      	str	r1, [r2, #0]
 8007f72:	4283      	cmp	r3, r0
 8007f74:	d1e0      	bne.n	8007f38 <_free_r+0x24>
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	1841      	adds	r1, r0, r1
 8007f7c:	6011      	str	r1, [r2, #0]
 8007f7e:	6053      	str	r3, [r2, #4]
 8007f80:	e7da      	b.n	8007f38 <_free_r+0x24>
 8007f82:	42a0      	cmp	r0, r4
 8007f84:	d902      	bls.n	8007f8c <_free_r+0x78>
 8007f86:	230c      	movs	r3, #12
 8007f88:	602b      	str	r3, [r5, #0]
 8007f8a:	e7d5      	b.n	8007f38 <_free_r+0x24>
 8007f8c:	6821      	ldr	r1, [r4, #0]
 8007f8e:	1860      	adds	r0, r4, r1
 8007f90:	4283      	cmp	r3, r0
 8007f92:	d103      	bne.n	8007f9c <_free_r+0x88>
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	1841      	adds	r1, r0, r1
 8007f9a:	6021      	str	r1, [r4, #0]
 8007f9c:	6063      	str	r3, [r4, #4]
 8007f9e:	6054      	str	r4, [r2, #4]
 8007fa0:	e7ca      	b.n	8007f38 <_free_r+0x24>
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	20002ad4 	.word	0x20002ad4

08007fa8 <sbrk_aligned>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	4e0f      	ldr	r6, [pc, #60]	; (8007fe8 <sbrk_aligned+0x40>)
 8007fac:	000d      	movs	r5, r1
 8007fae:	6831      	ldr	r1, [r6, #0]
 8007fb0:	0004      	movs	r4, r0
 8007fb2:	2900      	cmp	r1, #0
 8007fb4:	d102      	bne.n	8007fbc <sbrk_aligned+0x14>
 8007fb6:	f000 f8bf 	bl	8008138 <_sbrk_r>
 8007fba:	6030      	str	r0, [r6, #0]
 8007fbc:	0029      	movs	r1, r5
 8007fbe:	0020      	movs	r0, r4
 8007fc0:	f000 f8ba 	bl	8008138 <_sbrk_r>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d00a      	beq.n	8007fde <sbrk_aligned+0x36>
 8007fc8:	2303      	movs	r3, #3
 8007fca:	1cc5      	adds	r5, r0, #3
 8007fcc:	439d      	bics	r5, r3
 8007fce:	42a8      	cmp	r0, r5
 8007fd0:	d007      	beq.n	8007fe2 <sbrk_aligned+0x3a>
 8007fd2:	1a29      	subs	r1, r5, r0
 8007fd4:	0020      	movs	r0, r4
 8007fd6:	f000 f8af 	bl	8008138 <_sbrk_r>
 8007fda:	1c43      	adds	r3, r0, #1
 8007fdc:	d101      	bne.n	8007fe2 <sbrk_aligned+0x3a>
 8007fde:	2501      	movs	r5, #1
 8007fe0:	426d      	negs	r5, r5
 8007fe2:	0028      	movs	r0, r5
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	20002ad8 	.word	0x20002ad8

08007fec <_malloc_r>:
 8007fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fee:	2203      	movs	r2, #3
 8007ff0:	1ccb      	adds	r3, r1, #3
 8007ff2:	4393      	bics	r3, r2
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	0006      	movs	r6, r0
 8007ff8:	001f      	movs	r7, r3
 8007ffa:	2b0c      	cmp	r3, #12
 8007ffc:	d232      	bcs.n	8008064 <_malloc_r+0x78>
 8007ffe:	270c      	movs	r7, #12
 8008000:	42b9      	cmp	r1, r7
 8008002:	d831      	bhi.n	8008068 <_malloc_r+0x7c>
 8008004:	0030      	movs	r0, r6
 8008006:	f000 f8a9 	bl	800815c <__malloc_lock>
 800800a:	4d32      	ldr	r5, [pc, #200]	; (80080d4 <_malloc_r+0xe8>)
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	001c      	movs	r4, r3
 8008010:	2c00      	cmp	r4, #0
 8008012:	d12e      	bne.n	8008072 <_malloc_r+0x86>
 8008014:	0039      	movs	r1, r7
 8008016:	0030      	movs	r0, r6
 8008018:	f7ff ffc6 	bl	8007fa8 <sbrk_aligned>
 800801c:	0004      	movs	r4, r0
 800801e:	1c43      	adds	r3, r0, #1
 8008020:	d11e      	bne.n	8008060 <_malloc_r+0x74>
 8008022:	682c      	ldr	r4, [r5, #0]
 8008024:	0025      	movs	r5, r4
 8008026:	2d00      	cmp	r5, #0
 8008028:	d14a      	bne.n	80080c0 <_malloc_r+0xd4>
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	0029      	movs	r1, r5
 800802e:	18e3      	adds	r3, r4, r3
 8008030:	0030      	movs	r0, r6
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	f000 f880 	bl	8008138 <_sbrk_r>
 8008038:	9b01      	ldr	r3, [sp, #4]
 800803a:	4283      	cmp	r3, r0
 800803c:	d143      	bne.n	80080c6 <_malloc_r+0xda>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	3703      	adds	r7, #3
 8008042:	1aff      	subs	r7, r7, r3
 8008044:	2303      	movs	r3, #3
 8008046:	439f      	bics	r7, r3
 8008048:	3708      	adds	r7, #8
 800804a:	2f0c      	cmp	r7, #12
 800804c:	d200      	bcs.n	8008050 <_malloc_r+0x64>
 800804e:	270c      	movs	r7, #12
 8008050:	0039      	movs	r1, r7
 8008052:	0030      	movs	r0, r6
 8008054:	f7ff ffa8 	bl	8007fa8 <sbrk_aligned>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d034      	beq.n	80080c6 <_malloc_r+0xda>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	19df      	adds	r7, r3, r7
 8008060:	6027      	str	r7, [r4, #0]
 8008062:	e013      	b.n	800808c <_malloc_r+0xa0>
 8008064:	2b00      	cmp	r3, #0
 8008066:	dacb      	bge.n	8008000 <_malloc_r+0x14>
 8008068:	230c      	movs	r3, #12
 800806a:	2500      	movs	r5, #0
 800806c:	6033      	str	r3, [r6, #0]
 800806e:	0028      	movs	r0, r5
 8008070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008072:	6822      	ldr	r2, [r4, #0]
 8008074:	1bd1      	subs	r1, r2, r7
 8008076:	d420      	bmi.n	80080ba <_malloc_r+0xce>
 8008078:	290b      	cmp	r1, #11
 800807a:	d917      	bls.n	80080ac <_malloc_r+0xc0>
 800807c:	19e2      	adds	r2, r4, r7
 800807e:	6027      	str	r7, [r4, #0]
 8008080:	42a3      	cmp	r3, r4
 8008082:	d111      	bne.n	80080a8 <_malloc_r+0xbc>
 8008084:	602a      	str	r2, [r5, #0]
 8008086:	6863      	ldr	r3, [r4, #4]
 8008088:	6011      	str	r1, [r2, #0]
 800808a:	6053      	str	r3, [r2, #4]
 800808c:	0030      	movs	r0, r6
 800808e:	0025      	movs	r5, r4
 8008090:	f000 f86c 	bl	800816c <__malloc_unlock>
 8008094:	2207      	movs	r2, #7
 8008096:	350b      	adds	r5, #11
 8008098:	1d23      	adds	r3, r4, #4
 800809a:	4395      	bics	r5, r2
 800809c:	1aea      	subs	r2, r5, r3
 800809e:	429d      	cmp	r5, r3
 80080a0:	d0e5      	beq.n	800806e <_malloc_r+0x82>
 80080a2:	1b5b      	subs	r3, r3, r5
 80080a4:	50a3      	str	r3, [r4, r2]
 80080a6:	e7e2      	b.n	800806e <_malloc_r+0x82>
 80080a8:	605a      	str	r2, [r3, #4]
 80080aa:	e7ec      	b.n	8008086 <_malloc_r+0x9a>
 80080ac:	6862      	ldr	r2, [r4, #4]
 80080ae:	42a3      	cmp	r3, r4
 80080b0:	d101      	bne.n	80080b6 <_malloc_r+0xca>
 80080b2:	602a      	str	r2, [r5, #0]
 80080b4:	e7ea      	b.n	800808c <_malloc_r+0xa0>
 80080b6:	605a      	str	r2, [r3, #4]
 80080b8:	e7e8      	b.n	800808c <_malloc_r+0xa0>
 80080ba:	0023      	movs	r3, r4
 80080bc:	6864      	ldr	r4, [r4, #4]
 80080be:	e7a7      	b.n	8008010 <_malloc_r+0x24>
 80080c0:	002c      	movs	r4, r5
 80080c2:	686d      	ldr	r5, [r5, #4]
 80080c4:	e7af      	b.n	8008026 <_malloc_r+0x3a>
 80080c6:	230c      	movs	r3, #12
 80080c8:	0030      	movs	r0, r6
 80080ca:	6033      	str	r3, [r6, #0]
 80080cc:	f000 f84e 	bl	800816c <__malloc_unlock>
 80080d0:	e7cd      	b.n	800806e <_malloc_r+0x82>
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	20002ad4 	.word	0x20002ad4

080080d8 <_realloc_r>:
 80080d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080da:	0007      	movs	r7, r0
 80080dc:	000e      	movs	r6, r1
 80080de:	0014      	movs	r4, r2
 80080e0:	2900      	cmp	r1, #0
 80080e2:	d105      	bne.n	80080f0 <_realloc_r+0x18>
 80080e4:	0011      	movs	r1, r2
 80080e6:	f7ff ff81 	bl	8007fec <_malloc_r>
 80080ea:	0005      	movs	r5, r0
 80080ec:	0028      	movs	r0, r5
 80080ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	d103      	bne.n	80080fc <_realloc_r+0x24>
 80080f4:	f7ff ff0e 	bl	8007f14 <_free_r>
 80080f8:	0025      	movs	r5, r4
 80080fa:	e7f7      	b.n	80080ec <_realloc_r+0x14>
 80080fc:	f000 f83e 	bl	800817c <_malloc_usable_size_r>
 8008100:	9001      	str	r0, [sp, #4]
 8008102:	4284      	cmp	r4, r0
 8008104:	d803      	bhi.n	800810e <_realloc_r+0x36>
 8008106:	0035      	movs	r5, r6
 8008108:	0843      	lsrs	r3, r0, #1
 800810a:	42a3      	cmp	r3, r4
 800810c:	d3ee      	bcc.n	80080ec <_realloc_r+0x14>
 800810e:	0021      	movs	r1, r4
 8008110:	0038      	movs	r0, r7
 8008112:	f7ff ff6b 	bl	8007fec <_malloc_r>
 8008116:	1e05      	subs	r5, r0, #0
 8008118:	d0e8      	beq.n	80080ec <_realloc_r+0x14>
 800811a:	9b01      	ldr	r3, [sp, #4]
 800811c:	0022      	movs	r2, r4
 800811e:	429c      	cmp	r4, r3
 8008120:	d900      	bls.n	8008124 <_realloc_r+0x4c>
 8008122:	001a      	movs	r2, r3
 8008124:	0031      	movs	r1, r6
 8008126:	0028      	movs	r0, r5
 8008128:	f7ff fbc0 	bl	80078ac <memcpy>
 800812c:	0031      	movs	r1, r6
 800812e:	0038      	movs	r0, r7
 8008130:	f7ff fef0 	bl	8007f14 <_free_r>
 8008134:	e7da      	b.n	80080ec <_realloc_r+0x14>
	...

08008138 <_sbrk_r>:
 8008138:	2300      	movs	r3, #0
 800813a:	b570      	push	{r4, r5, r6, lr}
 800813c:	4d06      	ldr	r5, [pc, #24]	; (8008158 <_sbrk_r+0x20>)
 800813e:	0004      	movs	r4, r0
 8008140:	0008      	movs	r0, r1
 8008142:	602b      	str	r3, [r5, #0]
 8008144:	f7fb f99c 	bl	8003480 <_sbrk>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d103      	bne.n	8008154 <_sbrk_r+0x1c>
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d000      	beq.n	8008154 <_sbrk_r+0x1c>
 8008152:	6023      	str	r3, [r4, #0]
 8008154:	bd70      	pop	{r4, r5, r6, pc}
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	20002adc 	.word	0x20002adc

0800815c <__malloc_lock>:
 800815c:	b510      	push	{r4, lr}
 800815e:	4802      	ldr	r0, [pc, #8]	; (8008168 <__malloc_lock+0xc>)
 8008160:	f000 f814 	bl	800818c <__retarget_lock_acquire_recursive>
 8008164:	bd10      	pop	{r4, pc}
 8008166:	46c0      	nop			; (mov r8, r8)
 8008168:	20002ae0 	.word	0x20002ae0

0800816c <__malloc_unlock>:
 800816c:	b510      	push	{r4, lr}
 800816e:	4802      	ldr	r0, [pc, #8]	; (8008178 <__malloc_unlock+0xc>)
 8008170:	f000 f80d 	bl	800818e <__retarget_lock_release_recursive>
 8008174:	bd10      	pop	{r4, pc}
 8008176:	46c0      	nop			; (mov r8, r8)
 8008178:	20002ae0 	.word	0x20002ae0

0800817c <_malloc_usable_size_r>:
 800817c:	1f0b      	subs	r3, r1, #4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	1f18      	subs	r0, r3, #4
 8008182:	2b00      	cmp	r3, #0
 8008184:	da01      	bge.n	800818a <_malloc_usable_size_r+0xe>
 8008186:	580b      	ldr	r3, [r1, r0]
 8008188:	18c0      	adds	r0, r0, r3
 800818a:	4770      	bx	lr

0800818c <__retarget_lock_acquire_recursive>:
 800818c:	4770      	bx	lr

0800818e <__retarget_lock_release_recursive>:
 800818e:	4770      	bx	lr

08008190 <_init>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008196:	bc08      	pop	{r3}
 8008198:	469e      	mov	lr, r3
 800819a:	4770      	bx	lr

0800819c <_fini>:
 800819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a2:	bc08      	pop	{r3}
 80081a4:	469e      	mov	lr, r3
 80081a6:	4770      	bx	lr
